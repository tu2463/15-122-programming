/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>
#use <img>

void test_task_2(){
  assert(is_valid_imagesize(5,5));
  assert(!is_valid_imagesize(0,0));
  assert(!is_valid_imagesize(int_min(),int_min()));
  assert(!is_valid_imagesize(int_max(),int_max()));
  assert(get_row(8,5,5)==1);
  assert(get_column(8,5,5)==3);
  assert(is_valid_pixel(4,2,5,5));
  assert(!is_valid_pixel(4,5,5,5));
  assert(!is_valid_pixel(-1,-1,5,5));
  assert(!is_valid_pixel(5,5,5,5));
  assert(get_index(3,4,5,5)==19);
  
  assert(is_valid_imagesize(44444,33333));
  get_row(49602,45654,45446);
  get_column(68205,33444,44333);
  assert(is_valid_pixel(27593,20684,44332,33442));
  get_index(28594,18295,33445,54433);
  
  print("task 2 passed \n");
}

int main() {

  // Create a few small images manually -- here's an example
  pixel_t[] A = alloc_array(pixel_t, 4); // A is a 2x2 image
  int width_A  = 2;
  int height_A = 2;
  A[0] = make_pixel(255, 255, 0, 0);     // A[0] is a red pixel
  A[1] = make_pixel(255, 0, 255, 0);     // A[1] is a green pixel
  A[2] = make_pixel(255, 0, 0, 255);     // A[2] is a blue pixel
  A[3] = make_pixel(255, 255, 255, 0);   // A[3] is a yellow pixel
  printf("Here's what the image looks like:\n");
  image_print(A, width_A, height_A);

  // Load some large images -- here's an example
  image_t g5 = image_load("img/g5.png");
  if (g5 == NULL) error("Could not load source image");
  int width = image_width(g5);
  int height = image_height(g5);
  pixel_t[] inpixels = image_data(g5);
  //@assert \length(inpixels) == width * height;
  printf("Loaded image.  Dimensions are %d by %d.\n", width, height);


  // Test the functions you implemented in imageutil.c0
  // coin -l conio -d pixel.o0 imageutil.c0 images-test.c0
  //   on small and large images
  assert(is_valid_imagesize(width_A,height_A));
  assert(get_row(0,width_A,height_A)==0);
  assert(get_column(1,width,height_A)==1);
  assert(is_valid_pixel(1,0,width,height_A));
  assert(get_index(1,1,width_A,height_A)==3);

  assert(is_valid_imagesize(width,height));
  get_row(width*height/2,width,height);
  get_column(width*height/3,width,height);
  assert(is_valid_pixel(width/2,height/3,width,height));
  get_index(width/3,height/2,width,height);

  test_task_2();

  // Test rotate on your small images
  int oldIndex = -1;
  int newIndex = -1;
  int newRow=-1;
  int newCol=-1;
  pixel[] originalPixels=A;
  width=width_A;
  height=height_A;
  int newSideLength=width+height;
  pixel[] rotatedPixels=rotate(originalPixels, width, height);

  for (oldIndex=0;oldIndex<width*height;oldIndex++){
    // up left
    newRow = height - get_column(oldIndex, width, height) - 1;
    newCol = get_row(oldIndex, width, height);
    newIndex = get_index(newRow, newCol, newSideLength, newSideLength);
    rotatedPixels[newIndex] = originalPixels[oldIndex];

    // up right
    newRow = get_row(oldIndex, width, height);
    newCol = get_column(oldIndex, width, height) + width;
    newIndex = get_index(newRow, newCol, newSideLength, newSideLength);
    rotatedPixels[newIndex] = originalPixels[oldIndex];

    // down left
    newRow = newSideLength - get_row(oldIndex, width, height) - 1;
    newCol = width - get_column(oldIndex, width, height) - 1;
    newIndex = get_index(newRow, newCol, newSideLength, newSideLength);
    rotatedPixels[newIndex] = originalPixels[oldIndex];

    // down right
    newRow = get_column(oldIndex, width, height) + height;
    newCol = newSideLength - get_row(oldIndex, width, height) - 1;
    newIndex = get_index(newRow, newCol, newSideLength, newSideLength);
    rotatedPixels[newIndex] = originalPixels[oldIndex];
  }

  printf("task 3 passed\n");


  // Test apply_mask on your small images



  printf("All tests passed!\n");
  return 0;
}
