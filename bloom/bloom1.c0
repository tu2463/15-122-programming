#use <util>
#use <string>
#use <conio>

struct bloom_filter {
  int capacity; // capacity < int_max()/4 -- max bool array
  bool[] data; // capacity == \length(data)
};

// implementation side type
typedef struct bloom_filter bloom;


bool is_bloom(bloom* B) {
  if (B == NULL) return false;
  //@assert(B->capacity == \length(B->data));
  return 0 < B->capacity && B->capacity < int_max()/4;
}

void print_bloom(bloom* B)
//@requires is_bloom(B);
//@ensures is_bloom(B);
{
  print("Printing bloom --\n");
  for (int i = 0; i < B->capacity; i++){
    printf("%d%s",i," ");
    printbool(B->data[i]);
    print("\n");
  }
  print("Printing bloom -- done\n");
}

bloom* bloom_new(int table_size)
//@requires 0 < table_size && table_size < int_max()/4;
//@ensures is_bloom(\result);
{
  bloom* B = alloc(bloom);
  B->capacity = table_size;
  B->data = alloc_array(bool, table_size);
  // print("new-- \n");
//   print_bloom(B);
  return B;
}

int hash_string(string s)
// Citation: this is adapted from my implementation of hash_mul32 from lab07 
// (changed mul32 to mul31)
{
  int result = 0;
  int len = string_length(s);
  for (int i = 0; i < len; i++){
    char cur_cha = string_charat(s, i);
    result = result * 31 + char_ord(cur_cha);
  }
  return result;
}

int index_of_string(bloom* B, string x)
//@requires is_bloom(B);
//@ensures 0 <= \result && \result < B->capacity;
//@ensures is_bloom(B);
{
  return abs(hash_string(x) % B->capacity);
}

bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
{
  int index = index_of_string(B, x);
  return B->data[index] == true;
}

void bloom_add(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
  int index = index_of_string(B, x);
  B->data[index] = true;
//   print("add-- \n");
//   print_bloom(B);
}

// Client type
typedef bloom* bloom_t;