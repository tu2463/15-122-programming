/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>

bool test_fails(dict_t D, string input) {
  queue_t IN = tokenize(input);
  return NULL == parse(D, IN);
}

bool test_parses(dict_t D, string input, string output) {
  queue_t IN = tokenize(input);
  queue_t OUT = tokenize(output);
  IN = parse(D, IN);
  if (IN == NULL) return false;
  while (!queue_empty(IN)) {
    if (queue_empty(OUT)) return false;
    if (!string_equal(deq(IN), deq(OUT))) return false;
  }
  return queue_empty(OUT);
}

int main() {
  string[] A = alloc_array(string, 8);
  A[1] = "||";
  A[2] = "&&";
  A[3] = "< > != ==";
  A[4] = "<< >>";
  A[5] = "+ -";
  A[6] = "* / %";
  A[7] = "**";
  dict_t PREC = dict_new(A, 8);
  assert(test_parses(PREC, "1 == 3", "1 3 =="));
  // =6
  assert(test_parses(PREC,"36 + 142 / 50 * 169", " 36 142 50 / 169 * +")); 
  assert(test_parses(PREC, "1 + 1 / 2 ** 3 - 2 * 1 % 2 + 3 == 4", 
                     "1 1 2 3 ** / + 2 1 * 2 % - 3 + 4 =="));
  assert(test_parses(PREC, "3 * 4 > -9 / 2 && 3 << 2 == 24 >> 2 - 1", 
                     "3 4 * -9 2 / > 3 2 << 24 2 1 - >> == &&"));
  assert(test_fails(PREC, ""));
  assert(test_fails(PREC, "1 3 2 4 3 5"));
  assert(test_fails(PREC, "1 + +"));
  assert(test_fails(PREC, "9 - - 13"));
  assert(test_fails(PREC, "1 + 2 * 3 - 4 && 5 >> 6 || 7 != 8 == %"));
  assert(test_fails(PREC, "2 / 5 +"));
  assert(test_fails(PREC, "2 / 5 + 3 - - 4"));
  assert(test_parses(PREC, "8", "8"));
  assert(test_fails(PREC, "8 -"));


  string[] ops = alloc_array(string, 3);
  ops[2] = "**";
  ops[1] = "* /";
  ops[0] = "+ -";
  dict_t D = dict_new(ops, 3);

  assert(test_fails(D, ""));
  assert(test_fails(D, "1 3 +"));
  assert(test_fails(D, "+ 1 3"));
  assert(test_fails(D, "1 == 3"));
  assert(test_parses(D, "1 ** 3 + 2 / 4", "1 3 ** 2 4 / +"));
  // Add more tests of your own!

  printf("All tests passed!\n");
  return 0;
}
