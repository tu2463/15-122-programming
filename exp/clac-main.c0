/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/*
 * Clac, interface to a stack-based calculator language
 *
 * 15-122 Principles of Imperative Computation
 */

#use <string>
#use <parse>
#use <conio>
#use <args>

void print_top(istack_t S)
//@requires S != NULL;
{
  if (istack_empty(S)) {
    printf("Stack is now empty\n");
    return;
  }

  printf("Stack is now [");
  int top = ipop(S);
  if (istack_empty(S)) {
    printf("%d]\n", top);
    ipush(S, top);
    return;
  }

  int next = ipop(S);
  printf("%s", istack_empty(S) ? "" : "..,");
  printf("%d,%d]\n", next, top);
  ipush(S, next); ipush(S, top);
  return;
}

void top_level(queue_t Q)
//@requires Q != NULL;
{
  /* Q is input queue */
  istack_t S = istack_new(); /* operand stack */

  printf("Clac top level\n");
  while (true) {
    // If there is nothing to be done on the queue and more input, get input
    if (queue_empty(Q)) {
      if (!eof()) {
        printf("clac>> ");
        flush();
        Q = tokenize(readline());
      } else {
        return;
      }
    }

    eval(S, Q);
    print_top(S);
  }
}

int main() {
  queue_t Q = queue_new();

  top_level(Q);
  return 0;
}
