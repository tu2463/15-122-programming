C0 C0 FF EE       # magic number
00 17             # version 11, arch = 1 (64 bits)

00 06             # int pool count
# int pool
00 19 66 0D
3C 6E F3 5F
7F FF FF FF
80 00 00 00
7F FF FF FF
80 00 00 00

4A 5C             # string pool total size
# string pool
73 74 72 69 6E 67 5F 63 68 61 72 61 74 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 31 39 2E 33 33 2D 31 39 2E 34 39 29 00  # "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 31 39 2E 36 2D 31 39 2E 35 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 19.6-19.50: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 6A 6F 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 33 2E 31 34 2D 32 33 2E 33 36 29 00  # "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)"
73 74 72 69 6E 67 5F 6A 6F 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 34 2E 31 39 2D 32 34 2E 33 35 29 00  # "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)"
73 74 72 69 6E 67 5F 6A 6F 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 34 2E 33 38 2D 32 34 2E 35 34 29 00  # "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 33 2E 36 2D 32 34 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 23.6-24.55: @ensures annotation failed"
73 74 72 69 6E 67 5F 73 75 62 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 31 2E 35 32 2D 33 31 2E 36 38 29 00  # "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 31 2E 36 2D 33 31 2E 36 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 31.6-31.69: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 73 75 62 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 32 2E 31 34 2D 33 32 2E 33 36 29 00  # "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 32 2E 36 2D 33 32 2E 35 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 32.6-32.52: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 37 2E 36 2D 33 37 2E 34 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 37.6-37.44: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 33 2E 36 2D 34 33 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 43.6-43.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 66 72 6F 6D 63 68 61 72 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 34 2E 31 34 2D 34 34 2E 33 36 29 00  # "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 34 2E 36 2D 34 34 2E 34 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 44.6-44.42: @ensures annotation failed"
73 74 72 69 6E 67 5F 66 72 6F 6D 63 68 61 72 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 35 2E 31 34 2D 34 35 2E 33 39 29 00  # "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 35 2E 36 2D 34 35 2E 34 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 45.6-45.45: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 32 2E 36 2D 35 32 2E 34 31 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 52.6-52.41: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 74 6F 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 36 2E 33 34 2D 35 36 2E 35 30 29 00  # "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 36 2E 36 2D 35 36 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 56.6-56.55: @ensures annotation failed"
73 74 72 69 6E 67 5F 74 6F 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 37 2E 34 31 2D 35 37 2E 35 37 29 00  # "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)"
73 74 72 69 6E 67 5F 74 6F 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 37 2E 31 34 2D 35 37 2E 36 32 29 00  # "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 37 2E 36 2D 35 37 2E 36 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 57.6-57.63: @ensures annotation failed"
73 74 72 69 6E 67 5F 66 72 6F 6D 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 32 2E 31 35 2D 36 32 2E 34 37 29 00  # "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 32 2E 36 2D 36 32 2E 34 38 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 62.6-62.48: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 66 72 6F 6D 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 33 2E 31 34 2D 36 33 2E 33 36 29 00  # "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 33 2E 36 2D 36 33 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 63.6-63.55: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 37 2E 36 2D 36 37 2E 34 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 67.6-67.45: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 39 2E 36 2D 36 39 2E 33 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 69.6-69.34: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
69 73 5F 62 6C 6F 6F 6D 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 33 33 2E 39 2D 33 33 2E 33 38 29 00  # "is_bloom (bloom-expensive.c0: 33.9-33.38)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 34 31 2E 34 2D 34 31 2E 32 38 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "bloom-expensive.c0: 41.4-41.28: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
62 6C 6F 6F 6D 5F 6E 65 77 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 34 32 2E 31 32 2D 34 32 2E 32 39 29 00  # "bloom_new (bloom-expensive.c0: 42.12-42.29)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 34 32 2E 34 2D 34 32 2E 33 30 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 42.4-42.30: @ensures annotation failed"
62 6C 6F 6F 6D 5F 63 6F 6E 74 61 69 6E 73 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 34 38 2E 31 33 2D 34 38 2E 32 34 29 00  # "bloom_contains (bloom-expensive.c0: 48.13-48.24)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 34 38 2E 34 2D 34 38 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "bloom-expensive.c0: 48.4-48.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
62 6C 6F 6F 6D 5F 63 6F 6E 74 61 69 6E 73 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 35 31 2E 31 35 2D 35 31 2E 34 31 29 00  # "bloom_contains (bloom-expensive.c0: 51.15-51.41)"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 30 2E 31 33 2D 36 30 2E 32 34 29 00  # "bloom_add (bloom-expensive.c0: 60.13-60.24)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 30 2E 34 2D 36 30 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "bloom-expensive.c0: 60.4-60.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 34 2E 32 37 2D 36 34 2E 36 30 29 00  # "bloom_add (bloom-expensive.c0: 64.27-64.60)"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 37 30 2E 31 34 2D 37 30 2E 34 37 29 00  # "bloom_add (bloom-expensive.c0: 70.14-70.47)"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 31 32 2D 36 31 2E 32 33 29 00  # "bloom_add (bloom-expensive.c0: 61.12-61.23)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 34 2D 36 31 2E 32 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 31 32 2D 36 32 2E 33 32 29 00  # "bloom_add (bloom-expensive.c0: 62.12-62.32)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 34 2D 36 32 2E 33 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 37 36 2E 38 2D 37 36 2E 33 33 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 76.8-76.33: @loop_invariant annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 37 37 2E 32 33 2D 37 37 2E 34 39 29 00  # "bloom_add (bloom-expensive.c0: 77.23-77.49)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 37 37 2E 38 2D 37 37 2E 35 34 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 77.8-77.54: @loop_invariant annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 37 39 2E 31 37 2D 37 39 2E 34 39 29 00  # "bloom_add (bloom-expensive.c0: 79.17-79.49)"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 31 32 2D 36 31 2E 32 33 29 00  # "bloom_add (bloom-expensive.c0: 61.12-61.23)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 34 2D 36 31 2E 32 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 31 32 2D 36 32 2E 33 32 29 00  # "bloom_add (bloom-expensive.c0: 62.12-62.32)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 34 2D 36 32 2E 33 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 31 32 2D 36 31 2E 32 33 29 00  # "bloom_add (bloom-expensive.c0: 61.12-61.23)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 34 2D 36 31 2E 32 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 31 32 2D 36 32 2E 33 32 29 00  # "bloom_add (bloom-expensive.c0: 62.12-62.32)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 34 2D 36 32 2E 33 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 31 32 2D 36 31 2E 32 33 29 00  # "bloom_add (bloom-expensive.c0: 61.12-61.23)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 31 2E 34 2D 36 31 2E 32 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 31 32 2D 36 32 2E 33 32 29 00  # "bloom_add (bloom-expensive.c0: 62.12-62.32)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 36 32 2E 34 2D 36 32 2E 33 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 30 38 2E 36 2D 31 30 38 2E 33 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "bloom-expensive.c0: 108.6-108.30: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
62 6C 6F 6F 6D 5F 6E 65 77 5F 5F 31 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 30 37 2E 31 2D 31 30 39 2E 33 36 29 00  # "bloom_new__1 (bloom-expensive.c0: 107.1-109.36)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 30 39 2E 36 2D 31 30 39 2E 33 30 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 109.6-109.30: @ensures annotation failed"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 32 2E 36 2D 31 31 32 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "bloom-expensive.c0: 112.6-112.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
62 6C 6F 6F 6D 5F 63 6F 6E 74 61 69 6E 73 5F 5F 31 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 31 2E 31 2D 31 31 32 2E 33 31 29 00  # "bloom_contains__1 (bloom-expensive.c0: 111.1-112.31)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 35 2E 36 2D 31 31 35 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "bloom-expensive.c0: 115.6-115.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
62 6C 6F 6F 6D 5F 61 64 64 5F 5F 31 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 34 2E 31 2D 31 31 36 2E 34 31 29 00  # "bloom_add__1 (bloom-expensive.c0: 114.1-116.41)"
62 6C 6F 6F 6D 5F 61 64 64 5F 5F 31 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 36 2E 31 34 2D 31 31 36 2E 33 34 29 00  # "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 36 2E 36 2D 31 31 36 2E 33 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 116.6-116.35: @ensures annotation failed"
62 6C 6F 6F 6D 5F 61 64 64 5F 5F 31 20 28 62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 36 2E 31 34 2D 31 31 36 2E 33 34 29 00  # "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)"
62 6C 6F 6F 6D 2D 65 78 70 65 6E 73 69 76 65 2E 63 30 3A 20 31 31 36 2E 36 2D 31 31 36 2E 33 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "bloom-expensive.c0: 116.6-116.35: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 72 61 6E 64 2E 68 30 3A 20 31 32 2E 36 2D 31 32 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/rand.h0: 12.6-12.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
69 6E 69 74 5F 72 61 6E 64 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 72 61 6E 64 2E 68 30 3A 20 31 31 2E 31 2D 31 33 2E 33 36 29 00  # "init_rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 11.1-13.36)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 72 61 6E 64 2E 68 30 3A 20 31 33 2E 36 2D 31 33 2E 33 30 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/rand.h0: 13.6-13.30: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 72 61 6E 64 2E 68 30 3A 20 31 36 2E 36 2D 31 36 2E 32 37 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/rand.h0: 16.6-16.27: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
72 61 6E 64 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 72 61 6E 64 2E 68 30 3A 20 31 35 2E 31 2D 31 36 2E 33 33 29 00  # "rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 15.1-16.33)"
69 6E 74 5F 73 69 7A 65 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 38 2E 31 2D 39 2E 33 33 29 00  # "int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 39 2E 36 2D 39 2E 32 37 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 9.6-9.27: @ensures annotation failed"
69 6E 74 5F 6D 61 78 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 30 2E 31 2D 31 31 2E 34 32 29 00  # "int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 31 2E 36 2D 31 31 2E 33 36 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 11.6-11.36: @ensures annotation failed"
69 6E 74 5F 6D 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 32 2E 31 2D 31 33 2E 34 33 29 00  # "int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 33 2E 36 2D 31 33 2E 33 37 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 13.6-13.37: @ensures annotation failed"
61 62 73 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 37 2E 31 39 2D 31 37 2E 32 38 29 00  # "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 37 2E 36 2D 31 37 2E 32 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/util.h0: 17.6-17.29: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
61 62 73 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 36 2E 31 2D 31 39 2E 34 38 29 00  # "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 38 2E 36 2D 31 38 2E 32 37 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 18.6-18.27: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 39 2E 36 2D 31 39 2E 34 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 19.6-19.42: @ensures annotation failed"
6D 61 78 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 32 2E 31 2D 32 34 2E 34 39 29 00  # "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 33 2E 36 2D 32 33 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 23.6-23.43: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 34 2E 36 2D 32 34 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 24.6-24.43: @ensures annotation failed"
6D 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 37 2E 31 2D 32 39 2E 34 39 29 00  # "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 38 2E 36 2D 32 38 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 28.6-28.43: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 39 2E 36 2D 32 39 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 29.6-29.43: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 31 33 2E 34 2D 31 33 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 13.4-13.41: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 31 34 2E 34 2D 31 34 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 14.4-14.41: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 31 2E 34 2D 32 31 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 21.4-21.41: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 32 2E 34 2D 32 32 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 22.4-22.41: @ensures annotation failed"
61 62 73 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 39 2E 31 37 2D 32 39 2E 32 36 29 00  # "abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 39 2E 34 2D 32 39 2E 32 37 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/util.c0: 29.4-29.27: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 33 30 2E 34 2D 33 30 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 30.4-30.25: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 33 37 2E 34 2D 33 37 2E 33 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/util.c0: 37.4-37.30: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 30 2E 32 31 2D 34 30 2E 33 34 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 30 2E 31 32 2D 34 30 2E 33 39 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 32 2E 32 31 2D 34 32 2E 33 34 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 32 2E 31 32 2D 34 32 2E 34 34 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 35 31 2E 31 38 2D 35 31 2E 32 38 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 35 35 2E 38 2D 35 35 2E 34 35 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 55.8-55.45: @loop_invariant annotation failed"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 35 37 2E 32 33 2D 35 37 2E 34 33 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 36 30 2E 31 30 2D 36 30 2E 33 34 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 39 2E 31 32 2D 34 39 2E 33 34 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 39 2E 34 30 2D 34 39 2E 35 30 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 39 2E 34 2D 34 39 2E 35 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 49.4-49.51: @ensures annotation failed"
72 65 61 64 6C 69 6E 65 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 63 6F 6E 69 6F 2E 68 30 3A 20 31 34 2E 31 36 2D 31 34 2E 32 31 29 00  # "readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 63 6F 6E 69 6F 2E 68 30 3A 20 31 34 2E 36 2D 31 34 2E 32 32 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/conio.h0: 14.6-14.22: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 31 33 2E 36 2D 31 33 2E 33 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/parse.h0: 13.6-13.39: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 32 30 2E 36 2D 32 30 2E 33 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/parse.h0: 20.6-20.39: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
70 61 72 73 65 5F 74 6F 6B 65 6E 73 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 32 33 2E 33 34 2D 32 33 2E 34 37 29 00  # "parse_tokens__1 (/afs/andrew/course/15/122/lib/parse.h0: 23.34-23.47)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 32 33 2E 36 2D 32 33 2E 34 38 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/parse.h0: 23.6-23.48: @ensures annotation failed"
70 61 72 73 65 5F 69 6E 74 73 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 32 37 2E 31 35 2D 32 37 2E 33 34 29 00  # "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 27.15-27.34)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 32 37 2E 36 2D 32 37 2E 33 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/parse.h0: 27.6-27.35: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
70 61 72 73 65 5F 69 6E 74 73 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 32 38 2E 33 34 2D 32 38 2E 34 37 29 00  # "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 28.34-28.47)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 70 61 72 73 65 2E 68 30 3A 20 32 38 2E 36 2D 32 38 2E 34 38 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/parse.h0: 28.6-28.48: @ensures annotation failed"
28 70 72 6F 67 72 61 6D 20 73 74 61 72 74 29 00  # "(program start)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 2E 31 35 2D 31 36 2E 32 38 29 00  # "main (bloom-test.c0: 16.15-16.28)"
61 00  # "a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 2E 33 2D 31 37 2E 31 39 29 00  # "main (bloom-test.c0: 17.3-17.19)"
61 00  # "a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 2E 31 30 2D 31 38 2E 33 31 29 00  # "main (bloom-test.c0: 18.10-18.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 2E 33 2D 31 38 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 18.3-18.33: assert failed"
62 62 00  # "bb"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 2E 33 2D 31 39 2E 32 30 29 00  # "main (bloom-test.c0: 19.3-19.20)"
62 62 00  # "bb"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 2E 31 30 2D 32 30 2E 33 32 29 00  # "main (bloom-test.c0: 20.10-20.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 2E 33 2D 32 30 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 20.3-20.34: assert failed"
63 63 63 00  # "ccc"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 31 2E 33 2D 32 31 2E 32 31 29 00  # "main (bloom-test.c0: 21.3-21.21)"
63 63 63 00  # "ccc"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 32 2E 31 30 2D 32 32 2E 33 33 29 00  # "main (bloom-test.c0: 22.10-22.33)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 32 2E 33 2D 32 32 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 22.3-22.35: assert failed"
64 61 62 64 00  # "dabd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 33 2E 33 2D 32 33 2E 32 32 29 00  # "main (bloom-test.c0: 23.3-23.22)"
64 61 62 64 00  # "dabd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 34 2E 31 30 2D 32 34 2E 33 34 29 00  # "main (bloom-test.c0: 24.10-24.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 34 2E 33 2D 32 34 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 24.3-24.36: assert failed"
65 20 00  # "e "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 35 2E 33 2D 32 35 2E 32 30 29 00  # "main (bloom-test.c0: 25.3-25.20)"
65 20 00  # "e "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 36 2E 31 30 2D 32 36 2E 33 32 29 00  # "main (bloom-test.c0: 26.10-26.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 36 2E 33 2D 32 36 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 26.3-26.34: assert failed"
20 20 00  # "  "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 37 2E 33 2D 32 37 2E 32 30 29 00  # "main (bloom-test.c0: 27.3-27.20)"
63 63 63 00  # "ccc"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 38 2E 31 30 2D 32 38 2E 33 33 29 00  # "main (bloom-test.c0: 28.10-28.33)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 38 2E 33 2D 32 38 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 28.3-28.35: assert failed"
64 61 62 64 00  # "dabd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 39 2E 31 30 2D 32 39 2E 33 34 29 00  # "main (bloom-test.c0: 29.10-29.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 39 2E 33 2D 32 39 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 29.3-29.36: assert failed"
65 20 00  # "e "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 30 2E 31 30 2D 33 30 2E 33 32 29 00  # "main (bloom-test.c0: 30.10-30.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 30 2E 33 2D 33 30 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 30.3-30.34: assert failed"
20 20 00  # "  "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 31 2E 31 30 2D 33 31 2E 33 32 29 00  # "main (bloom-test.c0: 31.10-31.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 31 2E 33 2D 33 31 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 31.3-31.34: assert failed"
41 46 44 53 48 2A 73 66 73 73 67 2A 26 5E 25 5E 26 2A 29 28 26 5E 29 41 4B 55 20 20 48 38 79 35 39 32 38 34 37 32 30 4C 4B 53 4A 44 00  # "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 32 2E 33 2D 33 32 2E 36 32 29 00  # "main (bloom-test.c0: 32.3-32.62)"
41 46 44 53 48 2A 73 66 73 73 67 2A 26 5E 25 5E 26 2A 29 28 26 5E 29 41 4B 55 20 20 48 38 79 35 39 32 38 34 37 32 30 4C 4B 53 4A 44 00  # "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 33 2E 31 30 2D 33 33 2E 37 35 29 00  # "main (bloom-test.c0: 33.10-33.75)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 33 2E 33 2D 33 33 2E 37 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 33.3-33.77: assert failed"
31 38 34 33 34 38 37 31 00  # "18434871"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 34 2E 33 2D 33 34 2E 32 37 29 00  # "main (bloom-test.c0: 34.3-34.27)"
31 38 34 33 34 38 37 31 00  # "18434871"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 35 2E 31 30 2D 33 35 2E 33 39 29 00  # "main (bloom-test.c0: 35.10-35.39)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 35 2E 33 2D 33 35 2E 34 31 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 35.3-35.41: assert failed"
3F 00  # "\?"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 36 2E 33 2D 33 36 2E 32 30 29 00  # "main (bloom-test.c0: 36.3-36.20)"
3F 00  # "\?"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 37 2E 31 30 2D 33 37 2E 33 31 29 00  # "main (bloom-test.c0: 37.10-37.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 37 2E 33 2D 33 37 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 37.3-37.33: assert failed"
47 00  # "G"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 38 2E 33 2D 33 38 2E 32 30 29 00  # "main (bloom-test.c0: 38.3-38.20)"
47 00  # "G"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 39 2E 31 30 2D 33 39 2E 33 31 29 00  # "main (bloom-test.c0: 39.10-39.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 33 39 2E 33 2D 33 39 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 39.3-39.33: assert failed"
20 20 00  # "  "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 30 2E 31 30 2D 34 30 2E 33 32 29 00  # "main (bloom-test.c0: 40.10-40.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 30 2E 33 2D 34 30 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 40.3-40.34: assert failed"
41 46 44 53 48 2A 73 66 73 73 67 2A 26 5E 25 5E 26 2A 29 28 26 5E 29 41 4B 55 20 20 48 38 79 35 39 32 38 34 37 32 30 4C 4B 53 4A 44 00  # "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 31 2E 31 30 2D 34 31 2E 37 35 29 00  # "main (bloom-test.c0: 41.10-41.75)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 31 2E 33 2D 34 31 2E 37 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 41.3-41.77: assert failed"
31 38 34 33 34 38 37 31 00  # "18434871"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 32 2E 31 30 2D 34 32 2E 33 39 29 00  # "main (bloom-test.c0: 42.10-42.39)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 32 2E 33 2D 34 32 2E 34 31 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 42.3-42.41: assert failed"
3F 00  # "\?"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 33 2E 31 30 2D 34 33 2E 33 31 29 00  # "main (bloom-test.c0: 43.10-43.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 33 2E 33 2D 34 33 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 43.3-43.33: assert failed"
64 61 62 64 00  # "dabd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 34 2E 33 2D 34 34 2E 32 33 29 00  # "main (bloom-test.c0: 44.3-44.23)"
64 61 62 64 00  # "dabd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 35 2E 31 30 2D 34 35 2E 33 34 29 00  # "main (bloom-test.c0: 45.10-45.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 35 2E 33 2D 34 35 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 45.3-45.36: assert failed"
61 00  # "a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 36 2E 33 2D 34 36 2E 32 30 29 00  # "main (bloom-test.c0: 46.3-46.20)"
61 00  # "a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 37 2E 31 30 2D 34 37 2E 33 31 29 00  # "main (bloom-test.c0: 47.10-47.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 37 2E 33 2D 34 37 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 47.3-47.33: assert failed"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 38 2E 33 2D 34 38 2E 32 32 29 00  # "main (bloom-test.c0: 48.3-48.22)"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 39 2E 31 30 2D 34 39 2E 33 33 29 00  # "main (bloom-test.c0: 49.10-49.33)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 34 39 2E 33 2D 34 39 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 49.3-49.35: assert failed"
61 00  # "a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 30 2E 31 30 2D 35 30 2E 33 31 29 00  # "main (bloom-test.c0: 50.10-50.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 30 2E 33 2D 35 30 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 50.3-50.33: assert failed"
62 62 00  # "bb"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 31 2E 31 30 2D 35 31 2E 33 32 29 00  # "main (bloom-test.c0: 51.10-51.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 31 2E 33 2D 35 31 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 51.3-51.34: assert failed"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 33 2E 32 35 2D 35 33 2E 34 36 29 00  # "main (bloom-test.c0: 53.25-53.46)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 33 2E 37 2D 35 33 2E 34 37 29 00  # "main (bloom-test.c0: 53.7-53.47)"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 34 2E 31 36 2D 35 34 2E 33 37 29 00  # "main (bloom-test.c0: 54.16-54.37)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 34 2E 33 2D 35 34 2E 33 38 29 00  # "main (bloom-test.c0: 54.3-54.38)"
20 20 00  # "  "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 35 2E 31 30 2D 35 35 2E 33 32 29 00  # "main (bloom-test.c0: 55.10-55.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 35 2E 33 2D 35 35 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 55.3-55.34: assert failed"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 36 2E 32 37 2D 35 36 2E 34 38 29 00  # "main (bloom-test.c0: 56.27-56.48)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 36 2E 31 30 2D 35 36 2E 34 39 29 00  # "main (bloom-test.c0: 56.10-56.49)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 36 2E 33 2D 35 36 2E 35 31 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 56.3-56.51: assert failed"
20 20 00  # "  "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 37 2E 31 30 2D 35 37 2E 33 32 29 00  # "main (bloom-test.c0: 57.10-57.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 37 2E 33 2D 35 37 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 57.3-57.34: assert failed"
63 63 63 00  # "ccc"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 38 2E 31 30 2D 35 38 2E 33 33 29 00  # "main (bloom-test.c0: 58.10-58.33)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 38 2E 33 2D 35 38 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 58.3-58.35: assert failed"
64 61 62 64 00  # "dabd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 39 2E 31 30 2D 35 39 2E 33 34 29 00  # "main (bloom-test.c0: 59.10-59.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 35 39 2E 33 2D 35 39 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 59.3-59.36: assert failed"
75 6E 00  # "un"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 32 2E 33 2D 36 32 2E 32 31 29 00  # "main (bloom-test.c0: 62.3-62.21)"
64 65 75 78 00  # "deux"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 33 2E 33 2D 36 33 2E 32 33 29 00  # "main (bloom-test.c0: 63.3-63.23)"
74 72 6F 69 73 00  # "trois"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 34 2E 33 2D 36 34 2E 32 34 29 00  # "main (bloom-test.c0: 64.3-64.24)"
71 75 61 74 72 65 00  # "quatre"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 35 2E 33 2D 36 35 2E 32 35 29 00  # "main (bloom-test.c0: 65.3-65.25)"
63 69 6E 71 00  # "cinq"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 36 2E 33 2D 36 36 2E 32 33 29 00  # "main (bloom-test.c0: 66.3-66.23)"
73 69 78 00  # "six"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 37 2E 33 2D 36 37 2E 32 32 29 00  # "main (bloom-test.c0: 67.3-67.22)"
73 65 70 74 00  # "sept"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 38 2E 33 2D 36 38 2E 32 33 29 00  # "main (bloom-test.c0: 68.3-68.23)"
68 75 69 74 00  # "huit"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 36 39 2E 33 2D 36 39 2E 32 33 29 00  # "main (bloom-test.c0: 69.3-69.23)"
6E 65 75 66 00  # "neuf"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 30 2E 33 2D 37 30 2E 32 33 29 00  # "main (bloom-test.c0: 70.3-70.23)"
64 69 78 00  # "dix"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 31 2E 33 2D 37 31 2E 32 32 29 00  # "main (bloom-test.c0: 71.3-71.22)"
75 6E 00  # "un"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 33 2E 31 30 2D 37 33 2E 33 33 29 00  # "main (bloom-test.c0: 73.10-73.33)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 33 2E 33 2D 37 33 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 73.3-73.35: assert failed"
64 65 75 78 00  # "deux"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 34 2E 31 30 2D 37 34 2E 33 35 29 00  # "main (bloom-test.c0: 74.10-74.35)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 34 2E 33 2D 37 34 2E 33 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 74.3-74.37: assert failed"
74 72 6F 69 73 00  # "trois"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 35 2E 31 30 2D 37 35 2E 33 36 29 00  # "main (bloom-test.c0: 75.10-75.36)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 35 2E 33 2D 37 35 2E 33 38 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 75.3-75.38: assert failed"
71 75 61 74 72 65 00  # "quatre"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 36 2E 31 30 2D 37 36 2E 33 37 29 00  # "main (bloom-test.c0: 76.10-76.37)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 36 2E 33 2D 37 36 2E 33 39 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 76.3-76.39: assert failed"
63 69 6E 71 00  # "cinq"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 37 2E 31 30 2D 37 37 2E 33 35 29 00  # "main (bloom-test.c0: 77.10-77.35)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 37 2E 33 2D 37 37 2E 33 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 77.3-77.37: assert failed"
73 69 78 00  # "six"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 38 2E 31 30 2D 37 38 2E 33 34 29 00  # "main (bloom-test.c0: 78.10-78.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 38 2E 33 2D 37 38 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 78.3-78.36: assert failed"
73 65 70 74 00  # "sept"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 39 2E 31 30 2D 37 39 2E 33 35 29 00  # "main (bloom-test.c0: 79.10-79.35)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 37 39 2E 33 2D 37 39 2E 33 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 79.3-79.37: assert failed"
68 75 69 74 00  # "huit"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 30 2E 31 30 2D 38 30 2E 33 35 29 00  # "main (bloom-test.c0: 80.10-80.35)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 30 2E 33 2D 38 30 2E 33 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 80.3-80.37: assert failed"
6E 65 75 66 00  # "neuf"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 31 2E 31 30 2D 38 31 2E 33 35 29 00  # "main (bloom-test.c0: 81.10-81.35)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 31 2E 33 2D 38 31 2E 33 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 81.3-81.37: assert failed"
64 69 78 00  # "dix"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 32 2E 31 30 2D 38 32 2E 33 34 29 00  # "main (bloom-test.c0: 82.10-82.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 32 2E 33 2D 38 32 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 82.3-82.36: assert failed"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 34 2E 31 30 2D 38 34 2E 33 33 29 00  # "main (bloom-test.c0: 84.10-84.33)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 34 2E 33 2D 38 34 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 84.3-84.35: assert failed"
61 00  # "a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 35 2E 31 30 2D 38 35 2E 33 31 29 00  # "main (bloom-test.c0: 85.10-85.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 35 2E 33 2D 38 35 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 85.3-85.33: assert failed"
62 62 00  # "bb"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 36 2E 31 30 2D 38 36 2E 33 32 29 00  # "main (bloom-test.c0: 86.10-86.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 36 2E 33 2D 38 36 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 86.3-86.34: assert failed"
63 63 63 00  # "ccc"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 37 2E 31 30 2D 38 37 2E 33 33 29 00  # "main (bloom-test.c0: 87.10-87.33)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 37 2E 33 2D 38 37 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 87.3-87.35: assert failed"
64 61 62 64 00  # "dabd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 38 2E 31 30 2D 38 38 2E 33 34 29 00  # "main (bloom-test.c0: 88.10-88.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 38 38 2E 33 2D 38 38 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 88.3-88.36: assert failed"
65 6C 65 76 65 6E 00  # "eleven"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 30 2E 33 2D 39 30 2E 32 35 29 00  # "main (bloom-test.c0: 90.3-90.25)"
74 77 65 6C 76 65 00  # "twelve"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 31 2E 33 2D 39 31 2E 32 35 29 00  # "main (bloom-test.c0: 91.3-91.25)"
74 68 69 72 74 65 65 6E 00  # "thirteen"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 32 2E 33 2D 39 32 2E 32 37 29 00  # "main (bloom-test.c0: 92.3-92.27)"
66 6F 75 72 74 65 65 6E 00  # "fourteen"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 33 2E 33 2D 39 33 2E 32 37 29 00  # "main (bloom-test.c0: 93.3-93.27)"
66 69 66 74 65 65 6E 00  # "fifteen"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 34 2E 33 2D 39 34 2E 32 36 29 00  # "main (bloom-test.c0: 94.3-94.26)"
73 69 78 74 65 65 6E 00  # "sixteen"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 35 2E 33 2D 39 35 2E 32 36 29 00  # "main (bloom-test.c0: 95.3-95.26)"
65 69 67 68 74 65 65 6E 00  # "eighteen"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 36 2E 33 2D 39 36 2E 32 37 29 00  # "main (bloom-test.c0: 96.3-96.27)"
6E 69 6E 65 74 65 65 6E 00  # "nineteen"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 37 2E 33 2D 39 37 2E 32 37 29 00  # "main (bloom-test.c0: 97.3-97.27)"
74 77 65 6E 74 79 00  # "twenty"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 39 38 2E 33 2D 39 38 2E 32 35 29 00  # "main (bloom-test.c0: 98.3-98.25)"
47 00  # "G"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 30 2E 31 30 2D 31 30 30 2E 33 31 29 00  # "main (bloom-test.c0: 100.10-100.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 30 2E 33 2D 31 30 30 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 100.3-100.33: assert failed"
20 20 00  # "  "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 31 2E 31 30 2D 31 30 31 2E 33 32 29 00  # "main (bloom-test.c0: 101.10-101.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 31 2E 33 2D 31 30 31 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 101.3-101.34: assert failed"
41 46 44 53 48 2A 73 66 73 73 67 2A 26 5E 25 5E 26 2A 29 28 26 5E 29 41 4B 55 20 20 48 38 79 35 39 32 38 34 37 32 30 4C 4B 53 4A 44 00  # "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 32 2E 31 30 2D 31 30 32 2E 37 35 29 00  # "main (bloom-test.c0: 102.10-102.75)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 32 2E 33 2D 31 30 32 2E 37 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 102.3-102.77: assert failed"
31 38 34 33 34 38 37 31 00  # "18434871"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 33 2E 31 30 2D 31 30 33 2E 33 39 29 00  # "main (bloom-test.c0: 103.10-103.39)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 33 2E 33 2D 31 30 33 2E 34 31 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 103.3-103.41: assert failed"
65 72 73 68 69 79 69 00  # "ershiyi"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 35 2E 33 2D 31 30 35 2E 32 36 29 00  # "main (bloom-test.c0: 105.3-105.26)"
65 72 73 68 69 65 72 00  # "ershier"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 36 2E 33 2D 31 30 36 2E 32 36 29 00  # "main (bloom-test.c0: 106.3-106.26)"
65 72 73 68 69 73 61 6E 00  # "ershisan"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 37 2E 33 2D 31 30 37 2E 32 37 29 00  # "main (bloom-test.c0: 107.3-107.27)"
65 72 73 68 69 73 69 00  # "ershisi"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 38 2E 33 2D 31 30 38 2E 32 36 29 00  # "main (bloom-test.c0: 108.3-108.26)"
65 72 73 68 69 77 75 00  # "ershiwu"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 30 39 2E 33 2D 31 30 39 2E 32 36 29 00  # "main (bloom-test.c0: 109.3-109.26)"
65 72 73 68 69 6C 69 75 00  # "ershiliu"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 31 2E 33 2D 31 31 31 2E 32 37 29 00  # "main (bloom-test.c0: 111.3-111.27)"
65 72 73 68 69 71 69 00  # "ershiqi"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 32 2E 33 2D 31 31 32 2E 32 36 29 00  # "main (bloom-test.c0: 112.3-112.26)"
65 72 73 68 69 62 61 00  # "ershiba"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 33 2E 33 2D 31 31 33 2E 32 36 29 00  # "main (bloom-test.c0: 113.3-113.26)"
65 72 73 68 69 6A 69 75 00  # "ershijiu"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 34 2E 33 2D 31 31 34 2E 32 37 29 00  # "main (bloom-test.c0: 114.3-114.27)"
73 61 6E 73 68 69 00  # "sanshi"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 35 2E 33 2D 31 31 35 2E 32 35 29 00  # "main (bloom-test.c0: 115.3-115.25)"
65 20 00  # "e "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 37 2E 31 30 2D 31 31 37 2E 33 32 29 00  # "main (bloom-test.c0: 117.10-117.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 37 2E 33 2D 31 31 37 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 117.3-117.34: assert failed"
20 20 00  # "  "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 38 2E 31 30 2D 31 31 38 2E 33 32 29 00  # "main (bloom-test.c0: 118.10-118.32)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 38 2E 33 2D 31 31 38 2E 33 34 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 118.3-118.34: assert failed"
41 46 44 53 48 2A 73 66 73 73 67 2A 26 5E 25 5E 26 2A 29 28 26 5E 29 41 4B 55 20 20 48 38 79 35 39 32 38 34 37 32 30 4C 4B 53 4A 44 00  # "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 39 2E 31 30 2D 31 31 39 2E 37 35 29 00  # "main (bloom-test.c0: 119.10-119.75)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 31 39 2E 33 2D 31 31 39 2E 37 37 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 119.3-119.77: assert failed"
31 38 34 33 34 38 37 31 00  # "18434871"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 30 2E 31 30 2D 31 32 30 2E 33 39 29 00  # "main (bloom-test.c0: 120.10-120.39)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 30 2E 33 2D 31 32 30 2E 34 31 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 120.3-120.41: assert failed"
3F 00  # "\?"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 31 2E 31 30 2D 31 32 31 2E 33 31 29 00  # "main (bloom-test.c0: 121.10-121.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 31 2E 33 2D 31 32 31 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 121.3-121.33: assert failed"
47 00  # "G"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 33 2E 31 30 2D 31 32 33 2E 33 31 29 00  # "main (bloom-test.c0: 123.10-123.31)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 33 2E 33 2D 31 32 33 2E 33 33 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 123.3-123.33: assert failed"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 36 2E 32 36 2D 31 32 36 2E 33 35 29 00  # "main (bloom-test.c0: 126.26-126.35)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 36 2E 31 36 2D 31 32 36 2E 33 39 29 00  # "main (bloom-test.c0: 126.16-126.39)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 32 37 2E 31 36 2D 31 32 37 2E 32 38 29 00  # "main (bloom-test.c0: 127.16-127.28)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 31 2E 33 35 2D 31 33 31 2E 34 38 29 00  # "main (bloom-test.c0: 131.35-131.48)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 31 2E 31 39 2D 31 33 31 2E 34 39 29 00  # "main (bloom-test.c0: 131.19-131.49)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 32 2E 33 35 2D 31 33 32 2E 35 30 29 00  # "main (bloom-test.c0: 132.35-132.50)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 32 2E 31 39 2D 31 33 32 2E 35 31 29 00  # "main (bloom-test.c0: 132.19-132.51)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 33 2E 31 38 2D 31 33 33 2E 34 31 29 00  # "main (bloom-test.c0: 133.18-133.41)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 34 2E 35 2D 31 33 34 2E 32 33 29 00  # "main (bloom-test.c0: 134.5-134.23)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 35 2E 31 32 2D 31 33 35 2E 33 34 29 00  # "main (bloom-test.c0: 135.12-135.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 35 2E 35 2D 31 33 35 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 135.5-135.36: assert failed"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 36 2E 35 2D 31 33 36 2E 32 33 29 00  # "main (bloom-test.c0: 136.5-136.23)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 37 2E 31 32 2D 31 33 37 2E 33 34 29 00  # "main (bloom-test.c0: 137.12-137.34)"
62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 37 2E 35 2D 31 33 37 2E 33 36 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "bloom-test.c0: 137.5-137.36: assert failed"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 38 2E 32 38 2D 31 33 38 2E 35 31 29 00  # "main (bloom-test.c0: 138.28-138.51)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 38 2E 39 2D 31 33 38 2E 35 32 29 00  # "main (bloom-test.c0: 138.9-138.52)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 33 39 2E 39 2D 31 33 39 2E 33 33 29 00  # "main (bloom-test.c0: 139.9-139.33)"
20 00  # " "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 30 2E 32 38 2D 31 34 30 2E 34 39 29 00  # "main (bloom-test.c0: 140.28-140.49)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 30 2E 39 2D 31 34 30 2E 35 30 29 00  # "main (bloom-test.c0: 140.9-140.50)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 31 2E 32 38 2D 31 34 31 2E 35 31 29 00  # "main (bloom-test.c0: 141.28-141.51)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 31 2E 39 2D 31 34 31 2E 35 32 29 00  # "main (bloom-test.c0: 141.9-141.52)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 32 2E 39 2D 31 34 32 2E 33 33 29 00  # "main (bloom-test.c0: 142.9-142.33)"
41 6C 6C 20 63 6F 72 72 65 63 74 6E 65 73 73 20 74 65 73 74 73 20 70 61 73 73 65 64 21 0A 0A 00  # "All correctness tests passed!\n\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 34 2E 33 2D 31 34 34 2E 34 36 29 00  # "main (bloom-test.c0: 144.3-144.46)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 35 2E 33 2D 31 34 35 2E 33 32 29 00  # "main (bloom-test.c0: 145.3-145.32)"
2D 2D 31 20 00  # "--1 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 35 2E 33 2D 31 34 35 2E 33 32 29 00  # "main (bloom-test.c0: 145.3-145.32)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 35 2E 33 2D 31 34 35 2E 33 32 29 00  # "main (bloom-test.c0: 145.3-145.32)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 35 2E 33 2D 31 34 35 2E 33 32 29 00  # "main (bloom-test.c0: 145.3-145.32)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 34 35 2E 33 2D 31 34 35 2E 33 32 29 00  # "main (bloom-test.c0: 145.3-145.32)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 32 2E 31 37 2D 31 35 32 2E 34 38 29 00  # "main (bloom-test.c0: 152.17-152.48)"
2D 2D 31 2E 35 20 00  # "--1.5 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 32 2E 31 37 2D 31 35 32 2E 34 38 29 00  # "main (bloom-test.c0: 152.17-152.48)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 32 2E 31 37 2D 31 35 32 2E 34 38 29 00  # "main (bloom-test.c0: 152.17-152.48)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 32 2E 31 37 2D 31 35 32 2E 34 38 29 00  # "main (bloom-test.c0: 152.17-152.48)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 32 2E 31 37 2D 31 35 32 2E 34 38 29 00  # "main (bloom-test.c0: 152.17-152.48)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 33 2E 33 35 2D 31 35 33 2E 34 38 29 00  # "main (bloom-test.c0: 153.35-153.48)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 33 2E 31 39 2D 31 35 33 2E 34 39 29 00  # "main (bloom-test.c0: 153.19-153.49)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 34 2E 39 2D 31 35 34 2E 33 32 29 00  # "main (bloom-test.c0: 154.9-154.32)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 35 2E 39 2D 31 35 35 2E 33 33 29 00  # "main (bloom-test.c0: 155.9-155.33)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 36 2E 39 2D 31 35 36 2E 33 33 29 00  # "main (bloom-test.c0: 156.9-156.33)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 37 2E 33 35 2D 31 35 37 2E 35 31 29 00  # "main (bloom-test.c0: 157.35-157.51)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 37 2E 31 39 2D 31 35 37 2E 35 32 29 00  # "main (bloom-test.c0: 157.19-157.52)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 38 2E 32 37 2D 31 35 38 2E 35 30 29 00  # "main (bloom-test.c0: 158.27-158.50)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 38 2E 39 2D 31 35 38 2E 35 31 29 00  # "main (bloom-test.c0: 158.9-158.51)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 39 2E 32 37 2D 31 35 39 2E 35 30 29 00  # "main (bloom-test.c0: 159.27-159.50)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 35 39 2E 39 2D 31 35 39 2E 35 31 29 00  # "main (bloom-test.c0: 159.9-159.51)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 30 2E 32 38 2D 31 36 30 2E 35 31 29 00  # "main (bloom-test.c0: 160.28-160.51)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 30 2E 39 2D 31 36 30 2E 35 32 29 00  # "main (bloom-test.c0: 160.9-160.52)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 34 2E 33 2D 31 36 34 2E 33 32 29 00  # "main (bloom-test.c0: 164.3-164.32)"
2D 2D 32 20 00  # "--2 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 34 2E 33 2D 31 36 34 2E 33 32 29 00  # "main (bloom-test.c0: 164.3-164.32)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 34 2E 33 2D 31 36 34 2E 33 32 29 00  # "main (bloom-test.c0: 164.3-164.32)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 34 2E 33 2D 31 36 34 2E 33 32 29 00  # "main (bloom-test.c0: 164.3-164.32)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 34 2E 33 2D 31 36 34 2E 33 32 29 00  # "main (bloom-test.c0: 164.3-164.32)"
20 61 00  # " a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 37 2E 37 2D 31 36 37 2E 33 30 29 00  # "main (bloom-test.c0: 167.7-167.30)"
61 20 00  # "a "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 38 2E 37 2D 31 36 38 2E 33 30 29 00  # "main (bloom-test.c0: 168.7-168.30)"
61 61 00  # "aa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 36 39 2E 37 2D 31 36 39 2E 33 30 29 00  # "main (bloom-test.c0: 169.7-169.30)"
62 61 00  # "ba"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 30 2E 37 2D 31 37 30 2E 33 30 29 00  # "main (bloom-test.c0: 170.7-170.30)"
20 20 20 20 20 20 61 00  # "      a"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 31 2E 37 2D 31 37 31 2E 33 35 29 00  # "main (bloom-test.c0: 171.7-171.35)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 32 2E 33 2D 31 37 32 2E 33 34 29 00  # "main (bloom-test.c0: 172.3-172.34)"
2D 2D 32 2E 31 20 00  # "--2.1 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 32 2E 33 2D 31 37 32 2E 33 34 29 00  # "main (bloom-test.c0: 172.3-172.34)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 32 2E 33 2D 31 37 32 2E 33 34 29 00  # "main (bloom-test.c0: 172.3-172.34)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 32 2E 33 2D 31 37 32 2E 33 34 29 00  # "main (bloom-test.c0: 172.3-172.34)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 32 2E 33 2D 31 37 32 2E 33 34 29 00  # "main (bloom-test.c0: 172.3-172.34)"
62 00  # "b"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 33 2E 37 2D 31 37 33 2E 32 39 29 00  # "main (bloom-test.c0: 173.7-173.29)"
20 62 00  # " b"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 34 2E 37 2D 31 37 34 2E 33 30 29 00  # "main (bloom-test.c0: 174.7-174.30)"
62 20 00  # "b "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 35 2E 37 2D 31 37 35 2E 33 30 29 00  # "main (bloom-test.c0: 175.7-175.30)"
62 62 62 00  # "bbb"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 36 2E 37 2D 31 37 36 2E 33 31 29 00  # "main (bloom-test.c0: 176.7-176.31)"
62 20 62 00  # "b b"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 37 2E 37 2D 31 37 37 2E 33 31 29 00  # "main (bloom-test.c0: 177.7-177.31)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 38 2E 33 2D 31 37 38 2E 33 34 29 00  # "main (bloom-test.c0: 178.3-178.34)"
2D 2D 32 2E 32 20 00  # "--2.2 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 38 2E 33 2D 31 37 38 2E 33 34 29 00  # "main (bloom-test.c0: 178.3-178.34)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 38 2E 33 2D 31 37 38 2E 33 34 29 00  # "main (bloom-test.c0: 178.3-178.34)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 38 2E 33 2D 31 37 38 2E 33 34 29 00  # "main (bloom-test.c0: 178.3-178.34)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 38 2E 33 2D 31 37 38 2E 33 34 29 00  # "main (bloom-test.c0: 178.3-178.34)"
63 20 63 00  # "c c"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 37 39 2E 37 2D 31 37 39 2E 33 31 29 00  # "main (bloom-test.c0: 179.7-179.31)"
63 63 00  # "cc"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 30 2E 37 2D 31 38 30 2E 33 30 29 00  # "main (bloom-test.c0: 180.7-180.30)"
63 00  # "c"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 31 2E 37 2D 31 38 31 2E 32 39 29 00  # "main (bloom-test.c0: 181.7-181.29)"
63 63 63 20 00  # "ccc "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 32 2E 37 2D 31 38 32 2E 33 32 29 00  # "main (bloom-test.c0: 182.7-182.32)"
63 64 63 00  # "cdc"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 33 2E 37 2D 31 38 33 2E 33 31 29 00  # "main (bloom-test.c0: 183.7-183.31)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 34 2E 33 2D 31 38 34 2E 33 34 29 00  # "main (bloom-test.c0: 184.3-184.34)"
2D 2D 32 2E 33 20 00  # "--2.3 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 34 2E 33 2D 31 38 34 2E 33 34 29 00  # "main (bloom-test.c0: 184.3-184.34)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 34 2E 33 2D 31 38 34 2E 33 34 29 00  # "main (bloom-test.c0: 184.3-184.34)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 34 2E 33 2D 31 38 34 2E 33 34 29 00  # "main (bloom-test.c0: 184.3-184.34)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 34 2E 33 2D 31 38 34 2E 33 34 29 00  # "main (bloom-test.c0: 184.3-184.34)"
64 00  # "d"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 35 2E 37 2D 31 38 35 2E 32 39 29 00  # "main (bloom-test.c0: 185.7-185.29)"
64 61 00  # "da"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 36 2E 37 2D 31 38 36 2E 33 30 29 00  # "main (bloom-test.c0: 186.7-186.30)"
61 62 00  # "ab"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 37 2E 37 2D 31 38 37 2E 33 30 29 00  # "main (bloom-test.c0: 187.7-187.30)"
64 20 62 64 00  # "d bd"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 38 2E 37 2D 31 38 38 2E 33 32 29 00  # "main (bloom-test.c0: 188.7-188.32)"
64 61 62 00  # "dab"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 38 39 2E 37 2D 31 38 39 2E 33 31 29 00  # "main (bloom-test.c0: 189.7-189.31)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 30 2E 33 2D 31 39 30 2E 33 34 29 00  # "main (bloom-test.c0: 190.3-190.34)"
2D 2D 32 2E 34 20 00  # "--2.4 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 30 2E 33 2D 31 39 30 2E 33 34 29 00  # "main (bloom-test.c0: 190.3-190.34)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 30 2E 33 2D 31 39 30 2E 33 34 29 00  # "main (bloom-test.c0: 190.3-190.34)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 30 2E 33 2D 31 39 30 2E 33 34 29 00  # "main (bloom-test.c0: 190.3-190.34)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 30 2E 33 2D 31 39 30 2E 33 34 29 00  # "main (bloom-test.c0: 190.3-190.34)"
20 65 00  # " e"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 31 2E 37 2D 31 39 31 2E 33 31 29 00  # "main (bloom-test.c0: 191.7-191.31)"
20 00  # " "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 32 2E 37 2D 31 39 32 2E 32 39 29 00  # "main (bloom-test.c0: 192.7-192.29)"
20 20 20 00  # "   "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 33 2E 37 2D 31 39 33 2E 33 31 29 00  # "main (bloom-test.c0: 193.7-193.31)"
7E 20 00  # "~ "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 35 2E 37 2D 31 39 35 2E 33 30 29 00  # "main (bloom-test.c0: 195.7-195.30)"
5E 25 23 24 5E 31 38 37 35 36 31 26 54 47 32 36 42 46 20 53 41 4F 55 46 73 66 44 54 41 2A 00  # "^%#$^187561&TG26BF SAOUFsfDTA*"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 36 2E 37 2D 31 39 36 2E 35 38 29 00  # "main (bloom-test.c0: 196.7-196.58)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 37 2E 33 2D 31 39 37 2E 33 34 29 00  # "main (bloom-test.c0: 197.3-197.34)"
2D 2D 32 2E 35 20 00  # "--2.5 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 37 2E 33 2D 31 39 37 2E 33 34 29 00  # "main (bloom-test.c0: 197.3-197.34)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 37 2E 33 2D 31 39 37 2E 33 34 29 00  # "main (bloom-test.c0: 197.3-197.34)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 37 2E 33 2D 31 39 37 2E 33 34 29 00  # "main (bloom-test.c0: 197.3-197.34)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 37 2E 33 2D 31 39 37 2E 33 34 29 00  # "main (bloom-test.c0: 197.3-197.34)"
38 37 34 35 36 30 34 31 00  # "87456041"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 31 39 38 2E 37 2D 31 39 38 2E 33 36 29 00  # "main (bloom-test.c0: 198.7-198.36)"
21 3F 00  # "!\?"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 31 2E 37 2D 32 30 31 2E 33 30 29 00  # "main (bloom-test.c0: 201.7-201.30)"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 32 2E 32 36 2D 32 30 32 2E 34 37 29 00  # "main (bloom-test.c0: 202.26-202.47)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 32 2E 37 2D 32 30 32 2E 34 38 29 00  # "main (bloom-test.c0: 202.7-202.48)"
61 61 61 00  # "aaa"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 33 2E 32 36 2D 32 30 33 2E 34 37 29 00  # "main (bloom-test.c0: 203.26-203.47)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 33 2E 37 2D 32 30 33 2E 34 38 29 00  # "main (bloom-test.c0: 203.7-203.48)"
20 00  # " "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 34 2E 37 2D 32 30 34 2E 33 30 29 00  # "main (bloom-test.c0: 204.7-204.30)"
20 00  # " "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 30 35 2E 37 2D 32 30 35 2E 33 30 29 00  # "main (bloom-test.c0: 205.7-205.30)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 31 30 2E 33 2D 32 31 30 2E 33 32 29 00  # "main (bloom-test.c0: 210.3-210.32)"
2D 2D 33 20 00  # "--3 "
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 31 30 2E 33 2D 32 31 30 2E 33 32 29 00  # "main (bloom-test.c0: 210.3-210.32)"
00  # ""
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 31 30 2E 33 2D 32 31 30 2E 33 32 29 00  # "main (bloom-test.c0: 210.3-210.32)"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 31 30 2E 33 2D 32 31 30 2E 33 32 29 00  # "main (bloom-test.c0: 210.3-210.32)"
0A 00  # "\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 31 30 2E 33 2D 32 31 30 2E 33 32 29 00  # "main (bloom-test.c0: 210.3-210.32)"
52 65 74 75 72 6E 69 6E 67 20 74 68 65 20 70 65 72 66 6F 72 6D 61 6E 63 65 20 73 63 6F 72 65 2E 0A 00  # "Returning the performance score.\n"
6D 61 69 6E 20 28 62 6C 6F 6F 6D 2D 74 65 73 74 2E 63 30 3A 20 32 31 34 2E 33 2D 32 31 34 2E 34 37 29 00  # "main (bloom-test.c0: 214.3-214.47)"

00 37             # function count
# function_pool

#<main>
00                # number of arguments = 0
0A                # number of local variables = 10
0D 3B             # code length = 3387 bytes
14 20 EE # aldc 8430          # s[8430] = "(program start)"
36 00    # vstore 0           # _caller = "(program start)";
10 2A    # bipush 42          # 42
14 20 FE # aldc 8446          # s[8446] = "main (bloom-test.c0: 16.15-16.28)"
B8 00 14 # invokestatic 20    # bloom_new__1(42, "main (bloom-test.c0: 16.15-16.28)")
36 02    # vstore 2           # B = bloom_new__1(42, "main (bloom-test.c0: 16.15-16.28)");
15 02    # vload 2            # B
14 21 20 # aldc 8480          # s[8480] = "a"
14 21 22 # aldc 8482          # s[8482] = "main (bloom-test.c0: 17.3-17.19)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "a", "main (bloom-test.c0: 17.3-17.19)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 21 43 # aldc 8515          # s[8515] = "a"
14 21 45 # aldc 8517          # s[8517] = "main (bloom-test.c0: 18.10-18.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "a", "main (bloom-test.c0: 18.10-18.31)")
14 21 67 # aldc 8551          # s[8551] = "bloom-test.c0: 18.3-18.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "a", "main (bloom-test.c0: 18.10-18.31)") [failure message on stack]
15 02    # vload 2            # B
14 21 90 # aldc 8592          # s[8592] = "bb"
14 21 93 # aldc 8595          # s[8595] = "main (bloom-test.c0: 19.3-19.20)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "bb", "main (bloom-test.c0: 19.3-19.20)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 21 B4 # aldc 8628          # s[8628] = "bb"
14 21 B7 # aldc 8631          # s[8631] = "main (bloom-test.c0: 20.10-20.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "bb", "main (bloom-test.c0: 20.10-20.32)")
14 21 D9 # aldc 8665          # s[8665] = "bloom-test.c0: 20.3-20.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "bb", "main (bloom-test.c0: 20.10-20.32)") [failure message on stack]
15 02    # vload 2            # B
14 22 02 # aldc 8706          # s[8706] = "ccc"
14 22 06 # aldc 8710          # s[8710] = "main (bloom-test.c0: 21.3-21.21)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ccc", "main (bloom-test.c0: 21.3-21.21)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 22 27 # aldc 8743          # s[8743] = "ccc"
14 22 2B # aldc 8747          # s[8747] = "main (bloom-test.c0: 22.10-22.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "ccc", "main (bloom-test.c0: 22.10-22.33)")
14 22 4D # aldc 8781          # s[8781] = "bloom-test.c0: 22.3-22.35: assert failed"
CF       # assert             # assert bloom_contains__1(B, "ccc", "main (bloom-test.c0: 22.10-22.33)") [failure message on stack]
15 02    # vload 2            # B
14 22 76 # aldc 8822          # s[8822] = "dabd"
14 22 7B # aldc 8827          # s[8827] = "main (bloom-test.c0: 23.3-23.22)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "dabd", "main (bloom-test.c0: 23.3-23.22)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 22 9C # aldc 8860          # s[8860] = "dabd"
14 22 A1 # aldc 8865          # s[8865] = "main (bloom-test.c0: 24.10-24.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "dabd", "main (bloom-test.c0: 24.10-24.34)")
14 22 C3 # aldc 8899          # s[8899] = "bloom-test.c0: 24.3-24.36: assert failed"
CF       # assert             # assert bloom_contains__1(B, "dabd", "main (bloom-test.c0: 24.10-24.34)") [failure message on stack]
15 02    # vload 2            # B
14 22 EC # aldc 8940          # s[8940] = "e "
14 22 EF # aldc 8943          # s[8943] = "main (bloom-test.c0: 25.3-25.20)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "e ", "main (bloom-test.c0: 25.3-25.20)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 23 10 # aldc 8976          # s[8976] = "e "
14 23 13 # aldc 8979          # s[8979] = "main (bloom-test.c0: 26.10-26.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "e ", "main (bloom-test.c0: 26.10-26.32)")
14 23 35 # aldc 9013          # s[9013] = "bloom-test.c0: 26.3-26.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "e ", "main (bloom-test.c0: 26.10-26.32)") [failure message on stack]
15 02    # vload 2            # B
14 23 5E # aldc 9054          # s[9054] = "  "
14 23 61 # aldc 9057          # s[9057] = "main (bloom-test.c0: 27.3-27.20)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "  ", "main (bloom-test.c0: 27.3-27.20)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 23 82 # aldc 9090          # s[9090] = "ccc"
14 23 86 # aldc 9094          # s[9094] = "main (bloom-test.c0: 28.10-28.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "ccc", "main (bloom-test.c0: 28.10-28.33)")
14 23 A8 # aldc 9128          # s[9128] = "bloom-test.c0: 28.3-28.35: assert failed"
CF       # assert             # assert bloom_contains__1(B, "ccc", "main (bloom-test.c0: 28.10-28.33)") [failure message on stack]
15 02    # vload 2            # B
14 23 D1 # aldc 9169          # s[9169] = "dabd"
14 23 D6 # aldc 9174          # s[9174] = "main (bloom-test.c0: 29.10-29.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "dabd", "main (bloom-test.c0: 29.10-29.34)")
14 23 F8 # aldc 9208          # s[9208] = "bloom-test.c0: 29.3-29.36: assert failed"
CF       # assert             # assert bloom_contains__1(B, "dabd", "main (bloom-test.c0: 29.10-29.34)") [failure message on stack]
15 02    # vload 2            # B
14 24 21 # aldc 9249          # s[9249] = "e "
14 24 24 # aldc 9252          # s[9252] = "main (bloom-test.c0: 30.10-30.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "e ", "main (bloom-test.c0: 30.10-30.32)")
14 24 46 # aldc 9286          # s[9286] = "bloom-test.c0: 30.3-30.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "e ", "main (bloom-test.c0: 30.10-30.32)") [failure message on stack]
15 02    # vload 2            # B
14 24 6F # aldc 9327          # s[9327] = "  "
14 24 72 # aldc 9330          # s[9330] = "main (bloom-test.c0: 31.10-31.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "  ", "main (bloom-test.c0: 31.10-31.32)")
14 24 94 # aldc 9364          # s[9364] = "bloom-test.c0: 31.3-31.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "  ", "main (bloom-test.c0: 31.10-31.32)") [failure message on stack]
15 02    # vload 2            # B
14 24 BD # aldc 9405          # s[9405] = "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
14 24 EA # aldc 9450          # s[9450] = "main (bloom-test.c0: 32.3-32.62)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 32.3-32.62)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 25 0B # aldc 9483          # s[9483] = "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
14 25 38 # aldc 9528          # s[9528] = "main (bloom-test.c0: 33.10-33.75)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 33.10-33.75)")
14 25 5A # aldc 9562          # s[9562] = "bloom-test.c0: 33.3-33.77: assert failed"
CF       # assert             # assert bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 33.10-33.75)") [failure message on stack]
15 02    # vload 2            # B
14 25 83 # aldc 9603          # s[9603] = "18434871"
14 25 8C # aldc 9612          # s[9612] = "main (bloom-test.c0: 34.3-34.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "18434871", "main (bloom-test.c0: 34.3-34.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 25 AD # aldc 9645          # s[9645] = "18434871"
14 25 B6 # aldc 9654          # s[9654] = "main (bloom-test.c0: 35.10-35.39)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "18434871", "main (bloom-test.c0: 35.10-35.39)")
14 25 D8 # aldc 9688          # s[9688] = "bloom-test.c0: 35.3-35.41: assert failed"
CF       # assert             # assert bloom_contains__1(B, "18434871", "main (bloom-test.c0: 35.10-35.39)") [failure message on stack]
15 02    # vload 2            # B
14 26 01 # aldc 9729          # s[9729] = "\?"
14 26 03 # aldc 9731          # s[9731] = "main (bloom-test.c0: 36.3-36.20)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "\?", "main (bloom-test.c0: 36.3-36.20)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 26 24 # aldc 9764          # s[9764] = "\?"
14 26 26 # aldc 9766          # s[9766] = "main (bloom-test.c0: 37.10-37.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "\?", "main (bloom-test.c0: 37.10-37.31)")
14 26 48 # aldc 9800          # s[9800] = "bloom-test.c0: 37.3-37.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "\?", "main (bloom-test.c0: 37.10-37.31)") [failure message on stack]
15 02    # vload 2            # B
14 26 71 # aldc 9841          # s[9841] = "G"
14 26 73 # aldc 9843          # s[9843] = "main (bloom-test.c0: 38.3-38.20)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "G", "main (bloom-test.c0: 38.3-38.20)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 26 94 # aldc 9876          # s[9876] = "G"
14 26 96 # aldc 9878          # s[9878] = "main (bloom-test.c0: 39.10-39.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "G", "main (bloom-test.c0: 39.10-39.31)")
14 26 B8 # aldc 9912          # s[9912] = "bloom-test.c0: 39.3-39.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "G", "main (bloom-test.c0: 39.10-39.31)") [failure message on stack]
15 02    # vload 2            # B
14 26 E1 # aldc 9953          # s[9953] = "  "
14 26 E4 # aldc 9956          # s[9956] = "main (bloom-test.c0: 40.10-40.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "  ", "main (bloom-test.c0: 40.10-40.32)")
14 27 06 # aldc 9990          # s[9990] = "bloom-test.c0: 40.3-40.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "  ", "main (bloom-test.c0: 40.10-40.32)") [failure message on stack]
15 02    # vload 2            # B
14 27 2F # aldc 10031         # s[10031] = "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
14 27 5C # aldc 10076         # s[10076] = "main (bloom-test.c0: 41.10-41.75)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 41.10-41.75)")
14 27 7E # aldc 10110         # s[10110] = "bloom-test.c0: 41.3-41.77: assert failed"
CF       # assert             # assert bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 41.10-41.75)") [failure message on stack]
15 02    # vload 2            # B
14 27 A7 # aldc 10151         # s[10151] = "18434871"
14 27 B0 # aldc 10160         # s[10160] = "main (bloom-test.c0: 42.10-42.39)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "18434871", "main (bloom-test.c0: 42.10-42.39)")
14 27 D2 # aldc 10194         # s[10194] = "bloom-test.c0: 42.3-42.41: assert failed"
CF       # assert             # assert bloom_contains__1(B, "18434871", "main (bloom-test.c0: 42.10-42.39)") [failure message on stack]
15 02    # vload 2            # B
14 27 FB # aldc 10235         # s[10235] = "\?"
14 27 FD # aldc 10237         # s[10237] = "main (bloom-test.c0: 43.10-43.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "\?", "main (bloom-test.c0: 43.10-43.31)")
14 28 1F # aldc 10271         # s[10271] = "bloom-test.c0: 43.3-43.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "\?", "main (bloom-test.c0: 43.10-43.31)") [failure message on stack]
15 02    # vload 2            # B
14 28 48 # aldc 10312         # s[10312] = "dabd"
14 28 4D # aldc 10317         # s[10317] = "main (bloom-test.c0: 44.3-44.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "dabd", "main (bloom-test.c0: 44.3-44.23)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 28 6E # aldc 10350         # s[10350] = "dabd"
14 28 73 # aldc 10355         # s[10355] = "main (bloom-test.c0: 45.10-45.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "dabd", "main (bloom-test.c0: 45.10-45.34)")
14 28 95 # aldc 10389         # s[10389] = "bloom-test.c0: 45.3-45.36: assert failed"
CF       # assert             # assert bloom_contains__1(B, "dabd", "main (bloom-test.c0: 45.10-45.34)") [failure message on stack]
15 02    # vload 2            # B
14 28 BE # aldc 10430         # s[10430] = "a"
14 28 C0 # aldc 10432         # s[10432] = "main (bloom-test.c0: 46.3-46.20)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "a", "main (bloom-test.c0: 46.3-46.20)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 28 E1 # aldc 10465         # s[10465] = "a"
14 28 E3 # aldc 10467         # s[10467] = "main (bloom-test.c0: 47.10-47.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "a", "main (bloom-test.c0: 47.10-47.31)")
14 29 05 # aldc 10501         # s[10501] = "bloom-test.c0: 47.3-47.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "a", "main (bloom-test.c0: 47.10-47.31)") [failure message on stack]
15 02    # vload 2            # B
14 29 2E # aldc 10542         # s[10542] = "aaa"
14 29 32 # aldc 10546         # s[10546] = "main (bloom-test.c0: 48.3-48.22)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "aaa", "main (bloom-test.c0: 48.3-48.22)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 29 53 # aldc 10579         # s[10579] = "aaa"
14 29 57 # aldc 10583         # s[10583] = "main (bloom-test.c0: 49.10-49.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "aaa", "main (bloom-test.c0: 49.10-49.33)")
14 29 79 # aldc 10617         # s[10617] = "bloom-test.c0: 49.3-49.35: assert failed"
CF       # assert             # assert bloom_contains__1(B, "aaa", "main (bloom-test.c0: 49.10-49.33)") [failure message on stack]
15 02    # vload 2            # B
14 29 A2 # aldc 10658         # s[10658] = "a"
14 29 A4 # aldc 10660         # s[10660] = "main (bloom-test.c0: 50.10-50.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "a", "main (bloom-test.c0: 50.10-50.31)")
14 29 C6 # aldc 10694         # s[10694] = "bloom-test.c0: 50.3-50.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "a", "main (bloom-test.c0: 50.10-50.31)") [failure message on stack]
15 02    # vload 2            # B
14 29 EF # aldc 10735         # s[10735] = "bb"
14 29 F2 # aldc 10738         # s[10738] = "main (bloom-test.c0: 51.10-51.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "bb", "main (bloom-test.c0: 51.10-51.32)")
14 2A 14 # aldc 10772         # s[10772] = "bloom-test.c0: 51.3-51.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "bb", "main (bloom-test.c0: 51.10-51.32)") [failure message on stack]
10 64    # bipush 100         # 100
36 03    # vstore 3           # score = 100;
15 02    # vload 2            # B
14 2A 3D # aldc 10813         # s[10813] = "aaa"
10 01    # bipush 1           # 1
10 01    # bipush 1           # 1
14 2A 41 # aldc 10817         # s[10817] = "main (bloom-test.c0: 53.25-53.46)"
B8 00 04 # invokestatic 4     # string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 53.25-53.46)")
14 2A 63 # aldc 10851         # s[10851] = "main (bloom-test.c0: 53.7-53.47)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 53.25-53.46)"), "main (bloom-test.c0: 53.7-53.47)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 53.25-53.46)"), "main (bloom-test.c0: 53.7-53.47)") == true) goto <265:then>
A7 00 0D # goto +13           # goto <266:else>
# <265:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <267:endif>
# <266:else>
# <267:endif>
15 02    # vload 2            # B
14 2A 84 # aldc 10884         # s[10884] = "aaa"
10 01    # bipush 1           # 1
10 01    # bipush 1           # 1
14 2A 88 # aldc 10888         # s[10888] = "main (bloom-test.c0: 54.16-54.37)"
B8 00 04 # invokestatic 4     # string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 54.16-54.37)")
14 2A AA # aldc 10922         # s[10922] = "main (bloom-test.c0: 54.3-54.38)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 54.16-54.37)"), "main (bloom-test.c0: 54.3-54.38)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2A CB # aldc 10955         # s[10955] = "  "
14 2A CE # aldc 10958         # s[10958] = "main (bloom-test.c0: 55.10-55.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "  ", "main (bloom-test.c0: 55.10-55.32)")
14 2A F0 # aldc 10992         # s[10992] = "bloom-test.c0: 55.3-55.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "  ", "main (bloom-test.c0: 55.10-55.32)") [failure message on stack]
15 02    # vload 2            # B
14 2B 19 # aldc 11033         # s[11033] = "aaa"
10 01    # bipush 1           # 1
10 01    # bipush 1           # 1
14 2B 1D # aldc 11037         # s[11037] = "main (bloom-test.c0: 56.27-56.48)"
B8 00 04 # invokestatic 4     # string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 56.27-56.48)")
14 2B 3F # aldc 11071         # s[11071] = "main (bloom-test.c0: 56.10-56.49)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 56.27-56.48)"), "main (bloom-test.c0: 56.10-56.49)")
14 2B 61 # aldc 11105         # s[11105] = "bloom-test.c0: 56.3-56.51: assert failed"
CF       # assert             # assert bloom_contains__1(B, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 56.27-56.48)"), "main (bloom-test.c0: 56.10-56.49)") [failure message on stack]
15 02    # vload 2            # B
14 2B 8A # aldc 11146         # s[11146] = "  "
14 2B 8D # aldc 11149         # s[11149] = "main (bloom-test.c0: 57.10-57.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "  ", "main (bloom-test.c0: 57.10-57.32)")
14 2B AF # aldc 11183         # s[11183] = "bloom-test.c0: 57.3-57.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "  ", "main (bloom-test.c0: 57.10-57.32)") [failure message on stack]
15 02    # vload 2            # B
14 2B D8 # aldc 11224         # s[11224] = "ccc"
14 2B DC # aldc 11228         # s[11228] = "main (bloom-test.c0: 58.10-58.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "ccc", "main (bloom-test.c0: 58.10-58.33)")
14 2B FE # aldc 11262         # s[11262] = "bloom-test.c0: 58.3-58.35: assert failed"
CF       # assert             # assert bloom_contains__1(B, "ccc", "main (bloom-test.c0: 58.10-58.33)") [failure message on stack]
15 02    # vload 2            # B
14 2C 27 # aldc 11303         # s[11303] = "dabd"
14 2C 2C # aldc 11308         # s[11308] = "main (bloom-test.c0: 59.10-59.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "dabd", "main (bloom-test.c0: 59.10-59.34)")
14 2C 4E # aldc 11342         # s[11342] = "bloom-test.c0: 59.3-59.36: assert failed"
CF       # assert             # assert bloom_contains__1(B, "dabd", "main (bloom-test.c0: 59.10-59.34)") [failure message on stack]
15 02    # vload 2            # B
14 2C 77 # aldc 11383         # s[11383] = "un"
14 2C 7A # aldc 11386         # s[11386] = "main (bloom-test.c0: 62.3-62.21)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "un", "main (bloom-test.c0: 62.3-62.21)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2C 9B # aldc 11419         # s[11419] = "deux"
14 2C A0 # aldc 11424         # s[11424] = "main (bloom-test.c0: 63.3-63.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "deux", "main (bloom-test.c0: 63.3-63.23)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2C C1 # aldc 11457         # s[11457] = "trois"
14 2C C7 # aldc 11463         # s[11463] = "main (bloom-test.c0: 64.3-64.24)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "trois", "main (bloom-test.c0: 64.3-64.24)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2C E8 # aldc 11496         # s[11496] = "quatre"
14 2C EF # aldc 11503         # s[11503] = "main (bloom-test.c0: 65.3-65.25)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "quatre", "main (bloom-test.c0: 65.3-65.25)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2D 10 # aldc 11536         # s[11536] = "cinq"
14 2D 15 # aldc 11541         # s[11541] = "main (bloom-test.c0: 66.3-66.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "cinq", "main (bloom-test.c0: 66.3-66.23)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2D 36 # aldc 11574         # s[11574] = "six"
14 2D 3A # aldc 11578         # s[11578] = "main (bloom-test.c0: 67.3-67.22)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "six", "main (bloom-test.c0: 67.3-67.22)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2D 5B # aldc 11611         # s[11611] = "sept"
14 2D 60 # aldc 11616         # s[11616] = "main (bloom-test.c0: 68.3-68.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "sept", "main (bloom-test.c0: 68.3-68.23)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2D 81 # aldc 11649         # s[11649] = "huit"
14 2D 86 # aldc 11654         # s[11654] = "main (bloom-test.c0: 69.3-69.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "huit", "main (bloom-test.c0: 69.3-69.23)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2D A7 # aldc 11687         # s[11687] = "neuf"
14 2D AC # aldc 11692         # s[11692] = "main (bloom-test.c0: 70.3-70.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "neuf", "main (bloom-test.c0: 70.3-70.23)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2D CD # aldc 11725         # s[11725] = "dix"
14 2D D1 # aldc 11729         # s[11729] = "main (bloom-test.c0: 71.3-71.22)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "dix", "main (bloom-test.c0: 71.3-71.22)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 2D F2 # aldc 11762         # s[11762] = "un"
14 2D F5 # aldc 11765         # s[11765] = "main (bloom-test.c0: 73.10-73.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "un", "main (bloom-test.c0: 73.10-73.33)")
14 2E 17 # aldc 11799         # s[11799] = "bloom-test.c0: 73.3-73.35: assert failed"
CF       # assert             # assert bloom_contains__1(B, "un", "main (bloom-test.c0: 73.10-73.33)") [failure message on stack]
15 02    # vload 2            # B
14 2E 40 # aldc 11840         # s[11840] = "deux"
14 2E 45 # aldc 11845         # s[11845] = "main (bloom-test.c0: 74.10-74.35)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "deux", "main (bloom-test.c0: 74.10-74.35)")
14 2E 67 # aldc 11879         # s[11879] = "bloom-test.c0: 74.3-74.37: assert failed"
CF       # assert             # assert bloom_contains__1(B, "deux", "main (bloom-test.c0: 74.10-74.35)") [failure message on stack]
15 02    # vload 2            # B
14 2E 90 # aldc 11920         # s[11920] = "trois"
14 2E 96 # aldc 11926         # s[11926] = "main (bloom-test.c0: 75.10-75.36)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "trois", "main (bloom-test.c0: 75.10-75.36)")
14 2E B8 # aldc 11960         # s[11960] = "bloom-test.c0: 75.3-75.38: assert failed"
CF       # assert             # assert bloom_contains__1(B, "trois", "main (bloom-test.c0: 75.10-75.36)") [failure message on stack]
15 02    # vload 2            # B
14 2E E1 # aldc 12001         # s[12001] = "quatre"
14 2E E8 # aldc 12008         # s[12008] = "main (bloom-test.c0: 76.10-76.37)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "quatre", "main (bloom-test.c0: 76.10-76.37)")
14 2F 0A # aldc 12042         # s[12042] = "bloom-test.c0: 76.3-76.39: assert failed"
CF       # assert             # assert bloom_contains__1(B, "quatre", "main (bloom-test.c0: 76.10-76.37)") [failure message on stack]
15 02    # vload 2            # B
14 2F 33 # aldc 12083         # s[12083] = "cinq"
14 2F 38 # aldc 12088         # s[12088] = "main (bloom-test.c0: 77.10-77.35)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "cinq", "main (bloom-test.c0: 77.10-77.35)")
14 2F 5A # aldc 12122         # s[12122] = "bloom-test.c0: 77.3-77.37: assert failed"
CF       # assert             # assert bloom_contains__1(B, "cinq", "main (bloom-test.c0: 77.10-77.35)") [failure message on stack]
15 02    # vload 2            # B
14 2F 83 # aldc 12163         # s[12163] = "six"
14 2F 87 # aldc 12167         # s[12167] = "main (bloom-test.c0: 78.10-78.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "six", "main (bloom-test.c0: 78.10-78.34)")
14 2F A9 # aldc 12201         # s[12201] = "bloom-test.c0: 78.3-78.36: assert failed"
CF       # assert             # assert bloom_contains__1(B, "six", "main (bloom-test.c0: 78.10-78.34)") [failure message on stack]
15 02    # vload 2            # B
14 2F D2 # aldc 12242         # s[12242] = "sept"
14 2F D7 # aldc 12247         # s[12247] = "main (bloom-test.c0: 79.10-79.35)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "sept", "main (bloom-test.c0: 79.10-79.35)")
14 2F F9 # aldc 12281         # s[12281] = "bloom-test.c0: 79.3-79.37: assert failed"
CF       # assert             # assert bloom_contains__1(B, "sept", "main (bloom-test.c0: 79.10-79.35)") [failure message on stack]
15 02    # vload 2            # B
14 30 22 # aldc 12322         # s[12322] = "huit"
14 30 27 # aldc 12327         # s[12327] = "main (bloom-test.c0: 80.10-80.35)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "huit", "main (bloom-test.c0: 80.10-80.35)")
14 30 49 # aldc 12361         # s[12361] = "bloom-test.c0: 80.3-80.37: assert failed"
CF       # assert             # assert bloom_contains__1(B, "huit", "main (bloom-test.c0: 80.10-80.35)") [failure message on stack]
15 02    # vload 2            # B
14 30 72 # aldc 12402         # s[12402] = "neuf"
14 30 77 # aldc 12407         # s[12407] = "main (bloom-test.c0: 81.10-81.35)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "neuf", "main (bloom-test.c0: 81.10-81.35)")
14 30 99 # aldc 12441         # s[12441] = "bloom-test.c0: 81.3-81.37: assert failed"
CF       # assert             # assert bloom_contains__1(B, "neuf", "main (bloom-test.c0: 81.10-81.35)") [failure message on stack]
15 02    # vload 2            # B
14 30 C2 # aldc 12482         # s[12482] = "dix"
14 30 C6 # aldc 12486         # s[12486] = "main (bloom-test.c0: 82.10-82.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "dix", "main (bloom-test.c0: 82.10-82.34)")
14 30 E8 # aldc 12520         # s[12520] = "bloom-test.c0: 82.3-82.36: assert failed"
CF       # assert             # assert bloom_contains__1(B, "dix", "main (bloom-test.c0: 82.10-82.34)") [failure message on stack]
15 02    # vload 2            # B
14 31 11 # aldc 12561         # s[12561] = "aaa"
14 31 15 # aldc 12565         # s[12565] = "main (bloom-test.c0: 84.10-84.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "aaa", "main (bloom-test.c0: 84.10-84.33)")
14 31 37 # aldc 12599         # s[12599] = "bloom-test.c0: 84.3-84.35: assert failed"
CF       # assert             # assert bloom_contains__1(B, "aaa", "main (bloom-test.c0: 84.10-84.33)") [failure message on stack]
15 02    # vload 2            # B
14 31 60 # aldc 12640         # s[12640] = "a"
14 31 62 # aldc 12642         # s[12642] = "main (bloom-test.c0: 85.10-85.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "a", "main (bloom-test.c0: 85.10-85.31)")
14 31 84 # aldc 12676         # s[12676] = "bloom-test.c0: 85.3-85.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "a", "main (bloom-test.c0: 85.10-85.31)") [failure message on stack]
15 02    # vload 2            # B
14 31 AD # aldc 12717         # s[12717] = "bb"
14 31 B0 # aldc 12720         # s[12720] = "main (bloom-test.c0: 86.10-86.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "bb", "main (bloom-test.c0: 86.10-86.32)")
14 31 D2 # aldc 12754         # s[12754] = "bloom-test.c0: 86.3-86.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "bb", "main (bloom-test.c0: 86.10-86.32)") [failure message on stack]
15 02    # vload 2            # B
14 31 FB # aldc 12795         # s[12795] = "ccc"
14 31 FF # aldc 12799         # s[12799] = "main (bloom-test.c0: 87.10-87.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "ccc", "main (bloom-test.c0: 87.10-87.33)")
14 32 21 # aldc 12833         # s[12833] = "bloom-test.c0: 87.3-87.35: assert failed"
CF       # assert             # assert bloom_contains__1(B, "ccc", "main (bloom-test.c0: 87.10-87.33)") [failure message on stack]
15 02    # vload 2            # B
14 32 4A # aldc 12874         # s[12874] = "dabd"
14 32 4F # aldc 12879         # s[12879] = "main (bloom-test.c0: 88.10-88.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "dabd", "main (bloom-test.c0: 88.10-88.34)")
14 32 71 # aldc 12913         # s[12913] = "bloom-test.c0: 88.3-88.36: assert failed"
CF       # assert             # assert bloom_contains__1(B, "dabd", "main (bloom-test.c0: 88.10-88.34)") [failure message on stack]
15 02    # vload 2            # B
14 32 9A # aldc 12954         # s[12954] = "eleven"
14 32 A1 # aldc 12961         # s[12961] = "main (bloom-test.c0: 90.3-90.25)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "eleven", "main (bloom-test.c0: 90.3-90.25)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 32 C2 # aldc 12994         # s[12994] = "twelve"
14 32 C9 # aldc 13001         # s[13001] = "main (bloom-test.c0: 91.3-91.25)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "twelve", "main (bloom-test.c0: 91.3-91.25)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 32 EA # aldc 13034         # s[13034] = "thirteen"
14 32 F3 # aldc 13043         # s[13043] = "main (bloom-test.c0: 92.3-92.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "thirteen", "main (bloom-test.c0: 92.3-92.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 33 14 # aldc 13076         # s[13076] = "fourteen"
14 33 1D # aldc 13085         # s[13085] = "main (bloom-test.c0: 93.3-93.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "fourteen", "main (bloom-test.c0: 93.3-93.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 33 3E # aldc 13118         # s[13118] = "fifteen"
14 33 46 # aldc 13126         # s[13126] = "main (bloom-test.c0: 94.3-94.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "fifteen", "main (bloom-test.c0: 94.3-94.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 33 67 # aldc 13159         # s[13159] = "sixteen"
14 33 6F # aldc 13167         # s[13167] = "main (bloom-test.c0: 95.3-95.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "sixteen", "main (bloom-test.c0: 95.3-95.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 33 90 # aldc 13200         # s[13200] = "eighteen"
14 33 99 # aldc 13209         # s[13209] = "main (bloom-test.c0: 96.3-96.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "eighteen", "main (bloom-test.c0: 96.3-96.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 33 BA # aldc 13242         # s[13242] = "nineteen"
14 33 C3 # aldc 13251         # s[13251] = "main (bloom-test.c0: 97.3-97.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "nineteen", "main (bloom-test.c0: 97.3-97.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 33 E4 # aldc 13284         # s[13284] = "twenty"
14 33 EB # aldc 13291         # s[13291] = "main (bloom-test.c0: 98.3-98.25)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "twenty", "main (bloom-test.c0: 98.3-98.25)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 34 0C # aldc 13324         # s[13324] = "G"
14 34 0E # aldc 13326         # s[13326] = "main (bloom-test.c0: 100.10-100.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "G", "main (bloom-test.c0: 100.10-100.31)")
14 34 32 # aldc 13362         # s[13362] = "bloom-test.c0: 100.3-100.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "G", "main (bloom-test.c0: 100.10-100.31)") [failure message on stack]
15 02    # vload 2            # B
14 34 5D # aldc 13405         # s[13405] = "  "
14 34 60 # aldc 13408         # s[13408] = "main (bloom-test.c0: 101.10-101.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "  ", "main (bloom-test.c0: 101.10-101.32)")
14 34 84 # aldc 13444         # s[13444] = "bloom-test.c0: 101.3-101.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "  ", "main (bloom-test.c0: 101.10-101.32)") [failure message on stack]
15 02    # vload 2            # B
14 34 AF # aldc 13487         # s[13487] = "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
14 34 DC # aldc 13532         # s[13532] = "main (bloom-test.c0: 102.10-102.75)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 102.10-102.75)")
14 35 00 # aldc 13568         # s[13568] = "bloom-test.c0: 102.3-102.77: assert failed"
CF       # assert             # assert bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 102.10-102.75)") [failure message on stack]
15 02    # vload 2            # B
14 35 2B # aldc 13611         # s[13611] = "18434871"
14 35 34 # aldc 13620         # s[13620] = "main (bloom-test.c0: 103.10-103.39)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "18434871", "main (bloom-test.c0: 103.10-103.39)")
14 35 58 # aldc 13656         # s[13656] = "bloom-test.c0: 103.3-103.41: assert failed"
CF       # assert             # assert bloom_contains__1(B, "18434871", "main (bloom-test.c0: 103.10-103.39)") [failure message on stack]
15 02    # vload 2            # B
14 35 83 # aldc 13699         # s[13699] = "ershiyi"
14 35 8B # aldc 13707         # s[13707] = "main (bloom-test.c0: 105.3-105.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershiyi", "main (bloom-test.c0: 105.3-105.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 35 AE # aldc 13742         # s[13742] = "ershier"
14 35 B6 # aldc 13750         # s[13750] = "main (bloom-test.c0: 106.3-106.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershier", "main (bloom-test.c0: 106.3-106.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 35 D9 # aldc 13785         # s[13785] = "ershisan"
14 35 E2 # aldc 13794         # s[13794] = "main (bloom-test.c0: 107.3-107.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershisan", "main (bloom-test.c0: 107.3-107.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 36 05 # aldc 13829         # s[13829] = "ershisi"
14 36 0D # aldc 13837         # s[13837] = "main (bloom-test.c0: 108.3-108.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershisi", "main (bloom-test.c0: 108.3-108.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 36 30 # aldc 13872         # s[13872] = "ershiwu"
14 36 38 # aldc 13880         # s[13880] = "main (bloom-test.c0: 109.3-109.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershiwu", "main (bloom-test.c0: 109.3-109.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 36 5B # aldc 13915         # s[13915] = "ershiliu"
14 36 64 # aldc 13924         # s[13924] = "main (bloom-test.c0: 111.3-111.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershiliu", "main (bloom-test.c0: 111.3-111.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 36 87 # aldc 13959         # s[13959] = "ershiqi"
14 36 8F # aldc 13967         # s[13967] = "main (bloom-test.c0: 112.3-112.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershiqi", "main (bloom-test.c0: 112.3-112.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 36 B2 # aldc 14002         # s[14002] = "ershiba"
14 36 BA # aldc 14010         # s[14010] = "main (bloom-test.c0: 113.3-113.26)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershiba", "main (bloom-test.c0: 113.3-113.26)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 36 DD # aldc 14045         # s[14045] = "ershijiu"
14 36 E6 # aldc 14054         # s[14054] = "main (bloom-test.c0: 114.3-114.27)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "ershijiu", "main (bloom-test.c0: 114.3-114.27)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 37 09 # aldc 14089         # s[14089] = "sanshi"
14 37 10 # aldc 14096         # s[14096] = "main (bloom-test.c0: 115.3-115.25)"
B8 00 16 # invokestatic 22    # bloom_add__1(B, "sanshi", "main (bloom-test.c0: 115.3-115.25)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 37 33 # aldc 14131         # s[14131] = "e "
14 37 36 # aldc 14134         # s[14134] = "main (bloom-test.c0: 117.10-117.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "e ", "main (bloom-test.c0: 117.10-117.32)")
14 37 5A # aldc 14170         # s[14170] = "bloom-test.c0: 117.3-117.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "e ", "main (bloom-test.c0: 117.10-117.32)") [failure message on stack]
15 02    # vload 2            # B
14 37 85 # aldc 14213         # s[14213] = "  "
14 37 88 # aldc 14216         # s[14216] = "main (bloom-test.c0: 118.10-118.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "  ", "main (bloom-test.c0: 118.10-118.32)")
14 37 AC # aldc 14252         # s[14252] = "bloom-test.c0: 118.3-118.34: assert failed"
CF       # assert             # assert bloom_contains__1(B, "  ", "main (bloom-test.c0: 118.10-118.32)") [failure message on stack]
15 02    # vload 2            # B
14 37 D7 # aldc 14295         # s[14295] = "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD"
14 38 04 # aldc 14340         # s[14340] = "main (bloom-test.c0: 119.10-119.75)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 119.10-119.75)")
14 38 28 # aldc 14376         # s[14376] = "bloom-test.c0: 119.3-119.77: assert failed"
CF       # assert             # assert bloom_contains__1(B, "AFDSH*sfssg*&^%^&*)(&^)AKU  H8y59284720LKSJD", "main (bloom-test.c0: 119.10-119.75)") [failure message on stack]
15 02    # vload 2            # B
14 38 53 # aldc 14419         # s[14419] = "18434871"
14 38 5C # aldc 14428         # s[14428] = "main (bloom-test.c0: 120.10-120.39)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "18434871", "main (bloom-test.c0: 120.10-120.39)")
14 38 80 # aldc 14464         # s[14464] = "bloom-test.c0: 120.3-120.41: assert failed"
CF       # assert             # assert bloom_contains__1(B, "18434871", "main (bloom-test.c0: 120.10-120.39)") [failure message on stack]
15 02    # vload 2            # B
14 38 AB # aldc 14507         # s[14507] = "\?"
14 38 AD # aldc 14509         # s[14509] = "main (bloom-test.c0: 121.10-121.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "\?", "main (bloom-test.c0: 121.10-121.31)")
14 38 D1 # aldc 14545         # s[14545] = "bloom-test.c0: 121.3-121.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "\?", "main (bloom-test.c0: 121.10-121.31)") [failure message on stack]
15 02    # vload 2            # B
14 38 FC # aldc 14588         # s[14588] = "G"
14 38 FE # aldc 14590         # s[14590] = "main (bloom-test.c0: 123.10-123.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "G", "main (bloom-test.c0: 123.10-123.31)")
14 39 22 # aldc 14626         # s[14626] = "bloom-test.c0: 123.3-123.33: assert failed"
CF       # assert             # assert bloom_contains__1(B, "G", "main (bloom-test.c0: 123.10-123.31)") [failure message on stack]
14 39 4D # aldc 14669         # s[14669] = "main (bloom-test.c0: 126.26-126.35)"
B8 00 1E # invokestatic 30    # int_max__1("main (bloom-test.c0: 126.26-126.35)")
10 10    # bipush 16          # 16
6C       # idiv               # (int_max__1("main (bloom-test.c0: 126.26-126.35)") / 16)
14 39 71 # aldc 14705         # s[14705] = "main (bloom-test.c0: 126.16-126.39)"
B8 00 14 # invokestatic 20    # bloom_new__1((int_max__1("main (bloom-test.c0: 126.26-126.35)") / 16), "main (bloom-test.c0: 126.16-126.39)")
36 04    # vstore 4           # B2 = bloom_new__1((int_max__1("main (bloom-test.c0: 126.26-126.35)") / 16), "main (bloom-test.c0: 126.16-126.39)");
10 01    # bipush 1           # 1
14 39 95 # aldc 14741         # s[14741] = "main (bloom-test.c0: 127.16-127.28)"
B8 00 14 # invokestatic 20    # bloom_new__1(1, "main (bloom-test.c0: 127.16-127.28)")
36 05    # vstore 5           # B3 = bloom_new__1(1, "main (bloom-test.c0: 127.16-127.28)");
10 21    # bipush 33          # 33
36 06    # vstore 6           # num = 33;
# <268:loop>
A7 00 03 # goto +3            # goto <269:body>
# <269:body>
15 06    # vload 6            # num
10 53    # bipush 83          # 83
A1 00 06 # if_icmplt +6       # if (num < 83) goto <271:then>
A7 01 13 # goto +275          # goto <272:else>
# <271:then>
15 06    # vload 6            # num
14 39 B9 # aldc 14777         # s[14777] = "main (bloom-test.c0: 131.35-131.48)"
B8 00 0F # invokestatic 15    # char_chr__1(num, "main (bloom-test.c0: 131.35-131.48)")
14 39 DD # aldc 14813         # s[14813] = "main (bloom-test.c0: 131.19-131.49)"
B8 00 09 # invokestatic 9     # string_fromchar__1(char_chr__1(num, "main (bloom-test.c0: 131.35-131.48)"), "main (bloom-test.c0: 131.19-131.49)")
36 07    # vstore 7           # str1 = string_fromchar__1(char_chr__1(num, "main (bloom-test.c0: 131.35-131.48)"), "main (bloom-test.c0: 131.19-131.49)");
15 06    # vload 6            # num
10 02    # bipush 2           # 2
60       # iadd               # (num + 2)
14 3A 01 # aldc 14849         # s[14849] = "main (bloom-test.c0: 132.35-132.50)"
B8 00 0F # invokestatic 15    # char_chr__1((num + 2), "main (bloom-test.c0: 132.35-132.50)")
14 3A 25 # aldc 14885         # s[14885] = "main (bloom-test.c0: 132.19-132.51)"
B8 00 09 # invokestatic 9     # string_fromchar__1(char_chr__1((num + 2), "main (bloom-test.c0: 132.35-132.50)"), "main (bloom-test.c0: 132.19-132.51)")
36 08    # vstore 8           # str2 = string_fromchar__1(char_chr__1((num + 2), "main (bloom-test.c0: 132.35-132.50)"), "main (bloom-test.c0: 132.19-132.51)");
15 07    # vload 7            # str1
15 08    # vload 8            # str2
14 3A 49 # aldc 14921         # s[14921] = "main (bloom-test.c0: 133.18-133.41)"
B8 00 03 # invokestatic 3     # string_join__1(str1, str2, "main (bloom-test.c0: 133.18-133.41)")
36 09    # vstore 9           # str = string_join__1(str1, str2, "main (bloom-test.c0: 133.18-133.41)");
15 04    # vload 4            # B2
15 09    # vload 9            # str
14 3A 6D # aldc 14957         # s[14957] = "main (bloom-test.c0: 134.5-134.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B2, str, "main (bloom-test.c0: 134.5-134.23)")
57       # pop                # (ignore result)
15 04    # vload 4            # B2
15 09    # vload 9            # str
14 3A 90 # aldc 14992         # s[14992] = "main (bloom-test.c0: 135.12-135.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, str, "main (bloom-test.c0: 135.12-135.34)")
14 3A B4 # aldc 15028         # s[15028] = "bloom-test.c0: 135.5-135.36: assert failed"
CF       # assert             # assert bloom_contains__1(B2, str, "main (bloom-test.c0: 135.12-135.34)") [failure message on stack]
15 05    # vload 5            # B3
15 09    # vload 9            # str
14 3A DF # aldc 15071         # s[15071] = "main (bloom-test.c0: 136.5-136.23)"
B8 00 16 # invokestatic 22    # bloom_add__1(B3, str, "main (bloom-test.c0: 136.5-136.23)")
57       # pop                # (ignore result)
15 05    # vload 5            # B3
15 09    # vload 9            # str
14 3B 02 # aldc 15106         # s[15106] = "main (bloom-test.c0: 137.12-137.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B3, str, "main (bloom-test.c0: 137.12-137.34)")
14 3B 26 # aldc 15142         # s[15142] = "bloom-test.c0: 137.5-137.36: assert failed"
CF       # assert             # assert bloom_contains__1(B3, str, "main (bloom-test.c0: 137.12-137.34)") [failure message on stack]
15 04    # vload 4            # B2
15 08    # vload 8            # str2
15 07    # vload 7            # str1
14 3B 51 # aldc 15185         # s[15185] = "main (bloom-test.c0: 138.28-138.51)"
B8 00 03 # invokestatic 3     # string_join__1(str2, str1, "main (bloom-test.c0: 138.28-138.51)")
14 3B 75 # aldc 15221         # s[15221] = "main (bloom-test.c0: 138.9-138.52)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, string_join__1(str2, str1, "main (bloom-test.c0: 138.28-138.51)"), "main (bloom-test.c0: 138.9-138.52)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B2, string_join__1(str2, str1, "main (bloom-test.c0: 138.28-138.51)"), "main (bloom-test.c0: 138.9-138.52)") == true) goto <274:then>
A7 00 0D # goto +13           # goto <275:else>
# <274:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <276:endif>
# <275:else>
# <276:endif>
15 04    # vload 4            # B2
15 07    # vload 7            # str1
14 3B 98 # aldc 15256         # s[15256] = "main (bloom-test.c0: 139.9-139.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, str1, "main (bloom-test.c0: 139.9-139.33)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B2, str1, "main (bloom-test.c0: 139.9-139.33)") == true) goto <277:then>
A7 00 0D # goto +13           # goto <278:else>
# <277:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <279:endif>
# <278:else>
# <279:endif>
15 04    # vload 4            # B2
15 09    # vload 9            # str
14 3B BB # aldc 15291         # s[15291] = " "
14 3B BD # aldc 15293         # s[15293] = "main (bloom-test.c0: 140.28-140.49)"
B8 00 03 # invokestatic 3     # string_join__1(str, " ", "main (bloom-test.c0: 140.28-140.49)")
14 3B E1 # aldc 15329         # s[15329] = "main (bloom-test.c0: 140.9-140.50)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, string_join__1(str, " ", "main (bloom-test.c0: 140.28-140.49)"), "main (bloom-test.c0: 140.9-140.50)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B2, string_join__1(str, " ", "main (bloom-test.c0: 140.28-140.49)"), "main (bloom-test.c0: 140.9-140.50)") == true) goto <280:then>
A7 00 0D # goto +13           # goto <281:else>
# <280:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <282:endif>
# <281:else>
# <282:endif>
15 05    # vload 5            # B3
15 08    # vload 8            # str2
15 07    # vload 7            # str1
14 3C 04 # aldc 15364         # s[15364] = "main (bloom-test.c0: 141.28-141.51)"
B8 00 03 # invokestatic 3     # string_join__1(str2, str1, "main (bloom-test.c0: 141.28-141.51)")
14 3C 28 # aldc 15400         # s[15400] = "main (bloom-test.c0: 141.9-141.52)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B3, string_join__1(str2, str1, "main (bloom-test.c0: 141.28-141.51)"), "main (bloom-test.c0: 141.9-141.52)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B3, string_join__1(str2, str1, "main (bloom-test.c0: 141.28-141.51)"), "main (bloom-test.c0: 141.9-141.52)") == true) goto <283:then>
A7 00 0D # goto +13           # goto <284:else>
# <283:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <285:endif>
# <284:else>
# <285:endif>
15 05    # vload 5            # B3
15 07    # vload 7            # str1
14 3C 4B # aldc 15435         # s[15435] = "main (bloom-test.c0: 142.9-142.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B3, str1, "main (bloom-test.c0: 142.9-142.33)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B3, str1, "main (bloom-test.c0: 142.9-142.33)") == true) goto <286:then>
A7 00 0D # goto +13           # goto <287:else>
# <286:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <288:endif>
# <287:else>
# <288:endif>
15 06    # vload 6            # num
10 05    # bipush 5           # 5
60       # iadd               # (num + 5)
36 06    # vstore 6           # num = (num + 5);
A7 00 06 # goto +6            # goto <273:endif>
# <272:else>
A7 00 06 # goto +6            # break
# <273:endif>
A7 FE E0 # goto -288          # goto <268:loop>
# <270:exit>
14 3C 6E # aldc 15470         # s[15470] = "All correctness tests passed!\n\n"
14 3C 8E # aldc 15502         # s[15502] = "main (bloom-test.c0: 144.3-144.46)"
B8 00 29 # invokestatic 41    # print__1("All correctness tests passed!\n\n", "main (bloom-test.c0: 144.3-144.46)")
57       # pop                # (ignore result)
14 3C B1 # aldc 15537         # s[15537] = ""
14 3C B2 # aldc 15538         # s[15538] = "main (bloom-test.c0: 145.3-145.32)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 145.3-145.32)")
57       # pop                # (ignore result)
14 3C D5 # aldc 15573         # s[15573] = "--1 "
14 3C DA # aldc 15578         # s[15578] = "main (bloom-test.c0: 145.3-145.32)"
B8 00 29 # invokestatic 41    # print__1("--1 ", "main (bloom-test.c0: 145.3-145.32)")
57       # pop                # (ignore result)
14 3C FD # aldc 15613         # s[15613] = ""
14 3C FE # aldc 15614         # s[15614] = "main (bloom-test.c0: 145.3-145.32)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 145.3-145.32)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 3D 21 # aldc 15649         # s[15649] = "main (bloom-test.c0: 145.3-145.32)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 145.3-145.32)")
57       # pop                # (ignore result)
14 3D 44 # aldc 15684         # s[15684] = "\n"
14 3D 46 # aldc 15686         # s[15686] = "main (bloom-test.c0: 145.3-145.32)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 145.3-145.32)")
57       # pop                # (ignore result)
10 00    # bipush 0           # 0
36 06    # vstore 6           # i = 0;
10 66    # bipush 102         # 102
36 07    # vstore 7           # num = 102;
# <289:loop>
A7 00 03 # goto +3            # goto <290:body>
# <290:body>
15 07    # vload 7            # num
10 68    # bipush 104         # 104
A4 00 06 # if_icmple +6       # if (num <= 104) goto <292:then>
A7 01 38 # goto +312          # goto <293:else>
# <292:then>
15 06    # vload 6            # i
10 05    # bipush 5           # 5
70       # irem               # (i % 5)
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if ((i % 5) == 0) goto <295:then>
A7 00 37 # goto +55           # goto <296:else>
# <295:then>
14 3D 69 # aldc 15721         # s[15721] = ""
14 3D 6A # aldc 15722         # s[15722] = "main (bloom-test.c0: 152.17-152.48)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 152.17-152.48)")
57       # pop                # (ignore result)
14 3D 8E # aldc 15758         # s[15758] = "--1.5 "
14 3D 95 # aldc 15765         # s[15765] = "main (bloom-test.c0: 152.17-152.48)"
B8 00 29 # invokestatic 41    # print__1("--1.5 ", "main (bloom-test.c0: 152.17-152.48)")
57       # pop                # (ignore result)
14 3D B9 # aldc 15801         # s[15801] = ""
14 3D BA # aldc 15802         # s[15802] = "main (bloom-test.c0: 152.17-152.48)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 152.17-152.48)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 3D DE # aldc 15838         # s[15838] = "main (bloom-test.c0: 152.17-152.48)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 152.17-152.48)")
57       # pop                # (ignore result)
14 3E 02 # aldc 15874         # s[15874] = "\n"
14 3E 04 # aldc 15876         # s[15876] = "main (bloom-test.c0: 152.17-152.48)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 152.17-152.48)")
57       # pop                # (ignore result)
A7 00 03 # goto +3            # goto <297:endif>
# <296:else>
# <297:endif>
15 07    # vload 7            # num
14 3E 28 # aldc 15912         # s[15912] = "main (bloom-test.c0: 153.35-153.48)"
B8 00 0F # invokestatic 15    # char_chr__1(num, "main (bloom-test.c0: 153.35-153.48)")
14 3E 4C # aldc 15948         # s[15948] = "main (bloom-test.c0: 153.19-153.49)"
B8 00 09 # invokestatic 9     # string_fromchar__1(char_chr__1(num, "main (bloom-test.c0: 153.35-153.48)"), "main (bloom-test.c0: 153.19-153.49)")
36 08    # vstore 8           # str1 = string_fromchar__1(char_chr__1(num, "main (bloom-test.c0: 153.35-153.48)"), "main (bloom-test.c0: 153.19-153.49)");
15 02    # vload 2            # B
15 08    # vload 8            # str1
14 3E 70 # aldc 15984         # s[15984] = "main (bloom-test.c0: 154.9-154.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, str1, "main (bloom-test.c0: 154.9-154.32)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, str1, "main (bloom-test.c0: 154.9-154.32)") == true) goto <298:then>
A7 00 0D # goto +13           # goto <299:else>
# <298:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <300:endif>
# <299:else>
# <300:endif>
15 04    # vload 4            # B2
15 08    # vload 8            # str1
14 3E 93 # aldc 16019         # s[16019] = "main (bloom-test.c0: 155.9-155.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, str1, "main (bloom-test.c0: 155.9-155.33)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B2, str1, "main (bloom-test.c0: 155.9-155.33)") == true) goto <301:then>
A7 00 0D # goto +13           # goto <302:else>
# <301:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <303:endif>
# <302:else>
# <303:endif>
15 05    # vload 5            # B3
15 08    # vload 8            # str1
14 3E B6 # aldc 16054         # s[16054] = "main (bloom-test.c0: 156.9-156.33)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B3, str1, "main (bloom-test.c0: 156.9-156.33)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B3, str1, "main (bloom-test.c0: 156.9-156.33)") == true) goto <304:then>
A7 00 0D # goto +13           # goto <305:else>
# <304:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <306:endif>
# <305:else>
# <306:endif>
10 60    # bipush 96          # 96
15 06    # vload 6            # i
64       # isub               # (96 - i)
14 3E D9 # aldc 16089         # s[16089] = "main (bloom-test.c0: 157.35-157.51)"
B8 00 0F # invokestatic 15    # char_chr__1((96 - i), "main (bloom-test.c0: 157.35-157.51)")
14 3E FD # aldc 16125         # s[16125] = "main (bloom-test.c0: 157.19-157.52)"
B8 00 09 # invokestatic 9     # string_fromchar__1(char_chr__1((96 - i), "main (bloom-test.c0: 157.35-157.51)"), "main (bloom-test.c0: 157.19-157.52)")
36 09    # vstore 9           # str2 = string_fromchar__1(char_chr__1((96 - i), "main (bloom-test.c0: 157.35-157.51)"), "main (bloom-test.c0: 157.19-157.52)");
15 02    # vload 2            # B
15 08    # vload 8            # str1
15 09    # vload 9            # str2
14 3F 21 # aldc 16161         # s[16161] = "main (bloom-test.c0: 158.27-158.50)"
B8 00 03 # invokestatic 3     # string_join__1(str1, str2, "main (bloom-test.c0: 158.27-158.50)")
14 3F 45 # aldc 16197         # s[16197] = "main (bloom-test.c0: 158.9-158.51)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, string_join__1(str1, str2, "main (bloom-test.c0: 158.27-158.50)"), "main (bloom-test.c0: 158.9-158.51)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, string_join__1(str1, str2, "main (bloom-test.c0: 158.27-158.50)"), "main (bloom-test.c0: 158.9-158.51)") == true) goto <307:then>
A7 00 0D # goto +13           # goto <308:else>
# <307:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <309:endif>
# <308:else>
# <309:endif>
15 02    # vload 2            # B
15 09    # vload 9            # str2
15 08    # vload 8            # str1
14 3F 68 # aldc 16232         # s[16232] = "main (bloom-test.c0: 159.27-159.50)"
B8 00 03 # invokestatic 3     # string_join__1(str2, str1, "main (bloom-test.c0: 159.27-159.50)")
14 3F 8C # aldc 16268         # s[16268] = "main (bloom-test.c0: 159.9-159.51)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, string_join__1(str2, str1, "main (bloom-test.c0: 159.27-159.50)"), "main (bloom-test.c0: 159.9-159.51)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, string_join__1(str2, str1, "main (bloom-test.c0: 159.27-159.50)"), "main (bloom-test.c0: 159.9-159.51)") == true) goto <310:then>
A7 00 0D # goto +13           # goto <311:else>
# <310:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <312:endif>
# <311:else>
# <312:endif>
15 04    # vload 4            # B2
15 08    # vload 8            # str1
15 09    # vload 9            # str2
14 3F AF # aldc 16303         # s[16303] = "main (bloom-test.c0: 160.28-160.51)"
B8 00 03 # invokestatic 3     # string_join__1(str1, str2, "main (bloom-test.c0: 160.28-160.51)")
14 3F D3 # aldc 16339         # s[16339] = "main (bloom-test.c0: 160.9-160.52)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, string_join__1(str1, str2, "main (bloom-test.c0: 160.28-160.51)"), "main (bloom-test.c0: 160.9-160.52)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B2, string_join__1(str1, str2, "main (bloom-test.c0: 160.28-160.51)"), "main (bloom-test.c0: 160.9-160.52)") == true) goto <313:then>
A7 00 0D # goto +13           # goto <314:else>
# <313:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <315:endif>
# <314:else>
# <315:endif>
15 06    # vload 6            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 06    # vstore 6           # i += 1;
15 07    # vload 7            # num
10 01    # bipush 1           # 1
60       # iadd               # 
36 07    # vstore 7           # num += 1;
A7 00 06 # goto +6            # goto <294:endif>
# <293:else>
A7 00 06 # goto +6            # break
# <294:endif>
A7 FE BB # goto -325          # goto <289:loop>
# <291:exit>
14 3F F6 # aldc 16374         # s[16374] = ""
14 3F F7 # aldc 16375         # s[16375] = "main (bloom-test.c0: 164.3-164.32)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 164.3-164.32)")
57       # pop                # (ignore result)
14 40 1A # aldc 16410         # s[16410] = "--2 "
14 40 1F # aldc 16415         # s[16415] = "main (bloom-test.c0: 164.3-164.32)"
B8 00 29 # invokestatic 41    # print__1("--2 ", "main (bloom-test.c0: 164.3-164.32)")
57       # pop                # (ignore result)
14 40 42 # aldc 16450         # s[16450] = ""
14 40 43 # aldc 16451         # s[16451] = "main (bloom-test.c0: 164.3-164.32)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 164.3-164.32)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 40 66 # aldc 16486         # s[16486] = "main (bloom-test.c0: 164.3-164.32)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 164.3-164.32)")
57       # pop                # (ignore result)
14 40 89 # aldc 16521         # s[16521] = "\n"
14 40 8B # aldc 16523         # s[16523] = "main (bloom-test.c0: 164.3-164.32)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 164.3-164.32)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 40 AE # aldc 16558         # s[16558] = " a"
14 40 B1 # aldc 16561         # s[16561] = "main (bloom-test.c0: 167.7-167.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, " a", "main (bloom-test.c0: 167.7-167.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, " a", "main (bloom-test.c0: 167.7-167.30)") == true) goto <316:then>
A7 00 0D # goto +13           # goto <317:else>
# <316:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <318:endif>
# <317:else>
# <318:endif>
15 02    # vload 2            # B
14 40 D4 # aldc 16596         # s[16596] = "a "
14 40 D7 # aldc 16599         # s[16599] = "main (bloom-test.c0: 168.7-168.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "a ", "main (bloom-test.c0: 168.7-168.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "a ", "main (bloom-test.c0: 168.7-168.30)") == true) goto <319:then>
A7 00 0D # goto +13           # goto <320:else>
# <319:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <321:endif>
# <320:else>
# <321:endif>
15 02    # vload 2            # B
14 40 FA # aldc 16634         # s[16634] = "aa"
14 40 FD # aldc 16637         # s[16637] = "main (bloom-test.c0: 169.7-169.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "aa", "main (bloom-test.c0: 169.7-169.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "aa", "main (bloom-test.c0: 169.7-169.30)") == true) goto <322:then>
A7 00 0D # goto +13           # goto <323:else>
# <322:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <324:endif>
# <323:else>
# <324:endif>
15 02    # vload 2            # B
14 41 20 # aldc 16672         # s[16672] = "ba"
14 41 23 # aldc 16675         # s[16675] = "main (bloom-test.c0: 170.7-170.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "ba", "main (bloom-test.c0: 170.7-170.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "ba", "main (bloom-test.c0: 170.7-170.30)") == true) goto <325:then>
A7 00 0D # goto +13           # goto <326:else>
# <325:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <327:endif>
# <326:else>
# <327:endif>
15 02    # vload 2            # B
14 41 46 # aldc 16710         # s[16710] = "      a"
14 41 4E # aldc 16718         # s[16718] = "main (bloom-test.c0: 171.7-171.35)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "      a", "main (bloom-test.c0: 171.7-171.35)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "      a", "main (bloom-test.c0: 171.7-171.35)") == true) goto <328:then>
A7 00 0D # goto +13           # goto <329:else>
# <328:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <330:endif>
# <329:else>
# <330:endif>
14 41 71 # aldc 16753         # s[16753] = ""
14 41 72 # aldc 16754         # s[16754] = "main (bloom-test.c0: 172.3-172.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 172.3-172.34)")
57       # pop                # (ignore result)
14 41 95 # aldc 16789         # s[16789] = "--2.1 "
14 41 9C # aldc 16796         # s[16796] = "main (bloom-test.c0: 172.3-172.34)"
B8 00 29 # invokestatic 41    # print__1("--2.1 ", "main (bloom-test.c0: 172.3-172.34)")
57       # pop                # (ignore result)
14 41 BF # aldc 16831         # s[16831] = ""
14 41 C0 # aldc 16832         # s[16832] = "main (bloom-test.c0: 172.3-172.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 172.3-172.34)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 41 E3 # aldc 16867         # s[16867] = "main (bloom-test.c0: 172.3-172.34)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 172.3-172.34)")
57       # pop                # (ignore result)
14 42 06 # aldc 16902         # s[16902] = "\n"
14 42 08 # aldc 16904         # s[16904] = "main (bloom-test.c0: 172.3-172.34)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 172.3-172.34)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 42 2B # aldc 16939         # s[16939] = "b"
14 42 2D # aldc 16941         # s[16941] = "main (bloom-test.c0: 173.7-173.29)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "b", "main (bloom-test.c0: 173.7-173.29)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "b", "main (bloom-test.c0: 173.7-173.29)") == true) goto <331:then>
A7 00 0D # goto +13           # goto <332:else>
# <331:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <333:endif>
# <332:else>
# <333:endif>
15 02    # vload 2            # B
14 42 50 # aldc 16976         # s[16976] = " b"
14 42 53 # aldc 16979         # s[16979] = "main (bloom-test.c0: 174.7-174.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, " b", "main (bloom-test.c0: 174.7-174.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, " b", "main (bloom-test.c0: 174.7-174.30)") == true) goto <334:then>
A7 00 0D # goto +13           # goto <335:else>
# <334:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <336:endif>
# <335:else>
# <336:endif>
15 02    # vload 2            # B
14 42 76 # aldc 17014         # s[17014] = "b "
14 42 79 # aldc 17017         # s[17017] = "main (bloom-test.c0: 175.7-175.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "b ", "main (bloom-test.c0: 175.7-175.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "b ", "main (bloom-test.c0: 175.7-175.30)") == true) goto <337:then>
A7 00 0D # goto +13           # goto <338:else>
# <337:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <339:endif>
# <338:else>
# <339:endif>
15 02    # vload 2            # B
14 42 9C # aldc 17052         # s[17052] = "bbb"
14 42 A0 # aldc 17056         # s[17056] = "main (bloom-test.c0: 176.7-176.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "bbb", "main (bloom-test.c0: 176.7-176.31)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "bbb", "main (bloom-test.c0: 176.7-176.31)") == true) goto <340:then>
A7 00 0D # goto +13           # goto <341:else>
# <340:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <342:endif>
# <341:else>
# <342:endif>
15 02    # vload 2            # B
14 42 C3 # aldc 17091         # s[17091] = "b b"
14 42 C7 # aldc 17095         # s[17095] = "main (bloom-test.c0: 177.7-177.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "b b", "main (bloom-test.c0: 177.7-177.31)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "b b", "main (bloom-test.c0: 177.7-177.31)") == true) goto <343:then>
A7 00 0D # goto +13           # goto <344:else>
# <343:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <345:endif>
# <344:else>
# <345:endif>
14 42 EA # aldc 17130         # s[17130] = ""
14 42 EB # aldc 17131         # s[17131] = "main (bloom-test.c0: 178.3-178.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 178.3-178.34)")
57       # pop                # (ignore result)
14 43 0E # aldc 17166         # s[17166] = "--2.2 "
14 43 15 # aldc 17173         # s[17173] = "main (bloom-test.c0: 178.3-178.34)"
B8 00 29 # invokestatic 41    # print__1("--2.2 ", "main (bloom-test.c0: 178.3-178.34)")
57       # pop                # (ignore result)
14 43 38 # aldc 17208         # s[17208] = ""
14 43 39 # aldc 17209         # s[17209] = "main (bloom-test.c0: 178.3-178.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 178.3-178.34)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 43 5C # aldc 17244         # s[17244] = "main (bloom-test.c0: 178.3-178.34)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 178.3-178.34)")
57       # pop                # (ignore result)
14 43 7F # aldc 17279         # s[17279] = "\n"
14 43 81 # aldc 17281         # s[17281] = "main (bloom-test.c0: 178.3-178.34)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 178.3-178.34)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 43 A4 # aldc 17316         # s[17316] = "c c"
14 43 A8 # aldc 17320         # s[17320] = "main (bloom-test.c0: 179.7-179.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "c c", "main (bloom-test.c0: 179.7-179.31)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "c c", "main (bloom-test.c0: 179.7-179.31)") == true) goto <346:then>
A7 00 0D # goto +13           # goto <347:else>
# <346:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <348:endif>
# <347:else>
# <348:endif>
15 02    # vload 2            # B
14 43 CB # aldc 17355         # s[17355] = "cc"
14 43 CE # aldc 17358         # s[17358] = "main (bloom-test.c0: 180.7-180.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "cc", "main (bloom-test.c0: 180.7-180.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "cc", "main (bloom-test.c0: 180.7-180.30)") == true) goto <349:then>
A7 00 0D # goto +13           # goto <350:else>
# <349:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <351:endif>
# <350:else>
# <351:endif>
15 02    # vload 2            # B
14 43 F1 # aldc 17393         # s[17393] = "c"
14 43 F3 # aldc 17395         # s[17395] = "main (bloom-test.c0: 181.7-181.29)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "c", "main (bloom-test.c0: 181.7-181.29)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "c", "main (bloom-test.c0: 181.7-181.29)") == true) goto <352:then>
A7 00 0D # goto +13           # goto <353:else>
# <352:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <354:endif>
# <353:else>
# <354:endif>
15 02    # vload 2            # B
14 44 16 # aldc 17430         # s[17430] = "ccc "
14 44 1B # aldc 17435         # s[17435] = "main (bloom-test.c0: 182.7-182.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "ccc ", "main (bloom-test.c0: 182.7-182.32)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "ccc ", "main (bloom-test.c0: 182.7-182.32)") == true) goto <355:then>
A7 00 0D # goto +13           # goto <356:else>
# <355:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <357:endif>
# <356:else>
# <357:endif>
15 02    # vload 2            # B
14 44 3E # aldc 17470         # s[17470] = "cdc"
14 44 42 # aldc 17474         # s[17474] = "main (bloom-test.c0: 183.7-183.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "cdc", "main (bloom-test.c0: 183.7-183.31)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "cdc", "main (bloom-test.c0: 183.7-183.31)") == true) goto <358:then>
A7 00 0D # goto +13           # goto <359:else>
# <358:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <360:endif>
# <359:else>
# <360:endif>
14 44 65 # aldc 17509         # s[17509] = ""
14 44 66 # aldc 17510         # s[17510] = "main (bloom-test.c0: 184.3-184.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 184.3-184.34)")
57       # pop                # (ignore result)
14 44 89 # aldc 17545         # s[17545] = "--2.3 "
14 44 90 # aldc 17552         # s[17552] = "main (bloom-test.c0: 184.3-184.34)"
B8 00 29 # invokestatic 41    # print__1("--2.3 ", "main (bloom-test.c0: 184.3-184.34)")
57       # pop                # (ignore result)
14 44 B3 # aldc 17587         # s[17587] = ""
14 44 B4 # aldc 17588         # s[17588] = "main (bloom-test.c0: 184.3-184.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 184.3-184.34)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 44 D7 # aldc 17623         # s[17623] = "main (bloom-test.c0: 184.3-184.34)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 184.3-184.34)")
57       # pop                # (ignore result)
14 44 FA # aldc 17658         # s[17658] = "\n"
14 44 FC # aldc 17660         # s[17660] = "main (bloom-test.c0: 184.3-184.34)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 184.3-184.34)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 45 1F # aldc 17695         # s[17695] = "d"
14 45 21 # aldc 17697         # s[17697] = "main (bloom-test.c0: 185.7-185.29)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "d", "main (bloom-test.c0: 185.7-185.29)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "d", "main (bloom-test.c0: 185.7-185.29)") == true) goto <361:then>
A7 00 0D # goto +13           # goto <362:else>
# <361:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <363:endif>
# <362:else>
# <363:endif>
15 02    # vload 2            # B
14 45 44 # aldc 17732         # s[17732] = "da"
14 45 47 # aldc 17735         # s[17735] = "main (bloom-test.c0: 186.7-186.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "da", "main (bloom-test.c0: 186.7-186.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "da", "main (bloom-test.c0: 186.7-186.30)") == true) goto <364:then>
A7 00 0D # goto +13           # goto <365:else>
# <364:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <366:endif>
# <365:else>
# <366:endif>
15 02    # vload 2            # B
14 45 6A # aldc 17770         # s[17770] = "ab"
14 45 6D # aldc 17773         # s[17773] = "main (bloom-test.c0: 187.7-187.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "ab", "main (bloom-test.c0: 187.7-187.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "ab", "main (bloom-test.c0: 187.7-187.30)") == true) goto <367:then>
A7 00 0D # goto +13           # goto <368:else>
# <367:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <369:endif>
# <368:else>
# <369:endif>
15 02    # vload 2            # B
14 45 90 # aldc 17808         # s[17808] = "d bd"
14 45 95 # aldc 17813         # s[17813] = "main (bloom-test.c0: 188.7-188.32)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "d bd", "main (bloom-test.c0: 188.7-188.32)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "d bd", "main (bloom-test.c0: 188.7-188.32)") == true) goto <370:then>
A7 00 0D # goto +13           # goto <371:else>
# <370:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <372:endif>
# <371:else>
# <372:endif>
15 02    # vload 2            # B
14 45 B8 # aldc 17848         # s[17848] = "dab"
14 45 BC # aldc 17852         # s[17852] = "main (bloom-test.c0: 189.7-189.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "dab", "main (bloom-test.c0: 189.7-189.31)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "dab", "main (bloom-test.c0: 189.7-189.31)") == true) goto <373:then>
A7 00 0D # goto +13           # goto <374:else>
# <373:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <375:endif>
# <374:else>
# <375:endif>
14 45 DF # aldc 17887         # s[17887] = ""
14 45 E0 # aldc 17888         # s[17888] = "main (bloom-test.c0: 190.3-190.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 190.3-190.34)")
57       # pop                # (ignore result)
14 46 03 # aldc 17923         # s[17923] = "--2.4 "
14 46 0A # aldc 17930         # s[17930] = "main (bloom-test.c0: 190.3-190.34)"
B8 00 29 # invokestatic 41    # print__1("--2.4 ", "main (bloom-test.c0: 190.3-190.34)")
57       # pop                # (ignore result)
14 46 2D # aldc 17965         # s[17965] = ""
14 46 2E # aldc 17966         # s[17966] = "main (bloom-test.c0: 190.3-190.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 190.3-190.34)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 46 51 # aldc 18001         # s[18001] = "main (bloom-test.c0: 190.3-190.34)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 190.3-190.34)")
57       # pop                # (ignore result)
14 46 74 # aldc 18036         # s[18036] = "\n"
14 46 76 # aldc 18038         # s[18038] = "main (bloom-test.c0: 190.3-190.34)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 190.3-190.34)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 46 99 # aldc 18073         # s[18073] = " e"
14 46 9C # aldc 18076         # s[18076] = "main (bloom-test.c0: 191.7-191.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, " e", "main (bloom-test.c0: 191.7-191.31)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, " e", "main (bloom-test.c0: 191.7-191.31)") == true) goto <376:then>
A7 00 0D # goto +13           # goto <377:else>
# <376:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <378:endif>
# <377:else>
# <378:endif>
15 02    # vload 2            # B
14 46 BF # aldc 18111         # s[18111] = " "
14 46 C1 # aldc 18113         # s[18113] = "main (bloom-test.c0: 192.7-192.29)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, " ", "main (bloom-test.c0: 192.7-192.29)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, " ", "main (bloom-test.c0: 192.7-192.29)") == true) goto <379:then>
A7 00 0D # goto +13           # goto <380:else>
# <379:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <381:endif>
# <380:else>
# <381:endif>
15 02    # vload 2            # B
14 46 E4 # aldc 18148         # s[18148] = "   "
14 46 E8 # aldc 18152         # s[18152] = "main (bloom-test.c0: 193.7-193.31)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "   ", "main (bloom-test.c0: 193.7-193.31)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "   ", "main (bloom-test.c0: 193.7-193.31)") == true) goto <382:then>
A7 00 0D # goto +13           # goto <383:else>
# <382:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <384:endif>
# <383:else>
# <384:endif>
15 02    # vload 2            # B
14 47 0B # aldc 18187         # s[18187] = "~ "
14 47 0E # aldc 18190         # s[18190] = "main (bloom-test.c0: 195.7-195.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "~ ", "main (bloom-test.c0: 195.7-195.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "~ ", "main (bloom-test.c0: 195.7-195.30)") == true) goto <385:then>
A7 00 0D # goto +13           # goto <386:else>
# <385:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <387:endif>
# <386:else>
# <387:endif>
15 02    # vload 2            # B
14 47 31 # aldc 18225         # s[18225] = "^%#$^187561&TG26BF SAOUFsfDTA*"
14 47 50 # aldc 18256         # s[18256] = "main (bloom-test.c0: 196.7-196.58)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "^%#$^187561&TG26BF SAOUFsfDTA*", "main (bloom-test.c0: 196.7-196.58)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "^%#$^187561&TG26BF SAOUFsfDTA*", "main (bloom-test.c0: 196.7-196.58)") == true) goto <388:then>
A7 00 0D # goto +13           # goto <389:else>
# <388:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <390:endif>
# <389:else>
# <390:endif>
14 47 73 # aldc 18291         # s[18291] = ""
14 47 74 # aldc 18292         # s[18292] = "main (bloom-test.c0: 197.3-197.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 197.3-197.34)")
57       # pop                # (ignore result)
14 47 97 # aldc 18327         # s[18327] = "--2.5 "
14 47 9E # aldc 18334         # s[18334] = "main (bloom-test.c0: 197.3-197.34)"
B8 00 29 # invokestatic 41    # print__1("--2.5 ", "main (bloom-test.c0: 197.3-197.34)")
57       # pop                # (ignore result)
14 47 C1 # aldc 18369         # s[18369] = ""
14 47 C2 # aldc 18370         # s[18370] = "main (bloom-test.c0: 197.3-197.34)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 197.3-197.34)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 47 E5 # aldc 18405         # s[18405] = "main (bloom-test.c0: 197.3-197.34)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 197.3-197.34)")
57       # pop                # (ignore result)
14 48 08 # aldc 18440         # s[18440] = "\n"
14 48 0A # aldc 18442         # s[18442] = "main (bloom-test.c0: 197.3-197.34)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 197.3-197.34)")
57       # pop                # (ignore result)
15 02    # vload 2            # B
14 48 2D # aldc 18477         # s[18477] = "87456041"
14 48 36 # aldc 18486         # s[18486] = "main (bloom-test.c0: 198.7-198.36)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "87456041", "main (bloom-test.c0: 198.7-198.36)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "87456041", "main (bloom-test.c0: 198.7-198.36)") == true) goto <391:then>
A7 00 0D # goto +13           # goto <392:else>
# <391:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <393:endif>
# <392:else>
# <393:endif>
15 02    # vload 2            # B
14 48 59 # aldc 18521         # s[18521] = "!\?"
14 48 5C # aldc 18524         # s[18524] = "main (bloom-test.c0: 201.7-201.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, "!\?", "main (bloom-test.c0: 201.7-201.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B, "!\?", "main (bloom-test.c0: 201.7-201.30)") == true) goto <394:then>
A7 00 0D # goto +13           # goto <395:else>
# <394:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <396:endif>
# <395:else>
# <396:endif>
15 04    # vload 4            # B2
14 48 7F # aldc 18559         # s[18559] = "aaa"
10 01    # bipush 1           # 1
10 01    # bipush 1           # 1
14 48 83 # aldc 18563         # s[18563] = "main (bloom-test.c0: 202.26-202.47)"
B8 00 04 # invokestatic 4     # string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 202.26-202.47)")
14 48 A7 # aldc 18599         # s[18599] = "main (bloom-test.c0: 202.7-202.48)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 202.26-202.47)"), "main (bloom-test.c0: 202.7-202.48)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B2, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 202.26-202.47)"), "main (bloom-test.c0: 202.7-202.48)") == true) goto <397:then>
A7 00 0D # goto +13           # goto <398:else>
# <397:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <399:endif>
# <398:else>
# <399:endif>
15 05    # vload 5            # B3
14 48 CA # aldc 18634         # s[18634] = "aaa"
10 01    # bipush 1           # 1
10 01    # bipush 1           # 1
14 48 CE # aldc 18638         # s[18638] = "main (bloom-test.c0: 203.26-203.47)"
B8 00 04 # invokestatic 4     # string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 203.26-203.47)")
14 48 F2 # aldc 18674         # s[18674] = "main (bloom-test.c0: 203.7-203.48)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B3, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 203.26-203.47)"), "main (bloom-test.c0: 203.7-203.48)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B3, string_sub__1("aaa", 1, 1, "main (bloom-test.c0: 203.26-203.47)"), "main (bloom-test.c0: 203.7-203.48)") == true) goto <400:then>
A7 00 0D # goto +13           # goto <401:else>
# <400:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <402:endif>
# <401:else>
# <402:endif>
15 04    # vload 4            # B2
14 49 15 # aldc 18709         # s[18709] = " "
14 49 17 # aldc 18711         # s[18711] = "main (bloom-test.c0: 204.7-204.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B2, " ", "main (bloom-test.c0: 204.7-204.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B2, " ", "main (bloom-test.c0: 204.7-204.30)") == true) goto <403:then>
A7 00 0D # goto +13           # goto <404:else>
# <403:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <405:endif>
# <404:else>
# <405:endif>
15 05    # vload 5            # B3
14 49 3A # aldc 18746         # s[18746] = " "
14 49 3C # aldc 18748         # s[18748] = "main (bloom-test.c0: 205.7-205.30)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B3, " ", "main (bloom-test.c0: 205.7-205.30)")
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (bloom_contains__1(B3, " ", "main (bloom-test.c0: 205.7-205.30)") == true) goto <406:then>
A7 00 0D # goto +13           # goto <407:else>
# <406:then>
15 03    # vload 3            # score
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # score -= 1;
A7 00 03 # goto +3            # goto <408:endif>
# <407:else>
# <408:endif>
15 03    # vload 3            # score
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (score < 0) goto <409:then>
A7 00 0A # goto +10           # goto <410:else>
# <409:then>
10 00    # bipush 0           # 0
36 03    # vstore 3           # score = 0;
A7 00 03 # goto +3            # goto <411:endif>
# <410:else>
# <411:endif>
14 49 5F # aldc 18783         # s[18783] = ""
14 49 60 # aldc 18784         # s[18784] = "main (bloom-test.c0: 210.3-210.32)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 210.3-210.32)")
57       # pop                # (ignore result)
14 49 83 # aldc 18819         # s[18819] = "--3 "
14 49 88 # aldc 18824         # s[18824] = "main (bloom-test.c0: 210.3-210.32)"
B8 00 29 # invokestatic 41    # print__1("--3 ", "main (bloom-test.c0: 210.3-210.32)")
57       # pop                # (ignore result)
14 49 AB # aldc 18859         # s[18859] = ""
14 49 AC # aldc 18860         # s[18860] = "main (bloom-test.c0: 210.3-210.32)"
B8 00 29 # invokestatic 41    # print__1("", "main (bloom-test.c0: 210.3-210.32)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
14 49 CF # aldc 18895         # s[18895] = "main (bloom-test.c0: 210.3-210.32)"
B8 00 2B # invokestatic 43    # printint__1(score, "main (bloom-test.c0: 210.3-210.32)")
57       # pop                # (ignore result)
14 49 F2 # aldc 18930         # s[18930] = "\n"
14 49 F4 # aldc 18932         # s[18932] = "main (bloom-test.c0: 210.3-210.32)"
B8 00 29 # invokestatic 41    # print__1("\n", "main (bloom-test.c0: 210.3-210.32)")
57       # pop                # (ignore result)
14 4A 17 # aldc 18967         # s[18967] = "Returning the performance score.\n"
14 4A 39 # aldc 19001         # s[19001] = "main (bloom-test.c0: 214.3-214.47)"
B8 00 29 # invokestatic 41    # print__1("Returning the performance score.\n", "main (bloom-test.c0: 214.3-214.47)")
57       # pop                # (ignore result)
15 03    # vload 3            # score
36 01    # vstore 1           # _result = score;
15 01    # vload 1            # _result
B0       # return             # 


#<string_length__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # s
B7 00 00 # invokenative 0     # string_length(s)
36 02    # vstore 2           # _result = string_length(s);
15 02    # vload 2            # _result
B0       # return             # 


#<string_charat__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 41             # code length = 65 bytes
10 00    # bipush 0           # 0
15 01    # vload 1            # idx
A4 00 06 # if_icmple +6       # if (0 <= idx) goto <00:cond_true>
A7 00 1D # goto +29           # goto <01:cond_false>
# <00:cond_true>
15 01    # vload 1            # idx
15 00    # vload 0            # s
14 00 00 # aldc 0             # s[0] = "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)"
B8 00 01 # invokestatic 1     # string_length__1(s, "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)")
A1 00 06 # if_icmplt +6       # if (idx < string_length__1(s, "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)")) goto <03:cond_true>
A7 00 08 # goto +8            # goto <04:cond_false>
# <03:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <05:cond_end>
# <04:cond_false>
10 00    # bipush 0           # false
# <05:cond_end>
A7 00 05 # goto +5            # goto <02:cond_end>
# <01:cond_false>
10 00    # bipush 0           # false
# <02:cond_end>
14 00 48 # aldc 72            # s[72] = "/afs/andrew/course/15/122/lib/string.h0: 19.6-19.50: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 00 9A # aldc 154           # s[154] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/string.h0: 19.6-19.50: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= idx) && (idx < string_length__1(s, "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)"))) [failure message on stack]
15 00    # vload 0            # s
15 01    # vload 1            # idx
B7 00 02 # invokenative 2     # string_charat(s, idx)
36 03    # vstore 3           # _result = string_charat(s, idx);
15 03    # vload 3            # _result
B0       # return             # 


#<string_join__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 36             # code length = 54 bytes
15 00    # vload 0            # a
15 01    # vload 1            # b
B7 00 01 # invokenative 1     # string_join(a, b)
36 03    # vstore 3           # _result = string_join(a, b);
15 03    # vload 3            # _result
14 00 AC # aldc 172           # s[172] = "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)"
B8 00 01 # invokestatic 1     # string_length__1(_result, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)")
15 00    # vload 0            # a
14 00 F2 # aldc 242           # s[242] = "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)"
B8 00 01 # invokestatic 1     # string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)")
15 01    # vload 1            # b
14 01 38 # aldc 312           # s[312] = "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"
B8 00 01 # invokestatic 1     # string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)")
60       # iadd               # (string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)") + string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"))
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)") == (string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)") + string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"))) goto <06:cond_true>
A7 00 08 # goto +8            # goto <07:cond_false>
# <06:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <08:cond_end>
# <07:cond_false>
10 00    # bipush 0           # false
# <08:cond_end>
14 01 7E # aldc 382           # s[382] = "/afs/andrew/course/15/122/lib/string.h0: 23.6-24.55: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)") == (string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)") + string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"))) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<string_sub__1>
04                # number of arguments = 4
05                # number of local variables = 5
00 6B             # code length = 107 bytes
10 00    # bipush 0           # 0
15 01    # vload 1            # start
A4 00 06 # if_icmple +6       # if (0 <= start) goto <12:and>
A7 00 27 # goto +39           # goto <10:cond_false>
# <12:and>
15 01    # vload 1            # start
15 02    # vload 2            # end
A4 00 06 # if_icmple +6       # if (start <= end) goto <09:cond_true>
A7 00 1D # goto +29           # goto <10:cond_false>
# <09:cond_true>
15 02    # vload 2            # end
15 00    # vload 0            # a
14 01 CE # aldc 462           # s[462] = "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)"
B8 00 01 # invokestatic 1     # string_length__1(a, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)")
A4 00 06 # if_icmple +6       # if (end <= string_length__1(a, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)")) goto <13:cond_true>
A7 00 08 # goto +8            # goto <14:cond_false>
# <13:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <15:cond_end>
# <14:cond_false>
10 00    # bipush 0           # false
# <15:cond_end>
A7 00 05 # goto +5            # goto <11:cond_end>
# <10:cond_false>
10 00    # bipush 0           # false
# <11:cond_end>
14 02 13 # aldc 531           # s[531] = "/afs/andrew/course/15/122/lib/string.h0: 31.6-31.69: @requires annotation failed\n"
15 03    # vload 3            # _caller
14 02 65 # aldc 613           # s[613] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/string.h0: 31.6-31.69: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (((0 <= start) && (start <= end)) && (end <= string_length__1(a, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)"))) [failure message on stack]
15 00    # vload 0            # a
15 01    # vload 1            # start
15 02    # vload 2            # end
B7 00 03 # invokenative 3     # string_sub(a, start, end)
36 04    # vstore 4           # _result = string_sub(a, start, end);
15 04    # vload 4            # _result
14 02 77 # aldc 631           # s[631] = "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)"
B8 00 01 # invokestatic 1     # string_length__1(_result, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)")
15 02    # vload 2            # end
15 01    # vload 1            # start
64       # isub               # (end - start)
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)") == (end - start)) goto <16:cond_true>
A7 00 08 # goto +8            # goto <17:cond_false>
# <16:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <18:cond_end>
# <17:cond_false>
10 00    # bipush 0           # false
# <18:cond_end>
14 02 BC # aldc 700           # s[700] = "/afs/andrew/course/15/122/lib/string.h0: 32.6-32.52: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)") == (end - start)) [failure message on stack]
15 04    # vload 4            # _result
B0       # return             # 


#<string_equal__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 0C             # code length = 12 bytes
15 00    # vload 0            # a
15 01    # vload 1            # b
B7 00 04 # invokenative 4     # string_equal(a, b)
36 03    # vstore 3           # _result = string_equal(a, b);
15 03    # vload 3            # _result
B0       # return             # 


#<string_compare__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 30             # code length = 48 bytes
15 00    # vload 0            # a
15 01    # vload 1            # b
B7 00 05 # invokenative 5     # string_compare(a, b)
36 03    # vstore 3           # _result = string_compare(a, b);
10 FF    # bipush -1          # -1
15 03    # vload 3            # _result
A4 00 06 # if_icmple +6       # if (-(1) <= _result) goto <19:cond_true>
A7 00 17 # goto +23           # goto <20:cond_false>
# <19:cond_true>
15 03    # vload 3            # _result
10 01    # bipush 1           # 1
A4 00 06 # if_icmple +6       # if (_result <= 1) goto <22:cond_true>
A7 00 08 # goto +8            # goto <23:cond_false>
# <22:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <24:cond_end>
# <23:cond_false>
10 00    # bipush 0           # false
# <24:cond_end>
A7 00 05 # goto +5            # goto <21:cond_end>
# <20:cond_false>
10 00    # bipush 0           # false
# <21:cond_end>
14 03 0C # aldc 780           # s[780] = "/afs/andrew/course/15/122/lib/string.h0: 37.6-37.44: @ensures annotation failed"
CF       # assert             # assert ((-(1) <= _result) && (_result <= 1)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<string_fromint__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # i
B7 00 06 # invokenative 6     # string_fromint(i)
36 02    # vstore 2           # _result = string_fromint(i);
15 02    # vload 2            # _result
B0       # return             # 


#<string_frombool__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # b
B7 00 07 # invokenative 7     # string_frombool(b)
36 02    # vstore 2           # _result = string_frombool(b);
15 02    # vload 2            # _result
B0       # return             # 


#<string_fromchar__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 62             # code length = 98 bytes
15 00    # vload 0            # c
10 00    # bipush 0           # '\000'
A0 00 06 # if_cmpne +6        # if (c != '\0') goto <25:cond_true>
A7 00 08 # goto +8            # goto <26:cond_false>
# <25:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <27:cond_end>
# <26:cond_false>
10 00    # bipush 0           # false
# <27:cond_end>
14 03 5C # aldc 860           # s[860] = "/afs/andrew/course/15/122/lib/string.h0: 43.6-43.25: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 03 AE # aldc 942           # s[942] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/string.h0: 43.6-43.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (c != '\0') [failure message on stack]
15 00    # vload 0            # c
B7 00 08 # invokenative 8     # string_fromchar(c)
36 02    # vstore 2           # _result = string_fromchar(c);
15 02    # vload 2            # _result
14 03 C0 # aldc 960           # s[960] = "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)"
B8 00 01 # invokestatic 1     # string_length__1(_result, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)")
10 01    # bipush 1           # 1
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)") == 1) goto <28:cond_true>
A7 00 08 # goto +8            # goto <29:cond_false>
# <28:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <30:cond_end>
# <29:cond_false>
10 00    # bipush 0           # false
# <30:cond_end>
14 04 0A # aldc 1034          # s[1034] = "/afs/andrew/course/15/122/lib/string.h0: 44.6-44.42: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)") == 1) [failure message on stack]
15 02    # vload 2            # _result
10 00    # bipush 0           # 0
14 04 5A # aldc 1114          # s[1114] = "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)"
B8 00 02 # invokestatic 2     # string_charat__1(_result, 0, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)")
15 00    # vload 0            # c
9F 00 06 # if_cmpeq +6        # if (string_charat__1(_result, 0, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)") == c) goto <31:cond_true>
A7 00 08 # goto +8            # goto <32:cond_false>
# <31:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <33:cond_end>
# <32:cond_false>
10 00    # bipush 0           # false
# <33:cond_end>
14 04 A4 # aldc 1188          # s[1188] = "/afs/andrew/course/15/122/lib/string.h0: 45.6-45.45: @ensures annotation failed"
CF       # assert             # assert (string_charat__1(_result, 0, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)") == c) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<string_tolower__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # s
B7 00 09 # invokenative 9     # string_tolower(s)
36 02    # vstore 2           # _result = string_tolower(s);
15 02    # vload 2            # _result
B0       # return             # 


#<string_terminated__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 3C             # code length = 60 bytes
10 00    # bipush 0           # 0
15 01    # vload 1            # n
A4 00 06 # if_icmple +6       # if (0 <= n) goto <34:cond_true>
A7 00 18 # goto +24           # goto <35:cond_false>
# <34:cond_true>
15 01    # vload 1            # n
15 00    # vload 0            # A
BE       # arraylength        # \length(A)
A4 00 06 # if_icmple +6       # if (n <= \length(A)) goto <37:cond_true>
A7 00 08 # goto +8            # goto <38:cond_false>
# <37:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <39:cond_end>
# <38:cond_false>
10 00    # bipush 0           # false
# <39:cond_end>
A7 00 05 # goto +5            # goto <36:cond_end>
# <35:cond_false>
10 00    # bipush 0           # false
# <36:cond_end>
14 04 F4 # aldc 1268          # s[1268] = "/afs/andrew/course/15/122/lib/string.h0: 52.6-52.41: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 05 46 # aldc 1350          # s[1350] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/string.h0: 52.6-52.41: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= n) && (n <= \length(A))) [failure message on stack]
15 00    # vload 0            # A
15 01    # vload 1            # n
B7 00 0A # invokenative 10    # string_terminated(A, n)
36 03    # vstore 3           # _result = string_terminated(A, n);
15 03    # vload 3            # _result
B0       # return             # 


#<string_to_chararray__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 40             # code length = 64 bytes
15 00    # vload 0            # s
B7 00 0B # invokenative 11    # string_to_chararray(s)
36 02    # vstore 2           # _result = string_to_chararray(s);
15 02    # vload 2            # _result
BE       # arraylength        # \length(_result)
15 00    # vload 0            # s
14 05 58 # aldc 1368          # s[1368] = "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)"
B8 00 01 # invokestatic 1     # string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)")
10 01    # bipush 1           # 1
60       # iadd               # (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)") + 1)
A2 00 06 # if_icmpge +6       # if (\length(_result) >= (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)") + 1)) goto <40:cond_true>
A7 00 08 # goto +8            # goto <41:cond_false>
# <40:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <42:cond_end>
# <41:cond_false>
10 00    # bipush 0           # false
# <42:cond_end>
14 05 A6 # aldc 1446          # s[1446] = "/afs/andrew/course/15/122/lib/string.h0: 56.6-56.55: @ensures annotation failed"
CF       # assert             # assert (\length(_result) >= (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)") + 1)) [failure message on stack]
15 02    # vload 2            # _result
15 00    # vload 0            # s
14 05 F6 # aldc 1526          # s[1526] = "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)"
B8 00 01 # invokestatic 1     # string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)")
10 01    # bipush 1           # 1
60       # iadd               # (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)") + 1)
14 06 44 # aldc 1604          # s[1604] = "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)"
B8 00 0B # invokestatic 11    # string_terminated__1(_result, (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)") + 1), "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)")
14 06 92 # aldc 1682          # s[1682] = "/afs/andrew/course/15/122/lib/string.h0: 57.6-57.63: @ensures annotation failed"
CF       # assert             # assert string_terminated__1(_result, (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)") + 1), "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)") [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<string_from_chararray__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 43             # code length = 67 bytes
15 00    # vload 0            # A
15 00    # vload 0            # A
BE       # arraylength        # \length(A)
14 06 E2 # aldc 1762          # s[1762] = "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)"
B8 00 0B # invokestatic 11    # string_terminated__1(A, \length(A), "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)")
14 07 32 # aldc 1842          # s[1842] = "/afs/andrew/course/15/122/lib/string.h0: 62.6-62.48: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 07 84 # aldc 1924          # s[1924] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/string.h0: 62.6-62.48: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert string_terminated__1(A, \length(A), "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)") [failure message on stack]
15 00    # vload 0            # A
B7 00 0C # invokenative 12    # string_from_chararray(A)
36 02    # vstore 2           # _result = string_from_chararray(A);
15 02    # vload 2            # _result
14 07 96 # aldc 1942          # s[1942] = "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)"
B8 00 01 # invokestatic 1     # string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)")
10 01    # bipush 1           # 1
60       # iadd               # (string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)") + 1)
15 00    # vload 0            # A
BE       # arraylength        # \length(A)
A4 00 06 # if_icmple +6       # if ((string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)") + 1) <= \length(A)) goto <43:cond_true>
A7 00 08 # goto +8            # goto <44:cond_false>
# <43:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <45:cond_end>
# <44:cond_false>
10 00    # bipush 0           # false
# <45:cond_end>
14 07 E6 # aldc 2022          # s[2022] = "/afs/andrew/course/15/122/lib/string.h0: 63.6-63.55: @ensures annotation failed"
CF       # assert             # assert ((string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)") + 1) <= \length(A)) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<char_ord__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 2E             # code length = 46 bytes
15 00    # vload 0            # c
B7 00 0D # invokenative 13    # char_ord(c)
36 02    # vstore 2           # _result = char_ord(c);
10 00    # bipush 0           # 0
15 02    # vload 2            # _result
A4 00 06 # if_icmple +6       # if (0 <= _result) goto <46:cond_true>
A7 00 17 # goto +23           # goto <47:cond_false>
# <46:cond_true>
15 02    # vload 2            # _result
10 7F    # bipush 127         # 127
A4 00 06 # if_icmple +6       # if (_result <= 127) goto <49:cond_true>
A7 00 08 # goto +8            # goto <50:cond_false>
# <49:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <51:cond_end>
# <50:cond_false>
10 00    # bipush 0           # false
# <51:cond_end>
A7 00 05 # goto +5            # goto <48:cond_end>
# <47:cond_false>
10 00    # bipush 0           # false
# <48:cond_end>
14 08 36 # aldc 2102          # s[2102] = "/afs/andrew/course/15/122/lib/string.h0: 67.6-67.45: @ensures annotation failed"
CF       # assert             # assert ((0 <= _result) && (_result <= 127)) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<char_chr__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 39             # code length = 57 bytes
10 00    # bipush 0           # 0
15 00    # vload 0            # n
A4 00 06 # if_icmple +6       # if (0 <= n) goto <52:cond_true>
A7 00 17 # goto +23           # goto <53:cond_false>
# <52:cond_true>
15 00    # vload 0            # n
10 7F    # bipush 127         # 127
A4 00 06 # if_icmple +6       # if (n <= 127) goto <55:cond_true>
A7 00 08 # goto +8            # goto <56:cond_false>
# <55:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <57:cond_end>
# <56:cond_false>
10 00    # bipush 0           # false
# <57:cond_end>
A7 00 05 # goto +5            # goto <54:cond_end>
# <53:cond_false>
10 00    # bipush 0           # false
# <54:cond_end>
14 08 86 # aldc 2182          # s[2182] = "/afs/andrew/course/15/122/lib/string.h0: 69.6-69.34: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 08 D8 # aldc 2264          # s[2264] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/string.h0: 69.6-69.34: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= n) && (n <= 127)) [failure message on stack]
15 00    # vload 0            # n
B7 00 0E # invokenative 14    # char_chr(n)
36 02    # vstore 2           # _result = char_chr(n);
15 02    # vload 2            # _result
B0       # return             # 


#<is_bloom>
02                # number of arguments = 2
05                # number of local variables = 5
00 86             # code length = 134 bytes
15 00    # vload 0            # B
01       # aconst_null        # NULL
9F 00 06 # if_cmpeq +6        # if (B == NULL) goto <58:then>
A7 00 0D # goto +13           # goto <59:else>
# <58:then>
10 00    # bipush 0           # false
36 02    # vstore 2           # _result = false;
15 02    # vload 2            # _result
B0       # return             # 
A7 00 03 # goto +3            # goto <60:endif>
# <59:else>
# <60:endif>
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
01       # aconst_null        # NULL
9F 00 06 # if_cmpeq +6        # if (B->chain == NULL) goto <61:then>
A7 00 0D # goto +13           # goto <62:else>
# <61:then>
10 01    # bipush 1           # true
36 02    # vstore 2           # _result = true;
15 02    # vload 2            # _result
B0       # return             # 
A7 00 03 # goto +3            # goto <63:endif>
# <62:else>
# <63:endif>
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
62 00    # aaddf 0            # &B->chain->data
2F       # amload             # B->chain->data
36 03    # vstore 3           # last = B->chain->data;
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
62 08    # aaddf 8            # &B->chain->next
2F       # amload             # B->chain->next
36 04    # vstore 4           # l = B->chain->next;
# <64:loop>
A7 00 03 # goto +3            # goto <65:body>
# <65:body>
15 04    # vload 4            # l
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (l != NULL) goto <67:then>
A7 00 33 # goto +51           # goto <68:else>
# <67:then>
15 03    # vload 3            # last
15 04    # vload 4            # l
62 00    # aaddf 0            # &l->data
2F       # amload             # l->data
14 08 EA # aldc 2282          # s[2282] = "is_bloom (bloom-expensive.c0: 33.9-33.38)"
B8 00 06 # invokestatic 6     # string_compare__1(last, l->data, "is_bloom (bloom-expensive.c0: 33.9-33.38)")
10 00    # bipush 0           # 0
A2 00 06 # if_icmpge +6       # if (string_compare__1(last, l->data, "is_bloom (bloom-expensive.c0: 33.9-33.38)") >= 0) goto <70:then>
A7 00 0D # goto +13           # goto <71:else>
# <70:then>
10 00    # bipush 0           # false
36 02    # vstore 2           # _result = false;
15 02    # vload 2            # _result
B0       # return             # 
A7 00 03 # goto +3            # goto <72:endif>
# <71:else>
# <72:endif>
15 04    # vload 4            # l
62 00    # aaddf 0            # &l->data
2F       # amload             # l->data
36 03    # vstore 3           # last = l->data;
15 04    # vload 4            # l
62 08    # aaddf 8            # &l->next
2F       # amload             # l->next
36 04    # vstore 4           # l = l->next;
A7 00 06 # goto +6            # goto <69:endif>
# <68:else>
A7 00 06 # goto +6            # break
# <69:endif>
A7 FF C1 # goto -63           # goto <64:loop>
# <66:exit>
10 01    # bipush 1           # true
36 02    # vstore 2           # _result = true;
15 02    # vload 2            # _result
B0       # return             # 


#<bloom_new>
02                # number of arguments = 2
03                # number of local variables = 3
00 33             # code length = 51 bytes
10 00    # bipush 0           # 0
15 00    # vload 0            # table_size
A1 00 06 # if_icmplt +6       # if (0 < table_size) goto <73:cond_true>
A7 00 08 # goto +8            # goto <74:cond_false>
# <73:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <75:cond_end>
# <74:cond_false>
10 00    # bipush 0           # false
# <75:cond_end>
14 09 14 # aldc 2324          # s[2324] = "bloom-expensive.c0: 41.4-41.28: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 09 51 # aldc 2385          # s[2385] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("bloom-expensive.c0: 41.4-41.28: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (0 < table_size) [failure message on stack]
BB 08    # new 8              # alloc(bloom)
36 02    # vstore 2           # _result = alloc(bloom);
15 02    # vload 2            # _result
14 09 63 # aldc 2403          # s[2403] = "bloom_new (bloom-expensive.c0: 42.12-42.29)"
B8 00 10 # invokestatic 16    # is_bloom(_result, "bloom_new (bloom-expensive.c0: 42.12-42.29)")
14 09 8F # aldc 2447          # s[2447] = "bloom-expensive.c0: 42.4-42.30: @ensures annotation failed"
CF       # assert             # assert is_bloom(_result, "bloom_new (bloom-expensive.c0: 42.12-42.29)") [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<bloom_contains>
03                # number of arguments = 3
06                # number of local variables = 6
00 78             # code length = 120 bytes
15 00    # vload 0            # B
14 09 CA # aldc 2506          # s[2506] = "bloom_contains (bloom-expensive.c0: 48.13-48.24)"
B8 00 10 # invokestatic 16    # is_bloom(B, "bloom_contains (bloom-expensive.c0: 48.13-48.24)")
14 09 FB # aldc 2555          # s[2555] = "bloom-expensive.c0: 48.4-48.25: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 0A 38 # aldc 2616          # s[2616] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("bloom-expensive.c0: 48.4-48.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert is_bloom(B, "bloom_contains (bloom-expensive.c0: 48.13-48.24)") [failure message on stack]
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
36 04    # vstore 4           # l = B->chain;
# <76:loop>
A7 00 03 # goto +3            # goto <77:body>
# <77:body>
15 04    # vload 4            # l
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (l != NULL) goto <79:then>
A7 00 44 # goto +68           # goto <80:else>
# <79:then>
15 04    # vload 4            # l
62 00    # aaddf 0            # &l->data
2F       # amload             # l->data
15 01    # vload 1            # x
14 0A 4A # aldc 2634          # s[2634] = "bloom_contains (bloom-expensive.c0: 51.15-51.41)"
B8 00 06 # invokestatic 6     # string_compare__1(l->data, x, "bloom_contains (bloom-expensive.c0: 51.15-51.41)")
36 05    # vstore 5           # cmp = string_compare__1(l->data, x, "bloom_contains (bloom-expensive.c0: 51.15-51.41)");
15 05    # vload 5            # cmp
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (cmp == 0) goto <82:then>
A7 00 0D # goto +13           # goto <83:else>
# <82:then>
10 01    # bipush 1           # true
36 03    # vstore 3           # _result = true;
15 03    # vload 3            # _result
B0       # return             # 
A7 00 03 # goto +3            # goto <84:endif>
# <83:else>
# <84:endif>
15 05    # vload 5            # cmp
10 00    # bipush 0           # 0
A3 00 06 # if_icmpgt +6       # if (cmp > 0) goto <85:then>
A7 00 0D # goto +13           # goto <86:else>
# <85:then>
10 00    # bipush 0           # false
36 03    # vstore 3           # _result = false;
15 03    # vload 3            # _result
B0       # return             # 
A7 00 03 # goto +3            # goto <87:endif>
# <86:else>
# <87:endif>
15 04    # vload 4            # l
62 08    # aaddf 8            # &l->next
2F       # amload             # l->next
36 04    # vstore 4           # l = l->next;
A7 00 06 # goto +6            # goto <81:endif>
# <80:else>
A7 00 06 # goto +6            # break
# <81:endif>
A7 FF B0 # goto -80           # goto <76:loop>
# <78:exit>
10 00    # bipush 0           # false
36 03    # vstore 3           # _result = false;
15 03    # vload 3            # _result
B0       # return             # 


#<bloom_add>
03                # number of arguments = 3
06                # number of local variables = 6
01 9C             # code length = 412 bytes
15 00    # vload 0            # B
14 0A 7B # aldc 2683          # s[2683] = "bloom_add (bloom-expensive.c0: 60.13-60.24)"
B8 00 10 # invokestatic 16    # is_bloom(B, "bloom_add (bloom-expensive.c0: 60.13-60.24)")
14 0A A7 # aldc 2727          # s[2727] = "bloom-expensive.c0: 60.4-60.25: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 0A E4 # aldc 2788          # s[2788] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("bloom-expensive.c0: 60.4-60.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert is_bloom(B, "bloom_add (bloom-expensive.c0: 60.13-60.24)") [failure message on stack]
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
01       # aconst_null        # NULL
9F 00 1E # if_cmpeq +30       # if (B->chain == NULL) goto <88:then>
A7 00 03 # goto +3            # goto <91:or>
# <91:or>
15 01    # vload 1            # x
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
62 00    # aaddf 0            # &B->chain->data
2F       # amload             # B->chain->data
14 0A F6 # aldc 2806          # s[2806] = "bloom_add (bloom-expensive.c0: 64.27-64.60)"
B8 00 06 # invokestatic 6     # string_compare__1(x, B->chain->data, "bloom_add (bloom-expensive.c0: 64.27-64.60)")
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (string_compare__1(x, B->chain->data, "bloom_add (bloom-expensive.c0: 64.27-64.60)") < 0) goto <88:then>
A7 00 22 # goto +34           # goto <89:else>
# <88:then>
BB 10    # new 16             # alloc(list)
36 03    # vstore 3           # new = alloc(list);
15 03    # vload 3            # new
62 00    # aaddf 0            # &new->data
15 01    # vload 1            # x
4F       # amstore            # new->data = x;
15 03    # vload 3            # new
62 08    # aaddf 8            # &new->next
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
4F       # amstore            # new->next = B->chain;
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
15 03    # vload 3            # new
4F       # amstore            # B->chain = new;
A7 01 28 # goto +296          # goto <90:endif>
# <89:else>
15 01    # vload 1            # x
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
62 00    # aaddf 0            # &B->chain->data
2F       # amload             # B->chain->data
14 0B 22 # aldc 2850          # s[2850] = "bloom_add (bloom-expensive.c0: 70.14-70.47)"
B8 00 06 # invokestatic 6     # string_compare__1(x, B->chain->data, "bloom_add (bloom-expensive.c0: 70.14-70.47)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (string_compare__1(x, B->chain->data, "bloom_add (bloom-expensive.c0: 70.14-70.47)") == 0) goto <92:then>
A7 00 23 # goto +35           # goto <93:else>
# <92:then>
15 00    # vload 0            # B
14 0B 4E # aldc 2894          # s[2894] = "bloom_add (bloom-expensive.c0: 61.12-61.23)"
B8 00 10 # invokestatic 16    # is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)")
14 0B 7A # aldc 2938          # s[2938] = "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
CF       # assert             # assert is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)") [failure message on stack]
15 00    # vload 0            # B
15 01    # vload 1            # x
14 0B B5 # aldc 2997          # s[2997] = "bloom_add (bloom-expensive.c0: 62.12-62.32)"
B8 00 12 # invokestatic 18    # bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)")
14 0B E1 # aldc 3041          # s[3041] = "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
CF       # assert             # assert bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)") [failure message on stack]
10 00    # bipush 0           # dummy return value
B0       # return             # 
A7 00 F0 # goto +240          # goto <94:endif>
# <93:else>
15 00    # vload 0            # B
62 00    # aaddf 0            # &B->chain
2F       # amload             # B->chain
36 03    # vstore 3           # l = B->chain;
# <95:loop>
A7 00 03 # goto +3            # goto <96:body>
# <96:body>
15 03    # vload 3            # l
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (l != NULL) goto <98:cond_true>
A7 00 08 # goto +8            # goto <99:cond_false>
# <98:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <100:cond_end>
# <99:cond_false>
10 00    # bipush 0           # false
# <100:cond_end>
14 0C 1C # aldc 3100          # s[3100] = "bloom-expensive.c0: 76.8-76.33: @loop_invariant annotation failed"
CF       # assert             # assert (l != NULL) [failure message on stack]
15 01    # vload 1            # x
15 03    # vload 3            # l
62 00    # aaddf 0            # &l->data
2F       # amload             # l->data
14 0C 5E # aldc 3166          # s[3166] = "bloom_add (bloom-expensive.c0: 77.23-77.49)"
B8 00 06 # invokestatic 6     # string_compare__1(x, l->data, "bloom_add (bloom-expensive.c0: 77.23-77.49)")
10 00    # bipush 0           # 0
A3 00 06 # if_icmpgt +6       # if (string_compare__1(x, l->data, "bloom_add (bloom-expensive.c0: 77.23-77.49)") > 0) goto <101:cond_true>
A7 00 08 # goto +8            # goto <102:cond_false>
# <101:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <103:cond_end>
# <102:cond_false>
10 00    # bipush 0           # false
# <103:cond_end>
14 0C 8A # aldc 3210          # s[3210] = "bloom-expensive.c0: 77.8-77.54: @loop_invariant annotation failed"
CF       # assert             # assert (string_compare__1(x, l->data, "bloom_add (bloom-expensive.c0: 77.23-77.49)") > 0) [failure message on stack]
15 03    # vload 3            # l
62 08    # aaddf 8            # &l->next
2F       # amload             # l->next
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (l->next != NULL) goto <104:then>
A7 00 8F # goto +143          # goto <105:else>
# <104:then>
15 01    # vload 1            # x
15 03    # vload 3            # l
62 08    # aaddf 8            # &l->next
2F       # amload             # l->next
62 00    # aaddf 0            # &l->next->data
2F       # amload             # l->next->data
14 0C CC # aldc 3276          # s[3276] = "bloom_add (bloom-expensive.c0: 79.17-79.49)"
B8 00 06 # invokestatic 6     # string_compare__1(x, l->next->data, "bloom_add (bloom-expensive.c0: 79.17-79.49)")
36 04    # vstore 4           # cmp = string_compare__1(x, l->next->data, "bloom_add (bloom-expensive.c0: 79.17-79.49)");
15 04    # vload 4            # cmp
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (cmp == 0) goto <107:then>
A7 00 23 # goto +35           # goto <108:else>
# <107:then>
15 00    # vload 0            # B
14 0C F8 # aldc 3320          # s[3320] = "bloom_add (bloom-expensive.c0: 61.12-61.23)"
B8 00 10 # invokestatic 16    # is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)")
14 0D 24 # aldc 3364          # s[3364] = "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
CF       # assert             # assert is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)") [failure message on stack]
15 00    # vload 0            # B
15 01    # vload 1            # x
14 0D 5F # aldc 3423          # s[3423] = "bloom_add (bloom-expensive.c0: 62.12-62.32)"
B8 00 12 # invokestatic 18    # bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)")
14 0D 8B # aldc 3467          # s[3467] = "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
CF       # assert             # assert bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)") [failure message on stack]
10 00    # bipush 0           # dummy return value
B0       # return             # 
A7 00 03 # goto +3            # goto <109:endif>
# <108:else>
# <109:endif>
15 04    # vload 4            # cmp
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (cmp < 0) goto <110:then>
A7 00 3F # goto +63           # goto <111:else>
# <110:then>
BB 10    # new 16             # alloc(list)
36 05    # vstore 5           # new = alloc(list);
15 05    # vload 5            # new
62 00    # aaddf 0            # &new->data
15 01    # vload 1            # x
4F       # amstore            # new->data = x;
15 05    # vload 5            # new
62 08    # aaddf 8            # &new->next
15 03    # vload 3            # l
62 08    # aaddf 8            # &l->next
2F       # amload             # l->next
4F       # amstore            # new->next = l->next;
15 03    # vload 3            # l
62 08    # aaddf 8            # &l->next
15 05    # vload 5            # new
4F       # amstore            # l->next = new;
15 00    # vload 0            # B
14 0D C6 # aldc 3526          # s[3526] = "bloom_add (bloom-expensive.c0: 61.12-61.23)"
B8 00 10 # invokestatic 16    # is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)")
14 0D F2 # aldc 3570          # s[3570] = "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
CF       # assert             # assert is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)") [failure message on stack]
15 00    # vload 0            # B
15 01    # vload 1            # x
14 0E 2D # aldc 3629          # s[3629] = "bloom_add (bloom-expensive.c0: 62.12-62.32)"
B8 00 12 # invokestatic 18    # bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)")
14 0E 59 # aldc 3673          # s[3673] = "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
CF       # assert             # assert bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)") [failure message on stack]
10 00    # bipush 0           # dummy return value
B0       # return             # 
A7 00 03 # goto +3            # goto <112:endif>
# <111:else>
# <112:endif>
15 03    # vload 3            # l
62 08    # aaddf 8            # &l->next
2F       # amload             # l->next
36 03    # vstore 3           # l = l->next;
A7 00 06 # goto +6            # goto <106:endif>
# <105:else>
A7 00 06 # goto +6            # break
# <106:endif>
A7 FF 2E # goto -210          # goto <95:loop>
# <97:exit>
15 03    # vload 3            # l
62 08    # aaddf 8            # &l->next
BB 10    # new 16             # alloc(list)
4F       # amstore            # l->next = alloc(list);
15 03    # vload 3            # l
62 08    # aaddf 8            # &l->next
2F       # amload             # l->next
62 00    # aaddf 0            # &l->next->data
15 01    # vload 1            # x
4F       # amstore            # l->next->data = x;
# <94:endif>
# <90:endif>
15 00    # vload 0            # B
14 0E 94 # aldc 3732          # s[3732] = "bloom_add (bloom-expensive.c0: 61.12-61.23)"
B8 00 10 # invokestatic 16    # is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)")
14 0E C0 # aldc 3776          # s[3776] = "bloom-expensive.c0: 61.4-61.24: @ensures annotation failed"
CF       # assert             # assert is_bloom(B, "bloom_add (bloom-expensive.c0: 61.12-61.23)") [failure message on stack]
15 00    # vload 0            # B
15 01    # vload 1            # x
14 0E FB # aldc 3835          # s[3835] = "bloom_add (bloom-expensive.c0: 62.12-62.32)"
B8 00 12 # invokestatic 18    # bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)")
14 0F 27 # aldc 3879          # s[3879] = "bloom-expensive.c0: 62.4-62.33: @ensures annotation failed"
CF       # assert             # assert bloom_contains(B, x, "bloom_add (bloom-expensive.c0: 62.12-62.32)") [failure message on stack]
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<bloom_new__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 41             # code length = 65 bytes
10 00    # bipush 0           # 0
15 00    # vload 0            # table_size
A1 00 06 # if_icmplt +6       # if (0 < table_size) goto <113:cond_true>
A7 00 08 # goto +8            # goto <114:cond_false>
# <113:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <115:cond_end>
# <114:cond_false>
10 00    # bipush 0           # false
# <115:cond_end>
14 0F 62 # aldc 3938          # s[3938] = "bloom-expensive.c0: 108.6-108.30: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 0F A1 # aldc 4001          # s[4001] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("bloom-expensive.c0: 108.6-108.30: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (0 < table_size) [failure message on stack]
15 00    # vload 0            # table_size
14 0F B3 # aldc 4019          # s[4019] = "bloom_new__1 (bloom-expensive.c0: 107.1-109.36)"
B8 00 11 # invokestatic 17    # bloom_new(table_size, "bloom_new__1 (bloom-expensive.c0: 107.1-109.36)")
36 02    # vstore 2           # _result = bloom_new(table_size, "bloom_new__1 (bloom-expensive.c0: 107.1-109.36)");
15 02    # vload 2            # _result
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (_result != NULL) goto <116:cond_true>
A7 00 08 # goto +8            # goto <117:cond_false>
# <116:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <118:cond_end>
# <117:cond_false>
10 00    # bipush 0           # false
# <118:cond_end>
14 0F E3 # aldc 4067          # s[4067] = "bloom-expensive.c0: 109.6-109.30: @ensures annotation failed"
CF       # assert             # assert (_result != NULL) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<bloom_contains__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 2E             # code length = 46 bytes
15 00    # vload 0            # B
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (B != NULL) goto <119:cond_true>
A7 00 08 # goto +8            # goto <120:cond_false>
# <119:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <121:cond_end>
# <120:cond_false>
10 00    # bipush 0           # false
# <121:cond_end>
14 10 20 # aldc 4128          # s[4128] = "bloom-expensive.c0: 112.6-112.25: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 10 5F # aldc 4191          # s[4191] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("bloom-expensive.c0: 112.6-112.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (B != NULL) [failure message on stack]
15 00    # vload 0            # B
15 01    # vload 1            # x
14 10 71 # aldc 4209          # s[4209] = "bloom_contains__1 (bloom-expensive.c0: 111.1-112.31)"
B8 00 12 # invokestatic 18    # bloom_contains(B, x, "bloom_contains__1 (bloom-expensive.c0: 111.1-112.31)")
36 03    # vstore 3           # _result = bloom_contains(B, x, "bloom_contains__1 (bloom-expensive.c0: 111.1-112.31)");
15 03    # vload 3            # _result
B0       # return             # 


#<bloom_add__1>
03                # number of arguments = 3
03                # number of local variables = 3
00 4C             # code length = 76 bytes
15 00    # vload 0            # B
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (B != NULL) goto <122:cond_true>
A7 00 08 # goto +8            # goto <123:cond_false>
# <122:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <124:cond_end>
# <123:cond_false>
10 00    # bipush 0           # false
# <124:cond_end>
14 10 A6 # aldc 4262          # s[4262] = "bloom-expensive.c0: 115.6-115.25: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 10 E5 # aldc 4325          # s[4325] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("bloom-expensive.c0: 115.6-115.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (B != NULL) [failure message on stack]
15 00    # vload 0            # B
15 01    # vload 1            # x
14 10 F7 # aldc 4343          # s[4343] = "bloom_add__1 (bloom-expensive.c0: 114.1-116.41)"
B8 00 13 # invokestatic 19    # bloom_add(B, x, "bloom_add__1 (bloom-expensive.c0: 114.1-116.41)")
57       # pop                # (ignore result)
15 00    # vload 0            # B
15 01    # vload 1            # x
14 11 27 # aldc 4391          # s[4391] = "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, x, "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)")
14 11 58 # aldc 4440          # s[4440] = "bloom-expensive.c0: 116.6-116.35: @ensures annotation failed"
CF       # assert             # assert bloom_contains__1(B, x, "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)") [failure message on stack]
10 00    # bipush 0           # dummy return value
B0       # return             # 
15 00    # vload 0            # B
15 01    # vload 1            # x
14 11 95 # aldc 4501          # s[4501] = "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)"
B8 00 15 # invokestatic 21    # bloom_contains__1(B, x, "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)")
14 11 C6 # aldc 4550          # s[4550] = "bloom-expensive.c0: 116.6-116.35: @ensures annotation failed"
CF       # assert             # assert bloom_contains__1(B, x, "bloom_add__1 (bloom-expensive.c0: 116.14-116.34)") [failure message on stack]
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<init_rand>
02                # number of arguments = 2
04                # number of local variables = 4
00 12             # code length = 18 bytes
BB 04    # new 4              # alloc(struct rand)
36 03    # vstore 3           # gen = alloc(struct rand);
15 03    # vload 3            # gen
62 00    # aaddf 0            # &gen->seed
15 00    # vload 0            # seed
4E       # imstore            # gen->seed = seed;
15 03    # vload 3            # gen
36 02    # vstore 2           # _result = gen;
15 02    # vload 2            # _result
B0       # return             # 


#<init_rand__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 41             # code length = 65 bytes
15 00    # vload 0            # seed
10 00    # bipush 0           # 0
A0 00 06 # if_cmpne +6        # if (seed != 0) goto <125:cond_true>
A7 00 08 # goto +8            # goto <126:cond_false>
# <125:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <127:cond_end>
# <126:cond_false>
10 00    # bipush 0           # false
# <127:cond_end>
14 12 03 # aldc 4611          # s[4611] = "/afs/andrew/course/15/122/lib/rand.h0: 12.6-12.25: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 12 53 # aldc 4691          # s[4691] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/rand.h0: 12.6-12.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (seed != 0) [failure message on stack]
15 00    # vload 0            # seed
14 12 65 # aldc 4709          # s[4709] = "init_rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 11.1-13.36)"
B8 00 17 # invokestatic 23    # init_rand(seed, "init_rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 11.1-13.36)")
36 02    # vstore 2           # _result = init_rand(seed, "init_rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 11.1-13.36)");
15 02    # vload 2            # _result
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (_result != NULL) goto <128:cond_true>
A7 00 08 # goto +8            # goto <129:cond_false>
# <128:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <130:cond_end>
# <129:cond_false>
10 00    # bipush 0           # false
# <130:cond_end>
14 12 A6 # aldc 4774          # s[4774] = "/afs/andrew/course/15/122/lib/rand.h0: 13.6-13.30: @ensures annotation failed"
CF       # assert             # assert (_result != NULL) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<rand>
02                # number of arguments = 2
03                # number of local variables = 3
00 1C             # code length = 28 bytes
15 00    # vload 0            # gen
62 00    # aaddf 0            # &gen->seed
15 00    # vload 0            # gen
62 00    # aaddf 0            # &gen->seed
2E       # imload             # gen->seed
13 00 00 # ildc 0             # c[0] = 1664525
68       # imul               # (gen->seed * 1664525)
13 00 01 # ildc 1             # c[1] = 1013904223
60       # iadd               # ((gen->seed * 1664525) + 1013904223)
4E       # imstore            # gen->seed = ((gen->seed * 1664525) + 1013904223);
15 00    # vload 0            # gen
62 00    # aaddf 0            # &gen->seed
2E       # imload             # gen->seed
36 02    # vstore 2           # _result = gen->seed;
15 02    # vload 2            # _result
B0       # return             # 


#<rand__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 2C             # code length = 44 bytes
15 00    # vload 0            # gen
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (gen != NULL) goto <131:cond_true>
A7 00 08 # goto +8            # goto <132:cond_false>
# <131:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <133:cond_end>
# <132:cond_false>
10 00    # bipush 0           # false
# <133:cond_end>
14 12 F4 # aldc 4852          # s[4852] = "/afs/andrew/course/15/122/lib/rand.h0: 16.6-16.27: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 13 44 # aldc 4932          # s[4932] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/rand.h0: 16.6-16.27: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (gen != NULL) [failure message on stack]
15 00    # vload 0            # gen
14 13 56 # aldc 4950          # s[4950] = "rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 15.1-16.33)"
B8 00 19 # invokestatic 25    # rand(gen, "rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 15.1-16.33)")
36 02    # vstore 2           # _result = rand(gen, "rand__1 (/afs/andrew/course/15/122/lib/rand.h0: 15.1-16.33)");
15 02    # vload 2            # _result
B0       # return             # 


#<int_size>
01                # number of arguments = 1
02                # number of local variables = 2
00 07             # code length = 7 bytes
10 04    # bipush 4           # 4
36 01    # vstore 1           # _result = 4;
15 01    # vload 1            # _result
B0       # return             # 


#<int_size__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 20             # code length = 32 bytes
14 13 92 # aldc 5010          # s[5010] = "int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)"
B8 00 1B # invokestatic 27    # int_size("int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)")
36 01    # vstore 1           # _result = int_size("int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)");
15 01    # vload 1            # _result
10 04    # bipush 4           # 4
9F 00 06 # if_cmpeq +6        # if (_result == 4) goto <134:cond_true>
A7 00 08 # goto +8            # goto <135:cond_false>
# <134:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <136:cond_end>
# <135:cond_false>
10 00    # bipush 0           # false
# <136:cond_end>
14 13 D0 # aldc 5072          # s[5072] = "/afs/andrew/course/15/122/lib/util.h0: 9.6-9.27: @ensures annotation failed"
CF       # assert             # assert (_result == 4) [failure message on stack]
15 01    # vload 1            # _result
B0       # return             # 


#<int_max>
01                # number of arguments = 1
02                # number of local variables = 2
00 08             # code length = 8 bytes
13 00 04 # ildc 4             # c[4] = 2147483647
36 01    # vstore 1           # _result = 2147483647;
15 01    # vload 1            # _result
B0       # return             # 


#<int_max__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 21             # code length = 33 bytes
14 14 1C # aldc 5148          # s[5148] = "int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)"
B8 00 1D # invokestatic 29    # int_max("int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)")
36 01    # vstore 1           # _result = int_max("int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)");
15 01    # vload 1            # _result
13 00 02 # ildc 2             # c[2] = 2147483647
9F 00 06 # if_cmpeq +6        # if (_result == 2147483647) goto <137:cond_true>
A7 00 08 # goto +8            # goto <138:cond_false>
# <137:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <139:cond_end>
# <138:cond_false>
10 00    # bipush 0           # false
# <139:cond_end>
14 14 5B # aldc 5211          # s[5211] = "/afs/andrew/course/15/122/lib/util.h0: 11.6-11.36: @ensures annotation failed"
CF       # assert             # assert (_result == 2147483647) [failure message on stack]
15 01    # vload 1            # _result
B0       # return             # 


#<int_min>
01                # number of arguments = 1
02                # number of local variables = 2
00 08             # code length = 8 bytes
13 00 05 # ildc 5             # c[5] = -2147483648
36 01    # vstore 1           # _result = -2147483648;
15 01    # vload 1            # _result
B0       # return             # 


#<int_min__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 21             # code length = 33 bytes
14 14 A9 # aldc 5289          # s[5289] = "int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)"
B8 00 1F # invokestatic 31    # int_min("int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)")
36 01    # vstore 1           # _result = int_min("int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)");
15 01    # vload 1            # _result
13 00 03 # ildc 3             # c[3] = -2147483648
9F 00 06 # if_cmpeq +6        # if (_result == -(-2147483648)) goto <140:cond_true>
A7 00 08 # goto +8            # goto <141:cond_false>
# <140:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <142:cond_end>
# <141:cond_false>
10 00    # bipush 0           # false
# <142:cond_end>
14 14 E8 # aldc 5352          # s[5352] = "/afs/andrew/course/15/122/lib/util.h0: 13.6-13.37: @ensures annotation failed"
CF       # assert             # assert (_result == -(-2147483648)) [failure message on stack]
15 01    # vload 1            # _result
B0       # return             # 


#<abs>
02                # number of arguments = 2
03                # number of local variables = 3
00 52             # code length = 82 bytes
15 00    # vload 0            # x
14 19 91 # aldc 6545          # s[6545] = "abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)"
B8 00 20 # invokestatic 32    # int_min__1("abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)")
A3 00 06 # if_icmpgt +6       # if (x > int_min__1("abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)")) goto <209:cond_true>
A7 00 08 # goto +8            # goto <210:cond_false>
# <209:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <211:cond_end>
# <210:cond_false>
10 00    # bipush 0           # false
# <211:cond_end>
14 19 CA # aldc 6602          # s[6602] = "/afs/andrew/course/15/122/lib/util.c0: 29.4-29.27: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 1A 1A # aldc 6682          # s[6682] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/util.c0: 29.4-29.27: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (x > int_min__1("abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)")) [failure message on stack]
15 00    # vload 0            # x
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (x < 0) goto <212:cond_true>
A7 00 0B # goto +11           # goto <213:cond_false>
# <212:cond_true>
10 00    # bipush 0           # 
15 00    # vload 0            # x
64       # isub               # -(x)
A7 00 05 # goto +5            # goto <214:cond_end>
# <213:cond_false>
15 00    # vload 0            # x
# <214:cond_end>
36 02    # vstore 2           # _result = ((x < 0) ? -(x) : x);
15 02    # vload 2            # _result
10 00    # bipush 0           # 0
A2 00 06 # if_icmpge +6       # if (_result >= 0) goto <215:cond_true>
A7 00 08 # goto +8            # goto <216:cond_false>
# <215:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <217:cond_end>
# <216:cond_false>
10 00    # bipush 0           # false
# <217:cond_end>
14 1A 2C # aldc 6700          # s[6700] = "/afs/andrew/course/15/122/lib/util.c0: 30.4-30.25: @ensures annotation failed"
CF       # assert             # assert (_result >= 0) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<abs__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 6D             # code length = 109 bytes
15 00    # vload 0            # x
14 15 36 # aldc 5430          # s[5430] = "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)"
B8 00 20 # invokestatic 32    # int_min__1("abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)")
A3 00 06 # if_icmpgt +6       # if (x > int_min__1("abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)")) goto <143:cond_true>
A7 00 08 # goto +8            # goto <144:cond_false>
# <143:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <145:cond_end>
# <144:cond_false>
10 00    # bipush 0           # false
# <145:cond_end>
14 15 72 # aldc 5490          # s[5490] = "/afs/andrew/course/15/122/lib/util.h0: 17.6-17.29: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 15 C2 # aldc 5570          # s[5570] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/util.h0: 17.6-17.29: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (x > int_min__1("abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)")) [failure message on stack]
15 00    # vload 0            # x
14 15 D4 # aldc 5588          # s[5588] = "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)"
B8 00 21 # invokestatic 33    # abs(x, "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)")
36 02    # vstore 2           # _result = abs(x, "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)");
15 02    # vload 2            # _result
10 00    # bipush 0           # 0
A2 00 06 # if_icmpge +6       # if (_result >= 0) goto <146:cond_true>
A7 00 08 # goto +8            # goto <147:cond_false>
# <146:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <148:cond_end>
# <147:cond_false>
10 00    # bipush 0           # false
# <148:cond_end>
14 16 0F # aldc 5647          # s[5647] = "/afs/andrew/course/15/122/lib/util.h0: 18.6-18.27: @ensures annotation failed"
CF       # assert             # assert (_result >= 0) [failure message on stack]
15 02    # vload 2            # _result
15 00    # vload 0            # x
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (x < 0) goto <152:cond_true>
A7 00 0B # goto +11           # goto <153:cond_false>
# <152:cond_true>
10 00    # bipush 0           # 
15 00    # vload 0            # x
64       # isub               # -(x)
A7 00 05 # goto +5            # goto <154:cond_end>
# <153:cond_false>
15 00    # vload 0            # x
# <154:cond_end>
9F 00 06 # if_cmpeq +6        # if (_result == ((x < 0) ? -(x) : x)) goto <149:cond_true>
A7 00 08 # goto +8            # goto <150:cond_false>
# <149:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <151:cond_end>
# <150:cond_false>
10 00    # bipush 0           # false
# <151:cond_end>
14 16 5D # aldc 5725          # s[5725] = "/afs/andrew/course/15/122/lib/util.h0: 19.6-19.42: @ensures annotation failed"
CF       # assert             # assert (_result == ((x < 0) ? -(x) : x)) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<max>
03                # number of arguments = 3
04                # number of local variables = 4
00 5E             # code length = 94 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
A3 00 06 # if_icmpgt +6       # if (x > y) goto <179:cond_true>
A7 00 08 # goto +8            # goto <180:cond_false>
# <179:cond_true>
15 00    # vload 0            # x
A7 00 05 # goto +5            # goto <181:cond_end>
# <180:cond_false>
15 01    # vload 1            # y
# <181:cond_end>
36 03    # vstore 3           # _result = ((x > y) ? x : y);
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <182:cond_true>
A7 00 08 # goto +8            # goto <183:cond_false>
# <182:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <184:cond_end>
# <183:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <185:cond_true>
A7 00 08 # goto +8            # goto <186:cond_false>
# <185:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <187:cond_end>
# <186:cond_false>
10 00    # bipush 0           # false
# <187:cond_end>
# <184:cond_end>
14 18 59 # aldc 6233          # s[6233] = "/afs/andrew/course/15/122/lib/util.c0: 13.4-13.41: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A2 00 06 # if_icmpge +6       # if (_result >= x) goto <188:cond_true>
A7 00 17 # goto +23           # goto <189:cond_false>
# <188:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A2 00 06 # if_icmpge +6       # if (_result >= y) goto <191:cond_true>
A7 00 08 # goto +8            # goto <192:cond_false>
# <191:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <193:cond_end>
# <192:cond_false>
10 00    # bipush 0           # false
# <193:cond_end>
A7 00 05 # goto +5            # goto <190:cond_end>
# <189:cond_false>
10 00    # bipush 0           # false
# <190:cond_end>
14 18 A7 # aldc 6311          # s[6311] = "/afs/andrew/course/15/122/lib/util.c0: 14.4-14.41: @ensures annotation failed"
CF       # assert             # assert ((_result >= x) && (_result >= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<max__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 57             # code length = 87 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
14 16 AB # aldc 5803          # s[5803] = "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)"
B8 00 23 # invokestatic 35    # max(x, y, "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)")
36 03    # vstore 3           # _result = max(x, y, "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)");
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <155:cond_true>
A7 00 08 # goto +8            # goto <156:cond_false>
# <155:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <157:cond_end>
# <156:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <158:cond_true>
A7 00 08 # goto +8            # goto <159:cond_false>
# <158:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <160:cond_end>
# <159:cond_false>
10 00    # bipush 0           # false
# <160:cond_end>
# <157:cond_end>
14 16 E6 # aldc 5862          # s[5862] = "/afs/andrew/course/15/122/lib/util.h0: 23.6-23.43: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A2 00 06 # if_icmpge +6       # if (_result >= x) goto <161:cond_true>
A7 00 17 # goto +23           # goto <162:cond_false>
# <161:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A2 00 06 # if_icmpge +6       # if (_result >= y) goto <164:cond_true>
A7 00 08 # goto +8            # goto <165:cond_false>
# <164:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <166:cond_end>
# <165:cond_false>
10 00    # bipush 0           # false
# <166:cond_end>
A7 00 05 # goto +5            # goto <163:cond_end>
# <162:cond_false>
10 00    # bipush 0           # false
# <163:cond_end>
14 17 34 # aldc 5940          # s[5940] = "/afs/andrew/course/15/122/lib/util.h0: 24.6-24.43: @ensures annotation failed"
CF       # assert             # assert ((_result >= x) && (_result >= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<min>
03                # number of arguments = 3
04                # number of local variables = 4
00 5E             # code length = 94 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
A3 00 06 # if_icmpgt +6       # if (x > y) goto <194:cond_true>
A7 00 08 # goto +8            # goto <195:cond_false>
# <194:cond_true>
15 01    # vload 1            # y
A7 00 05 # goto +5            # goto <196:cond_end>
# <195:cond_false>
15 00    # vload 0            # x
# <196:cond_end>
36 03    # vstore 3           # _result = ((x > y) ? y : x);
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <197:cond_true>
A7 00 08 # goto +8            # goto <198:cond_false>
# <197:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <199:cond_end>
# <198:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <200:cond_true>
A7 00 08 # goto +8            # goto <201:cond_false>
# <200:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <202:cond_end>
# <201:cond_false>
10 00    # bipush 0           # false
# <202:cond_end>
# <199:cond_end>
14 18 F5 # aldc 6389          # s[6389] = "/afs/andrew/course/15/122/lib/util.c0: 21.4-21.41: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A4 00 06 # if_icmple +6       # if (_result <= x) goto <203:cond_true>
A7 00 17 # goto +23           # goto <204:cond_false>
# <203:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A4 00 06 # if_icmple +6       # if (_result <= y) goto <206:cond_true>
A7 00 08 # goto +8            # goto <207:cond_false>
# <206:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <208:cond_end>
# <207:cond_false>
10 00    # bipush 0           # false
# <208:cond_end>
A7 00 05 # goto +5            # goto <205:cond_end>
# <204:cond_false>
10 00    # bipush 0           # false
# <205:cond_end>
14 19 43 # aldc 6467          # s[6467] = "/afs/andrew/course/15/122/lib/util.c0: 22.4-22.41: @ensures annotation failed"
CF       # assert             # assert ((_result <= x) && (_result <= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<min__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 57             # code length = 87 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
14 17 82 # aldc 6018          # s[6018] = "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)"
B8 00 25 # invokestatic 37    # min(x, y, "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)")
36 03    # vstore 3           # _result = min(x, y, "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)");
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <167:cond_true>
A7 00 08 # goto +8            # goto <168:cond_false>
# <167:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <169:cond_end>
# <168:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <170:cond_true>
A7 00 08 # goto +8            # goto <171:cond_false>
# <170:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <172:cond_end>
# <171:cond_false>
10 00    # bipush 0           # false
# <172:cond_end>
# <169:cond_end>
14 17 BD # aldc 6077          # s[6077] = "/afs/andrew/course/15/122/lib/util.h0: 28.6-28.43: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A4 00 06 # if_icmple +6       # if (_result <= x) goto <173:cond_true>
A7 00 17 # goto +23           # goto <174:cond_false>
# <173:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A4 00 06 # if_icmple +6       # if (_result <= y) goto <176:cond_true>
A7 00 08 # goto +8            # goto <177:cond_false>
# <176:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <178:cond_end>
# <177:cond_false>
10 00    # bipush 0           # false
# <178:cond_end>
A7 00 05 # goto +5            # goto <175:cond_end>
# <174:cond_false>
10 00    # bipush 0           # false
# <175:cond_end>
14 18 0B # aldc 6155          # s[6155] = "/afs/andrew/course/15/122/lib/util.h0: 29.6-29.43: @ensures annotation failed"
CF       # assert             # assert ((_result <= x) && (_result <= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<int2hex>
02                # number of arguments = 2
06                # number of local variables = 6
00 AE             # code length = 174 bytes
10 02    # bipush 2           # 2
14 1B E0 # aldc 7136          # s[7136] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"
B8 00 1C # invokestatic 28    # int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)")
68       # imul               # (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"))
36 03    # vstore 3           # digits = (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"));
15 03    # vload 3            # digits
10 01    # bipush 1           # 1
60       # iadd               # (digits + 1)
BC 01    # newarray 1         # alloc_array(char, (digits + 1))
36 04    # vstore 4           # s = alloc_array(char, (digits + 1));
15 04    # vload 4            # s
15 03    # vload 3            # digits
63       # aadds              # &s[digits]
10 00    # bipush 0           # '\000'
55       # cmstore            # s[digits] = '\0';
10 00    # bipush 0           # 0
36 05    # vstore 5           # i = 0;
# <232:loop>
A7 00 03 # goto +3            # goto <233:body>
# <233:body>
10 00    # bipush 0           # 0
15 05    # vload 5            # i
A4 00 06 # if_icmple +6       # if (0 <= i) goto <235:cond_true>
A7 00 17 # goto +23           # goto <236:cond_false>
# <235:cond_true>
15 05    # vload 5            # i
15 03    # vload 3            # digits
A4 00 06 # if_icmple +6       # if (i <= digits) goto <238:cond_true>
A7 00 08 # goto +8            # goto <239:cond_false>
# <238:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <240:cond_end>
# <239:cond_false>
10 00    # bipush 0           # false
# <240:cond_end>
A7 00 05 # goto +5            # goto <237:cond_end>
# <236:cond_false>
10 00    # bipush 0           # false
# <237:cond_end>
14 1C 1D # aldc 7197          # s[7197] = "/afs/andrew/course/15/122/lib/util.c0: 55.8-55.45: @loop_invariant annotation failed"
CF       # assert             # assert ((0 <= i) && (i <= digits)) [failure message on stack]
15 05    # vload 5            # i
15 03    # vload 3            # digits
A1 00 06 # if_icmplt +6       # if (i < digits) goto <241:then>
A7 00 2B # goto +43           # goto <242:else>
# <241:then>
15 04    # vload 4            # s
15 03    # vload 3            # digits
15 05    # vload 5            # i
64       # isub               # (digits - i)
10 01    # bipush 1           # 1
64       # isub               # ((digits - i) - 1)
63       # aadds              # &s[((digits - i) - 1)]
15 00    # vload 0            # x
10 0F    # bipush 15          # 15
7E       # iand               # (x & 15)
14 1C 72 # aldc 7282          # s[7282] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)"
B8 00 28 # invokestatic 40    # hexdig2char((x & 15), "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)")
55       # cmstore            # s[((digits - i) - 1)] = hexdig2char((x & 15), "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)");
15 00    # vload 0            # x
10 04    # bipush 4           # 4
7A       # ishr               # (x >> 4)
36 00    # vstore 0           # x = (x >> 4);
15 05    # vload 5            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 05    # vstore 5           # i += 1;
A7 00 06 # goto +6            # goto <243:endif>
# <242:else>
A7 00 06 # goto +6            # break
# <243:endif>
A7 FF A4 # goto -92           # goto <232:loop>
# <234:exit>
15 04    # vload 4            # s
14 1C AF # aldc 7343          # s[7343] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)"
B8 00 0D # invokestatic 13    # string_from_chararray__1(s, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)")
36 02    # vstore 2           # _result = string_from_chararray__1(s, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)");
15 02    # vload 2            # _result
14 1C EC # aldc 7404          # s[7404] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)"
B8 00 01 # invokestatic 1     # string_length__1(_result, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)")
10 02    # bipush 2           # 2
14 1D 29 # aldc 7465          # s[7465] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"
B8 00 1C # invokestatic 28    # int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)")
68       # imul               # (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"))
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)") == (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"))) goto <244:cond_true>
A7 00 08 # goto +8            # goto <245:cond_false>
# <244:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <246:cond_end>
# <245:cond_false>
10 00    # bipush 0           # false
# <246:cond_end>
14 1D 66 # aldc 7526          # s[7526] = "/afs/andrew/course/15/122/lib/util.c0: 49.4-49.51: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)") == (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"))) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<hexdig2char>
02                # number of arguments = 2
03                # number of local variables = 3
00 93             # code length = 147 bytes
10 00    # bipush 0           # 0
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (0 <= d) goto <218:cond_true>
A7 00 17 # goto +23           # goto <219:cond_false>
# <218:cond_true>
15 00    # vload 0            # d
10 10    # bipush 16          # 16
A1 00 06 # if_icmplt +6       # if (d < 16) goto <221:cond_true>
A7 00 08 # goto +8            # goto <222:cond_false>
# <221:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <223:cond_end>
# <222:cond_false>
10 00    # bipush 0           # false
# <223:cond_end>
A7 00 05 # goto +5            # goto <220:cond_end>
# <219:cond_false>
10 00    # bipush 0           # false
# <220:cond_end>
14 1A 7A # aldc 6778          # s[6778] = "/afs/andrew/course/15/122/lib/util.c0: 37.4-37.30: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 1A CA # aldc 6858          # s[6858] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/util.c0: 37.4-37.30: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= d) && (d < 16)) [failure message on stack]
10 00    # bipush 0           # 0
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (0 <= d) goto <227:and>
A7 00 26 # goto +38           # goto <225:else>
# <227:and>
15 00    # vload 0            # d
10 0A    # bipush 10          # 10
A1 00 06 # if_icmplt +6       # if (d < 10) goto <224:then>
A7 00 1C # goto +28           # goto <225:else>
# <224:then>
10 30    # bipush 48          # '0'
14 1A DC # aldc 6876          # s[6876] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)"
B8 00 0E # invokestatic 14    # char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)")
15 00    # vload 0            # d
60       # iadd               # (char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)") + d)
14 1B 1D # aldc 6941          # s[6941] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)"
B8 00 0F # invokestatic 15    # char_chr__1((char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)") + d), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)")
36 02    # vstore 2           # _result = char_chr__1((char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)") + d), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)");
15 02    # vload 2            # _result
B0       # return             # 
A7 00 3A # goto +58           # goto <226:endif>
# <225:else>
10 0A    # bipush 10          # 10
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (10 <= d) goto <231:and>
A7 00 29 # goto +41           # goto <229:else>
# <231:and>
15 00    # vload 0            # d
10 10    # bipush 16          # 16
A1 00 06 # if_icmplt +6       # if (d < 16) goto <228:then>
A7 00 1F # goto +31           # goto <229:else>
# <228:then>
10 41    # bipush 65          # 'A'
14 1B 5E # aldc 7006          # s[7006] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)"
B8 00 0E # invokestatic 14    # char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)")
15 00    # vload 0            # d
10 0A    # bipush 10          # 10
64       # isub               # (d - 10)
60       # iadd               # (char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)") + (d - 10))
14 1B 9F # aldc 7071          # s[7071] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)"
B8 00 0F # invokestatic 15    # char_chr__1((char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)") + (d - 10)), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)")
36 02    # vstore 2           # _result = char_chr__1((char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)") + (d - 10)), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)");
15 02    # vload 2            # _result
B0       # return             # 
A7 00 0A # goto +10           # goto <230:endif>
# <229:else>
10 3F    # bipush 63          # '\?'
36 02    # vstore 2           # _result = '?';
15 02    # vload 2            # _result
B0       # return             # 
# <230:endif>
# <226:endif>


#<print__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # s
B7 00 0F # invokenative 15    # print(s)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<println__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # s
B7 00 10 # invokenative 16    # println(s)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<printint__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # i
B7 00 11 # invokenative 17    # printint(i)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<printbool__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # b
B7 00 12 # invokenative 18    # printbool(b)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<printchar__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # c
B7 00 13 # invokenative 19    # printchar(c)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<flush__1>
01                # number of arguments = 1
01                # number of local variables = 1
00 0A             # code length = 10 bytes
B7 00 14 # invokenative 20    # flush()
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<eof__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 08             # code length = 8 bytes
B7 00 15 # invokenative 21    # eof()
36 01    # vstore 1           # _result = eof();
15 01    # vload 1            # _result
B0       # return             # 


#<readline__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 20             # code length = 32 bytes
14 1D B4 # aldc 7604          # s[7604] = "readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)"
B8 00 2F # invokestatic 47    # eof__1("readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)")
10 01    # bipush 1           # 
82       # ixor               # !(eof__1("readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)"))
14 1D F6 # aldc 7670          # s[7670] = "/afs/andrew/course/15/122/lib/conio.h0: 14.6-14.22: @requires annotation failed\n"
15 00    # vload 0            # _caller
14 1E 47 # aldc 7751          # s[7751] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/conio.h0: 14.6-14.22: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert !(eof__1("readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)")) [failure message on stack]
B7 00 16 # invokenative 22    # readline()
36 01    # vstore 1           # _result = readline();
15 01    # vload 1            # _result
B0       # return             # 


#<parse_bool__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # s
B7 00 17 # invokenative 23    # parse_bool(s)
36 02    # vstore 2           # _result = parse_bool(s);
15 02    # vload 2            # _result
B0       # return             # 


#<parse_int__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 3B             # code length = 59 bytes
10 02    # bipush 2           # 2
15 01    # vload 1            # base
A4 00 06 # if_icmple +6       # if (2 <= base) goto <247:cond_true>
A7 00 17 # goto +23           # goto <248:cond_false>
# <247:cond_true>
15 01    # vload 1            # base
10 24    # bipush 36          # 36
A4 00 06 # if_icmple +6       # if (base <= 36) goto <250:cond_true>
A7 00 08 # goto +8            # goto <251:cond_false>
# <250:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <252:cond_end>
# <251:cond_false>
10 00    # bipush 0           # false
# <252:cond_end>
A7 00 05 # goto +5            # goto <249:cond_end>
# <248:cond_false>
10 00    # bipush 0           # false
# <249:cond_end>
14 1E 59 # aldc 7769          # s[7769] = "/afs/andrew/course/15/122/lib/parse.h0: 13.6-13.39: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 1E AA # aldc 7850          # s[7850] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/parse.h0: 13.6-13.39: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((2 <= base) && (base <= 36)) [failure message on stack]
15 00    # vload 0            # s
15 01    # vload 1            # base
B7 00 18 # invokenative 24    # parse_int(s, base)
36 03    # vstore 3           # _result = parse_int(s, base);
15 03    # vload 3            # _result
B0       # return             # 


#<num_tokens__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # s
B7 00 19 # invokenative 25    # num_tokens(s)
36 02    # vstore 2           # _result = num_tokens(s);
15 02    # vload 2            # _result
B0       # return             # 


#<int_tokens__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 3B             # code length = 59 bytes
10 02    # bipush 2           # 2
15 01    # vload 1            # base
A4 00 06 # if_icmple +6       # if (2 <= base) goto <253:cond_true>
A7 00 17 # goto +23           # goto <254:cond_false>
# <253:cond_true>
15 01    # vload 1            # base
10 24    # bipush 36          # 36
A4 00 06 # if_icmple +6       # if (base <= 36) goto <256:cond_true>
A7 00 08 # goto +8            # goto <257:cond_false>
# <256:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <258:cond_end>
# <257:cond_false>
10 00    # bipush 0           # false
# <258:cond_end>
A7 00 05 # goto +5            # goto <255:cond_end>
# <254:cond_false>
10 00    # bipush 0           # false
# <255:cond_end>
14 1E BC # aldc 7868          # s[7868] = "/afs/andrew/course/15/122/lib/parse.h0: 20.6-20.39: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 1F 0D # aldc 7949          # s[7949] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/parse.h0: 20.6-20.39: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((2 <= base) && (base <= 36)) [failure message on stack]
15 00    # vload 0            # s
15 01    # vload 1            # base
B7 00 1A # invokenative 26    # int_tokens(s, base)
36 03    # vstore 3           # _result = int_tokens(s, base);
15 03    # vload 3            # _result
B0       # return             # 


#<parse_tokens__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 26             # code length = 38 bytes
15 00    # vload 0            # s
B7 00 1B # invokenative 27    # parse_tokens(s)
36 02    # vstore 2           # _result = parse_tokens(s);
15 02    # vload 2            # _result
BE       # arraylength        # \length(_result)
15 00    # vload 0            # s
14 1F 1F # aldc 7967          # s[7967] = "parse_tokens__1 (/afs/andrew/course/15/122/lib/parse.h0: 23.34-23.47)"
B8 00 33 # invokestatic 51    # num_tokens__1(s, "parse_tokens__1 (/afs/andrew/course/15/122/lib/parse.h0: 23.34-23.47)")
9F 00 06 # if_cmpeq +6        # if (\length(_result) == num_tokens__1(s, "parse_tokens__1 (/afs/andrew/course/15/122/lib/parse.h0: 23.34-23.47)")) goto <259:cond_true>
A7 00 08 # goto +8            # goto <260:cond_false>
# <259:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <261:cond_end>
# <260:cond_false>
10 00    # bipush 0           # false
# <261:cond_end>
14 1F 65 # aldc 8037          # s[8037] = "/afs/andrew/course/15/122/lib/parse.h0: 23.6-23.48: @ensures annotation failed"
CF       # assert             # assert (\length(_result) == num_tokens__1(s, "parse_tokens__1 (/afs/andrew/course/15/122/lib/parse.h0: 23.34-23.47)")) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<parse_ints__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 41             # code length = 65 bytes
15 00    # vload 0            # s
15 01    # vload 1            # base
14 1F B4 # aldc 8116          # s[8116] = "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 27.15-27.34)"
B8 00 34 # invokestatic 52    # int_tokens__1(s, base, "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 27.15-27.34)")
14 1F F8 # aldc 8184          # s[8184] = "/afs/andrew/course/15/122/lib/parse.h0: 27.6-27.35: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 20 49 # aldc 8265          # s[8265] = ": caller location"
B7 00 01 # invokenative 1     # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1     # string_join("/afs/andrew/course/15/122/lib/parse.h0: 27.6-27.35: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert int_tokens__1(s, base, "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 27.15-27.34)") [failure message on stack]
15 00    # vload 0            # s
15 01    # vload 1            # base
B7 00 1C # invokenative 28    # parse_ints(s, base)
36 03    # vstore 3           # _result = parse_ints(s, base);
15 03    # vload 3            # _result
BE       # arraylength        # \length(_result)
15 00    # vload 0            # s
14 20 5B # aldc 8283          # s[8283] = "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 28.34-28.47)"
B8 00 33 # invokestatic 51    # num_tokens__1(s, "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 28.34-28.47)")
9F 00 06 # if_cmpeq +6        # if (\length(_result) == num_tokens__1(s, "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 28.34-28.47)")) goto <262:cond_true>
A7 00 08 # goto +8            # goto <263:cond_false>
# <262:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <264:cond_end>
# <263:cond_false>
10 00    # bipush 0           # false
# <264:cond_end>
14 20 9F # aldc 8351          # s[8351] = "/afs/andrew/course/15/122/lib/parse.h0: 28.6-28.48: @ensures annotation failed"
CF       # assert             # assert (\length(_result) == num_tokens__1(s, "parse_ints__1 (/afs/andrew/course/15/122/lib/parse.h0: 28.34-28.47)")) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 

00 1D             # native count
# native pool
00 01 00 65       # string_length
00 02 00 64       # string_join
00 02 00 5D       # string_charat
00 03 00 66       # string_sub
00 02 00 5F       # string_equal
00 02 00 5E       # string_compare
00 01 00 63       # string_fromint
00 01 00 61       # string_frombool
00 01 00 62       # string_fromchar
00 01 00 69       # string_tolower
00 02 00 67       # string_terminated
00 01 00 68       # string_to_chararray
00 01 00 60       # string_from_chararray
00 01 00 5C       # char_ord
00 01 00 5B       # char_chr
00 01 00 06       # print
00 01 00 0A       # println
00 01 00 09       # printint
00 01 00 07       # printbool
00 01 00 08       # printchar
00 00 00 05       # flush
00 00 00 04       # eof
00 00 00 0B       # readline
00 01 00 57       # parse_bool
00 02 00 58       # parse_int
00 01 00 56       # num_tokens
00 02 00 55       # int_tokens
00 01 00 5A       # parse_tokens
00 02 00 59       # parse_ints

