C0 C0 FF EE       # magic number
00 17             # version 11, arch = 1 (64 bits)

00 36             # int pool count
# int pool
7F FF FF FF
80 00 00 00
7F FF FF FF
80 00 00 00
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 F0
00 00 00 F0
00 00 00 F0
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 A6
00 00 00 B5
00 00 00 C4
00 00 00 D0
00 00 00 A6
00 00 00 B5
00 00 00 C4
00 00 00 D0
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FE
00 00 00 CD
00 00 00 EF
00 00 00 CC
00 00 00 EC
00 00 00 CD
00 00 00 EF
00 00 00 C8
00 00 00 E8
00 00 00 CD
00 00 00 EF
00 00 00 C0
00 00 00 E0
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 C0
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 80
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF
00 00 00 FF

2D 15             # string pool total size
# string pool
69 6E 74 5F 73 69 7A 65 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 38 2E 31 2D 39 2E 33 33 29 00  # "int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 39 2E 36 2D 39 2E 32 37 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 9.6-9.27: @ensures annotation failed"
69 6E 74 5F 6D 61 78 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 30 2E 31 2D 31 31 2E 34 32 29 00  # "int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 31 2E 36 2D 31 31 2E 33 36 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 11.6-11.36: @ensures annotation failed"
69 6E 74 5F 6D 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 32 2E 31 2D 31 33 2E 34 33 29 00  # "int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 33 2E 36 2D 31 33 2E 33 37 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 13.6-13.37: @ensures annotation failed"
61 62 73 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 37 2E 31 39 2D 31 37 2E 32 38 29 00  # "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 37 2E 36 2D 31 37 2E 32 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/util.h0: 17.6-17.29: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
61 62 73 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 36 2E 31 2D 31 39 2E 34 38 29 00  # "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 38 2E 36 2D 31 38 2E 32 37 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 18.6-18.27: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 31 39 2E 36 2D 31 39 2E 34 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 19.6-19.42: @ensures annotation failed"
6D 61 78 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 32 2E 31 2D 32 34 2E 34 39 29 00  # "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 33 2E 36 2D 32 33 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 23.6-23.43: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 34 2E 36 2D 32 34 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 24.6-24.43: @ensures annotation failed"
6D 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 37 2E 31 2D 32 39 2E 34 39 29 00  # "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 38 2E 36 2D 32 38 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 28.6-28.43: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 68 30 3A 20 32 39 2E 36 2D 32 39 2E 34 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.h0: 29.6-29.43: @ensures annotation failed"
73 74 72 69 6E 67 5F 63 68 61 72 61 74 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 31 39 2E 33 33 2D 31 39 2E 34 39 29 00  # "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 31 39 2E 36 2D 31 39 2E 35 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 19.6-19.50: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 6A 6F 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 33 2E 31 34 2D 32 33 2E 33 36 29 00  # "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)"
73 74 72 69 6E 67 5F 6A 6F 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 34 2E 31 39 2D 32 34 2E 33 35 29 00  # "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)"
73 74 72 69 6E 67 5F 6A 6F 69 6E 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 34 2E 33 38 2D 32 34 2E 35 34 29 00  # "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 32 33 2E 36 2D 32 34 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 23.6-24.55: @ensures annotation failed"
73 74 72 69 6E 67 5F 73 75 62 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 31 2E 35 32 2D 33 31 2E 36 38 29 00  # "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 31 2E 36 2D 33 31 2E 36 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 31.6-31.69: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 73 75 62 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 32 2E 31 34 2D 33 32 2E 33 36 29 00  # "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 32 2E 36 2D 33 32 2E 35 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 32.6-32.52: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 33 37 2E 36 2D 33 37 2E 34 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 37.6-37.44: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 33 2E 36 2D 34 33 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 43.6-43.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 66 72 6F 6D 63 68 61 72 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 34 2E 31 34 2D 34 34 2E 33 36 29 00  # "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 34 2E 36 2D 34 34 2E 34 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 44.6-44.42: @ensures annotation failed"
73 74 72 69 6E 67 5F 66 72 6F 6D 63 68 61 72 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 35 2E 31 34 2D 34 35 2E 33 39 29 00  # "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 34 35 2E 36 2D 34 35 2E 34 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 45.6-45.45: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 32 2E 36 2D 35 32 2E 34 31 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 52.6-52.41: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 74 6F 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 36 2E 33 34 2D 35 36 2E 35 30 29 00  # "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 36 2E 36 2D 35 36 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 56.6-56.55: @ensures annotation failed"
73 74 72 69 6E 67 5F 74 6F 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 37 2E 34 31 2D 35 37 2E 35 37 29 00  # "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)"
73 74 72 69 6E 67 5F 74 6F 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 37 2E 31 34 2D 35 37 2E 36 32 29 00  # "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 35 37 2E 36 2D 35 37 2E 36 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 57.6-57.63: @ensures annotation failed"
73 74 72 69 6E 67 5F 66 72 6F 6D 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 32 2E 31 35 2D 36 32 2E 34 37 29 00  # "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 32 2E 36 2D 36 32 2E 34 38 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 62.6-62.48: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
73 74 72 69 6E 67 5F 66 72 6F 6D 5F 63 68 61 72 61 72 72 61 79 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 33 2E 31 34 2D 36 33 2E 33 36 29 00  # "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 33 2E 36 2D 36 33 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 63.6-63.55: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 37 2E 36 2D 36 37 2E 34 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0: 67.6-67.45: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 20 36 39 2E 36 2D 36 39 2E 33 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0: 69.6-69.34: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 31 33 2E 34 2D 31 33 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 13.4-13.41: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 31 34 2E 34 2D 31 34 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 14.4-14.41: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 31 2E 34 2D 32 31 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 21.4-21.41: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 32 2E 34 2D 32 32 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 22.4-22.41: @ensures annotation failed"
61 62 73 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 39 2E 31 37 2D 32 39 2E 32 36 29 00  # "abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 32 39 2E 34 2D 32 39 2E 32 37 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/util.c0: 29.4-29.27: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 33 30 2E 34 2D 33 30 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 30.4-30.25: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 33 37 2E 34 2D 33 37 2E 33 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/util.c0: 37.4-37.30: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 30 2E 32 31 2D 34 30 2E 33 34 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 30 2E 31 32 2D 34 30 2E 33 39 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 32 2E 32 31 2D 34 32 2E 33 34 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)"
68 65 78 64 69 67 32 63 68 61 72 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 32 2E 31 32 2D 34 32 2E 34 34 29 00  # "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 35 31 2E 31 38 2D 35 31 2E 32 38 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 35 35 2E 38 2D 35 35 2E 34 35 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 55.8-55.45: @loop_invariant annotation failed"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 35 37 2E 32 33 2D 35 37 2E 34 33 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 36 30 2E 31 30 2D 36 30 2E 33 34 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 39 2E 31 32 2D 34 39 2E 33 34 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)"
69 6E 74 32 68 65 78 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 39 2E 34 30 2D 34 39 2E 35 30 29 00  # "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 75 74 69 6C 2E 63 30 3A 20 34 39 2E 34 2D 34 39 2E 35 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/util.c0: 49.4-49.51: @ensures annotation failed"
72 65 61 64 6C 69 6E 65 5F 5F 31 20 28 2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 63 6F 6E 69 6F 2E 68 30 3A 20 31 34 2E 31 36 2D 31 34 2E 32 31 29 00  # "readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 63 6F 6E 69 6F 2E 68 30 3A 20 31 34 2E 36 2D 31 34 2E 32 32 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/conio.h0: 14.6-14.22: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 31 30 2E 34 2D 31 30 2E 33 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # ".tmp0/pixel-array.c0: 10.4-10.34: @ensures annotation failed"
2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 32 31 2E 34 2D 32 31 2E 32 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # ".tmp0/pixel-array.c0: 21.4-21.29: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 32 38 2E 34 2D 32 38 2E 32 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # ".tmp0/pixel-array.c0: 28.4-28.29: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 33 35 2E 34 2D 33 35 2E 32 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # ".tmp0/pixel-array.c0: 35.4-35.29: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 34 32 2E 34 2D 34 32 2E 32 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # ".tmp0/pixel-array.c0: 42.4-42.29: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 34 2E 33 2D 35 34 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 34 2E 33 35 2D 35 34 2E 34 37 29 00  # "pixel_print (.tmp0/pixel-array.c0: 54.35-54.47)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 34 2E 32 37 2D 35 34 2E 34 38 29 00  # "pixel_print (.tmp0/pixel-array.c0: 54.27-54.48)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 34 2E 31 36 2D 35 34 2E 35 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 54.16-54.55)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 34 2E 33 2D 35 34 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 34 2E 33 2D 35 34 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 34 2E 35 38 2D 35 34 2E 36 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 54.58-54.65)"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 35 2E 33 2D 35 35 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 35 2E 33 35 2D 35 35 2E 34 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 55.35-55.45)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 35 2E 32 37 2D 35 35 2E 34 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 55.27-55.46)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 35 2E 31 36 2D 35 35 2E 35 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 55.16-55.55)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 35 2E 33 2D 35 35 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 35 2E 33 2D 35 35 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 35 2E 35 38 2D 35 35 2E 36 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 55.58-55.65)"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 36 2E 33 2D 35 36 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 36 2E 33 35 2D 35 36 2E 34 37 29 00  # "pixel_print (.tmp0/pixel-array.c0: 56.35-56.47)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 36 2E 32 37 2D 35 36 2E 34 38 29 00  # "pixel_print (.tmp0/pixel-array.c0: 56.27-56.48)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 36 2E 31 36 2D 35 36 2E 35 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 56.16-56.55)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 36 2E 33 2D 35 36 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 36 2E 33 2D 35 36 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 36 2E 35 38 2D 35 36 2E 36 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 56.58-56.65)"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 37 2E 33 2D 35 37 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 37 2E 33 35 2D 35 37 2E 34 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 57.35-57.46)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 37 2E 32 37 2D 35 37 2E 34 37 29 00  # "pixel_print (.tmp0/pixel-array.c0: 57.27-57.47)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 37 2E 31 36 2D 35 37 2E 35 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 57.16-57.55)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 37 2E 33 2D 35 37 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)"
00  # ""
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 37 2E 33 2D 35 37 2E 35 36 29 00  # "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)"
70 69 78 65 6C 5F 70 72 69 6E 74 20 28 2E 74 6D 70 30 2F 70 69 78 65 6C 2D 61 72 72 61 79 2E 63 30 3A 20 35 37 2E 35 38 2D 35 37 2E 36 35 29 00  # "pixel_print (.tmp0/pixel-array.c0: 57.58-57.65)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 32 33 2E 34 2D 32 33 2E 33 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "quantize.c0: 23.4-23.30: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 32 37 2E 31 34 2D 32 37 2E 32 36 29 00  # "quantize (quantize.c0: 27.14-27.26)"
71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 32 38 2E 31 34 2D 32 38 2E 32 34 29 00  # "quantize (quantize.c0: 28.14-28.24)"
71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 32 39 2E 31 36 2D 32 39 2E 32 38 29 00  # "quantize (quantize.c0: 29.16-29.28)"
71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 33 30 2E 31 35 2D 33 30 2E 32 36 29 00  # "quantize (quantize.c0: 30.15-30.26)"
71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 33 31 2E 31 30 2D 33 31 2E 34 35 29 00  # "quantize (quantize.c0: 31.10-31.45)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 34 2E 32 34 2D 34 34 2E 35 38 29 00  # "test_quantize (quantize.c0: 44.24-44.58)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 34 2E 31 35 2D 34 34 2E 36 32 29 00  # "test_quantize (quantize.c0: 44.15-44.62)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 35 2E 31 30 2D 34 35 2E 32 32 29 00  # "test_quantize (quantize.c0: 45.10-45.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 35 2E 33 2D 34 35 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 45.3-45.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 36 2E 31 30 2D 34 36 2E 32 30 29 00  # "test_quantize (quantize.c0: 46.10-46.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 36 2E 33 2D 34 36 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 46.3-46.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 37 2E 31 30 2D 34 37 2E 32 32 29 00  # "test_quantize (quantize.c0: 47.10-47.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 37 2E 33 2D 34 37 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 47.3-47.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 38 2E 31 30 2D 34 38 2E 32 31 29 00  # "test_quantize (quantize.c0: 48.10-48.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 34 38 2E 33 2D 34 38 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 48.3-48.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 31 2E 31 36 2D 35 31 2E 35 30 29 00  # "test_quantize (quantize.c0: 51.16-51.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 31 2E 37 2D 35 31 2E 35 34 29 00  # "test_quantize (quantize.c0: 51.7-51.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 32 2E 31 30 2D 35 32 2E 32 32 29 00  # "test_quantize (quantize.c0: 52.10-52.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 32 2E 33 2D 35 32 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 52.3-52.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 33 2E 31 30 2D 35 33 2E 32 30 29 00  # "test_quantize (quantize.c0: 53.10-53.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 33 2E 33 2D 35 33 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 53.3-53.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 34 2E 31 30 2D 35 34 2E 32 32 29 00  # "test_quantize (quantize.c0: 54.10-54.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 34 2E 33 2D 35 34 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 54.3-54.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 35 2E 31 30 2D 35 35 2E 32 31 29 00  # "test_quantize (quantize.c0: 55.10-55.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 35 2E 33 2D 35 35 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 55.3-55.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 36 2E 31 36 2D 35 36 2E 35 30 29 00  # "test_quantize (quantize.c0: 56.16-56.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 36 2E 37 2D 35 36 2E 35 34 29 00  # "test_quantize (quantize.c0: 56.7-56.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 37 2E 31 30 2D 35 37 2E 32 32 29 00  # "test_quantize (quantize.c0: 57.10-57.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 37 2E 33 2D 35 37 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 57.3-57.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 38 2E 31 30 2D 35 38 2E 32 30 29 00  # "test_quantize (quantize.c0: 58.10-58.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 38 2E 33 2D 35 38 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 58.3-58.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 39 2E 31 30 2D 35 39 2E 32 32 29 00  # "test_quantize (quantize.c0: 59.10-59.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 35 39 2E 33 2D 35 39 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 59.3-59.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 30 2E 31 30 2D 36 30 2E 32 31 29 00  # "test_quantize (quantize.c0: 60.10-60.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 30 2E 33 2D 36 30 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 60.3-60.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 31 2E 31 36 2D 36 31 2E 35 30 29 00  # "test_quantize (quantize.c0: 61.16-61.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 31 2E 37 2D 36 31 2E 35 34 29 00  # "test_quantize (quantize.c0: 61.7-61.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 32 2E 31 30 2D 36 32 2E 32 32 29 00  # "test_quantize (quantize.c0: 62.10-62.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 32 2E 33 2D 36 32 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 62.3-62.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 33 2E 31 30 2D 36 33 2E 32 30 29 00  # "test_quantize (quantize.c0: 63.10-63.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 33 2E 33 2D 36 33 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 63.3-63.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 34 2E 31 30 2D 36 34 2E 32 32 29 00  # "test_quantize (quantize.c0: 64.10-64.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 34 2E 33 2D 36 34 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 64.3-64.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 35 2E 31 30 2D 36 35 2E 32 31 29 00  # "test_quantize (quantize.c0: 65.10-65.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 35 2E 33 2D 36 35 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 65.3-65.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 36 2E 31 36 2D 36 36 2E 35 30 29 00  # "test_quantize (quantize.c0: 66.16-66.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 36 2E 37 2D 36 36 2E 35 34 29 00  # "test_quantize (quantize.c0: 66.7-66.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 37 2E 31 30 2D 36 37 2E 32 32 29 00  # "test_quantize (quantize.c0: 67.10-67.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 37 2E 33 2D 36 37 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 67.3-67.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 38 2E 31 30 2D 36 38 2E 32 30 29 00  # "test_quantize (quantize.c0: 68.10-68.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 38 2E 33 2D 36 38 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 68.3-68.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 39 2E 31 30 2D 36 39 2E 32 32 29 00  # "test_quantize (quantize.c0: 69.10-69.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 36 39 2E 33 2D 36 39 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 69.3-69.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 30 2E 31 30 2D 37 30 2E 32 31 29 00  # "test_quantize (quantize.c0: 70.10-70.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 30 2E 33 2D 37 30 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 70.3-70.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 31 2E 31 36 2D 37 31 2E 35 30 29 00  # "test_quantize (quantize.c0: 71.16-71.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 31 2E 37 2D 37 31 2E 35 34 29 00  # "test_quantize (quantize.c0: 71.7-71.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 32 2E 31 30 2D 37 32 2E 32 32 29 00  # "test_quantize (quantize.c0: 72.10-72.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 32 2E 33 2D 37 32 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 72.3-72.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 33 2E 31 30 2D 37 33 2E 32 30 29 00  # "test_quantize (quantize.c0: 73.10-73.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 33 2E 33 2D 37 33 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 73.3-73.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 34 2E 31 30 2D 37 34 2E 32 32 29 00  # "test_quantize (quantize.c0: 74.10-74.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 34 2E 33 2D 37 34 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 74.3-74.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 35 2E 31 30 2D 37 35 2E 32 31 29 00  # "test_quantize (quantize.c0: 75.10-75.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 35 2E 33 2D 37 35 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 75.3-75.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 36 2E 31 36 2D 37 36 2E 35 30 29 00  # "test_quantize (quantize.c0: 76.16-76.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 36 2E 37 2D 37 36 2E 35 34 29 00  # "test_quantize (quantize.c0: 76.7-76.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 37 2E 31 30 2D 37 37 2E 32 32 29 00  # "test_quantize (quantize.c0: 77.10-77.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 37 2E 33 2D 37 37 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 77.3-77.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 38 2E 31 30 2D 37 38 2E 32 30 29 00  # "test_quantize (quantize.c0: 78.10-78.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 38 2E 33 2D 37 38 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 78.3-78.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 39 2E 31 30 2D 37 39 2E 32 32 29 00  # "test_quantize (quantize.c0: 79.10-79.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 37 39 2E 33 2D 37 39 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 79.3-79.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 30 2E 31 30 2D 38 30 2E 32 31 29 00  # "test_quantize (quantize.c0: 80.10-80.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 30 2E 33 2D 38 30 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 80.3-80.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 31 2E 31 36 2D 38 31 2E 35 30 29 00  # "test_quantize (quantize.c0: 81.16-81.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 31 2E 37 2D 38 31 2E 35 34 29 00  # "test_quantize (quantize.c0: 81.7-81.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 32 2E 31 30 2D 38 32 2E 32 32 29 00  # "test_quantize (quantize.c0: 82.10-82.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 32 2E 33 2D 38 32 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 82.3-82.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 33 2E 31 30 2D 38 33 2E 32 30 29 00  # "test_quantize (quantize.c0: 83.10-83.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 33 2E 33 2D 38 33 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 83.3-83.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 34 2E 31 30 2D 38 34 2E 32 32 29 00  # "test_quantize (quantize.c0: 84.10-84.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 34 2E 33 2D 38 34 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 84.3-84.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 35 2E 31 30 2D 38 35 2E 32 31 29 00  # "test_quantize (quantize.c0: 85.10-85.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 35 2E 33 2D 38 35 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 85.3-85.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 36 2E 31 36 2D 38 36 2E 35 30 29 00  # "test_quantize (quantize.c0: 86.16-86.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 36 2E 37 2D 38 36 2E 35 34 29 00  # "test_quantize (quantize.c0: 86.7-86.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 37 2E 31 30 2D 38 37 2E 32 32 29 00  # "test_quantize (quantize.c0: 87.10-87.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 37 2E 33 2D 38 37 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 87.3-87.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 38 2E 31 30 2D 38 38 2E 32 30 29 00  # "test_quantize (quantize.c0: 88.10-88.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 38 2E 33 2D 38 38 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 88.3-88.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 39 2E 31 30 2D 38 39 2E 32 32 29 00  # "test_quantize (quantize.c0: 89.10-89.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 38 39 2E 33 2D 38 39 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 89.3-89.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 30 2E 31 30 2D 39 30 2E 32 31 29 00  # "test_quantize (quantize.c0: 90.10-90.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 30 2E 33 2D 39 30 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 90.3-90.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 31 2E 31 36 2D 39 31 2E 35 30 29 00  # "test_quantize (quantize.c0: 91.16-91.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 31 2E 37 2D 39 31 2E 35 34 29 00  # "test_quantize (quantize.c0: 91.7-91.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 32 2E 31 30 2D 39 32 2E 32 32 29 00  # "test_quantize (quantize.c0: 92.10-92.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 32 2E 33 2D 39 32 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 92.3-92.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 33 2E 31 30 2D 39 33 2E 32 30 29 00  # "test_quantize (quantize.c0: 93.10-93.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 33 2E 33 2D 39 33 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 93.3-93.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 34 2E 31 30 2D 39 34 2E 32 32 29 00  # "test_quantize (quantize.c0: 94.10-94.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 34 2E 33 2D 39 34 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 94.3-94.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 35 2E 31 30 2D 39 35 2E 32 31 29 00  # "test_quantize (quantize.c0: 95.10-95.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 35 2E 33 2D 39 35 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 95.3-95.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 36 2E 31 36 2D 39 36 2E 35 30 29 00  # "test_quantize (quantize.c0: 96.16-96.50)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 36 2E 37 2D 39 36 2E 35 34 29 00  # "test_quantize (quantize.c0: 96.7-96.54)"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 37 2E 31 30 2D 39 37 2E 32 32 29 00  # "test_quantize (quantize.c0: 97.10-97.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 37 2E 33 2D 39 37 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 97.3-97.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 38 2E 31 30 2D 39 38 2E 32 30 29 00  # "test_quantize (quantize.c0: 98.10-98.20)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 38 2E 33 2D 39 38 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 98.3-98.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 39 2E 31 30 2D 39 39 2E 32 32 29 00  # "test_quantize (quantize.c0: 99.10-99.22)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 39 39 2E 33 2D 39 39 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 99.3-99.32: assert failed"
74 65 73 74 5F 71 75 61 6E 74 69 7A 65 20 28 71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 31 30 30 2E 31 30 2D 31 30 30 2E 32 31 29 00  # "test_quantize (quantize.c0: 100.10-100.21)"
71 75 61 6E 74 69 7A 65 2E 63 30 3A 20 31 30 30 2E 33 2D 31 30 30 2E 33 32 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "quantize.c0: 100.3-100.32: assert failed"
28 70 72 6F 67 72 61 6D 20 73 74 61 72 74 29 00  # "(program start)"
6D 61 69 6E 20 28 71 75 61 6E 74 69 7A 65 2D 74 65 73 74 2E 63 30 3A 20 31 35 2E 33 2D 31 35 2E 31 38 29 00  # "main (quantize-test.c0: 15.3-15.18)"
41 6C 6C 20 74 65 73 74 73 20 70 61 73 73 65 64 21 0A 00  # "All tests passed!\n"
6D 61 69 6E 20 28 71 75 61 6E 74 69 7A 65 2D 74 65 73 74 2E 63 30 3A 20 31 37 2E 33 2D 31 37 2E 33 32 29 00  # "main (quantize-test.c0: 17.3-17.32)"

00 2E             # function count
# function_pool

#<main>
00                # number of arguments = 0
02                # number of local variables = 2
00 1D             # code length = 29 bytes
14 2C AA # aldc 11434         # s[11434] = "(program start)"
36 00    # vstore 0           # _caller = "(program start)";
14 2C BA # aldc 11450         # s[11450] = "main (quantize-test.c0: 15.3-15.18)"
B8 00 2D # invokestatic 45    # test_quantize("main (quantize-test.c0: 15.3-15.18)")
57       # pop                # (ignore result)
14 2C DE # aldc 11486         # s[11486] = "All tests passed!\n"
14 2C F1 # aldc 11505         # s[11505] = "main (quantize-test.c0: 17.3-17.32)"
B8 00 1E # invokestatic 30    # print__1("All tests passed!\n", "main (quantize-test.c0: 17.3-17.32)")
57       # pop                # (ignore result)
10 00    # bipush 0           # 0
36 01    # vstore 1           # _result = 0;
15 01    # vload 1            # _result
B0       # return             # 


#<int_size>
01                # number of arguments = 1
02                # number of local variables = 2
00 07             # code length = 7 bytes
10 04    # bipush 4           # 4
36 01    # vstore 1           # _result = 4;
15 01    # vload 1            # _result
B0       # return             # 


#<int_size__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 20             # code length = 32 bytes
14 00 00 # aldc 0             # s[0] = "int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)"
B8 00 01 # invokestatic 1     # int_size("int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)")
36 01    # vstore 1           # _result = int_size("int_size__1 (/afs/andrew/course/15/122/lib/util.h0: 8.1-9.33)");
15 01    # vload 1            # _result
10 04    # bipush 4           # 4
9F 00 06 # if_cmpeq +6        # if (_result == 4) goto <00:cond_true>
A7 00 08 # goto +8            # goto <01:cond_false>
# <00:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <02:cond_end>
# <01:cond_false>
10 00    # bipush 0           # false
# <02:cond_end>
14 00 3E # aldc 62            # s[62] = "/afs/andrew/course/15/122/lib/util.h0: 9.6-9.27: @ensures annotation failed"
CF       # assert             # assert (_result == 4) [failure message on stack]
15 01    # vload 1            # _result
B0       # return             # 


#<int_max>
01                # number of arguments = 1
02                # number of local variables = 2
00 08             # code length = 8 bytes
13 00 02 # ildc 2             # c[2] = 2147483647
36 01    # vstore 1           # _result = 2147483647;
15 01    # vload 1            # _result
B0       # return             # 


#<int_max__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 21             # code length = 33 bytes
14 00 8A # aldc 138           # s[138] = "int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)"
B8 00 03 # invokestatic 3     # int_max("int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)")
36 01    # vstore 1           # _result = int_max("int_max__1 (/afs/andrew/course/15/122/lib/util.h0: 10.1-11.42)");
15 01    # vload 1            # _result
13 00 00 # ildc 0             # c[0] = 2147483647
9F 00 06 # if_cmpeq +6        # if (_result == 2147483647) goto <03:cond_true>
A7 00 08 # goto +8            # goto <04:cond_false>
# <03:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <05:cond_end>
# <04:cond_false>
10 00    # bipush 0           # false
# <05:cond_end>
14 00 C9 # aldc 201           # s[201] = "/afs/andrew/course/15/122/lib/util.h0: 11.6-11.36: @ensures annotation failed"
CF       # assert             # assert (_result == 2147483647) [failure message on stack]
15 01    # vload 1            # _result
B0       # return             # 


#<int_min>
01                # number of arguments = 1
02                # number of local variables = 2
00 08             # code length = 8 bytes
13 00 03 # ildc 3             # c[3] = -2147483648
36 01    # vstore 1           # _result = -2147483648;
15 01    # vload 1            # _result
B0       # return             # 


#<int_min__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 21             # code length = 33 bytes
14 01 17 # aldc 279           # s[279] = "int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)"
B8 00 05 # invokestatic 5     # int_min("int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)")
36 01    # vstore 1           # _result = int_min("int_min__1 (/afs/andrew/course/15/122/lib/util.h0: 12.1-13.43)");
15 01    # vload 1            # _result
13 00 01 # ildc 1             # c[1] = -2147483648
9F 00 06 # if_cmpeq +6        # if (_result == -(-2147483648)) goto <06:cond_true>
A7 00 08 # goto +8            # goto <07:cond_false>
# <06:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <08:cond_end>
# <07:cond_false>
10 00    # bipush 0           # false
# <08:cond_end>
14 01 56 # aldc 342           # s[342] = "/afs/andrew/course/15/122/lib/util.h0: 13.6-13.37: @ensures annotation failed"
CF       # assert             # assert (_result == -(-2147483648)) [failure message on stack]
15 01    # vload 1            # _result
B0       # return             # 


#<abs>
02                # number of arguments = 2
03                # number of local variables = 3
00 52             # code length = 82 bytes
15 00    # vload 0            # x
14 0E E9 # aldc 3817          # s[3817] = "abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)"
B8 00 06 # invokestatic 6     # int_min__1("abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)")
A3 00 06 # if_icmpgt +6       # if (x > int_min__1("abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)")) goto <133:cond_true>
A7 00 08 # goto +8            # goto <134:cond_false>
# <133:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <135:cond_end>
# <134:cond_false>
10 00    # bipush 0           # false
# <135:cond_end>
14 0F 22 # aldc 3874          # s[3874] = "/afs/andrew/course/15/122/lib/util.c0: 29.4-29.27: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 0F 72 # aldc 3954          # s[3954] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/util.c0: 29.4-29.27: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (x > int_min__1("abs (/afs/andrew/course/15/122/lib/util.c0: 29.17-29.26)")) [failure message on stack]
15 00    # vload 0            # x
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (x < 0) goto <136:cond_true>
A7 00 0B # goto +11           # goto <137:cond_false>
# <136:cond_true>
10 00    # bipush 0           # 
15 00    # vload 0            # x
64       # isub               # -(x)
A7 00 05 # goto +5            # goto <138:cond_end>
# <137:cond_false>
15 00    # vload 0            # x
# <138:cond_end>
36 02    # vstore 2           # _result = ((x < 0) ? -(x) : x);
15 02    # vload 2            # _result
10 00    # bipush 0           # 0
A2 00 06 # if_icmpge +6       # if (_result >= 0) goto <139:cond_true>
A7 00 08 # goto +8            # goto <140:cond_false>
# <139:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <141:cond_end>
# <140:cond_false>
10 00    # bipush 0           # false
# <141:cond_end>
14 0F 84 # aldc 3972          # s[3972] = "/afs/andrew/course/15/122/lib/util.c0: 30.4-30.25: @ensures annotation failed"
CF       # assert             # assert (_result >= 0) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<abs__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 6D             # code length = 109 bytes
15 00    # vload 0            # x
14 01 A4 # aldc 420           # s[420] = "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)"
B8 00 06 # invokestatic 6     # int_min__1("abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)")
A3 00 06 # if_icmpgt +6       # if (x > int_min__1("abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)")) goto <09:cond_true>
A7 00 08 # goto +8            # goto <10:cond_false>
# <09:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <11:cond_end>
# <10:cond_false>
10 00    # bipush 0           # false
# <11:cond_end>
14 01 E0 # aldc 480           # s[480] = "/afs/andrew/course/15/122/lib/util.h0: 17.6-17.29: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 02 30 # aldc 560           # s[560] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/util.h0: 17.6-17.29: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (x > int_min__1("abs__1 (/afs/andrew/course/15/122/lib/util.h0: 17.19-17.28)")) [failure message on stack]
15 00    # vload 0            # x
14 02 42 # aldc 578           # s[578] = "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)"
B8 00 07 # invokestatic 7     # abs(x, "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)")
36 02    # vstore 2           # _result = abs(x, "abs__1 (/afs/andrew/course/15/122/lib/util.h0: 16.1-19.48)");
15 02    # vload 2            # _result
10 00    # bipush 0           # 0
A2 00 06 # if_icmpge +6       # if (_result >= 0) goto <12:cond_true>
A7 00 08 # goto +8            # goto <13:cond_false>
# <12:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <14:cond_end>
# <13:cond_false>
10 00    # bipush 0           # false
# <14:cond_end>
14 02 7D # aldc 637           # s[637] = "/afs/andrew/course/15/122/lib/util.h0: 18.6-18.27: @ensures annotation failed"
CF       # assert             # assert (_result >= 0) [failure message on stack]
15 02    # vload 2            # _result
15 00    # vload 0            # x
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (x < 0) goto <18:cond_true>
A7 00 0B # goto +11           # goto <19:cond_false>
# <18:cond_true>
10 00    # bipush 0           # 
15 00    # vload 0            # x
64       # isub               # -(x)
A7 00 05 # goto +5            # goto <20:cond_end>
# <19:cond_false>
15 00    # vload 0            # x
# <20:cond_end>
9F 00 06 # if_cmpeq +6        # if (_result == ((x < 0) ? -(x) : x)) goto <15:cond_true>
A7 00 08 # goto +8            # goto <16:cond_false>
# <15:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <17:cond_end>
# <16:cond_false>
10 00    # bipush 0           # false
# <17:cond_end>
14 02 CB # aldc 715           # s[715] = "/afs/andrew/course/15/122/lib/util.h0: 19.6-19.42: @ensures annotation failed"
CF       # assert             # assert (_result == ((x < 0) ? -(x) : x)) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<max>
03                # number of arguments = 3
04                # number of local variables = 4
00 5E             # code length = 94 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
A3 00 06 # if_icmpgt +6       # if (x > y) goto <103:cond_true>
A7 00 08 # goto +8            # goto <104:cond_false>
# <103:cond_true>
15 00    # vload 0            # x
A7 00 05 # goto +5            # goto <105:cond_end>
# <104:cond_false>
15 01    # vload 1            # y
# <105:cond_end>
36 03    # vstore 3           # _result = ((x > y) ? x : y);
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <106:cond_true>
A7 00 08 # goto +8            # goto <107:cond_false>
# <106:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <108:cond_end>
# <107:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <109:cond_true>
A7 00 08 # goto +8            # goto <110:cond_false>
# <109:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <111:cond_end>
# <110:cond_false>
10 00    # bipush 0           # false
# <111:cond_end>
# <108:cond_end>
14 0D B1 # aldc 3505          # s[3505] = "/afs/andrew/course/15/122/lib/util.c0: 13.4-13.41: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A2 00 06 # if_icmpge +6       # if (_result >= x) goto <112:cond_true>
A7 00 17 # goto +23           # goto <113:cond_false>
# <112:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A2 00 06 # if_icmpge +6       # if (_result >= y) goto <115:cond_true>
A7 00 08 # goto +8            # goto <116:cond_false>
# <115:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <117:cond_end>
# <116:cond_false>
10 00    # bipush 0           # false
# <117:cond_end>
A7 00 05 # goto +5            # goto <114:cond_end>
# <113:cond_false>
10 00    # bipush 0           # false
# <114:cond_end>
14 0D FF # aldc 3583          # s[3583] = "/afs/andrew/course/15/122/lib/util.c0: 14.4-14.41: @ensures annotation failed"
CF       # assert             # assert ((_result >= x) && (_result >= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<max__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 57             # code length = 87 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
14 03 19 # aldc 793           # s[793] = "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)"
B8 00 09 # invokestatic 9     # max(x, y, "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)")
36 03    # vstore 3           # _result = max(x, y, "max__1 (/afs/andrew/course/15/122/lib/util.h0: 22.1-24.49)");
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <21:cond_true>
A7 00 08 # goto +8            # goto <22:cond_false>
# <21:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <23:cond_end>
# <22:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <24:cond_true>
A7 00 08 # goto +8            # goto <25:cond_false>
# <24:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <26:cond_end>
# <25:cond_false>
10 00    # bipush 0           # false
# <26:cond_end>
# <23:cond_end>
14 03 54 # aldc 852           # s[852] = "/afs/andrew/course/15/122/lib/util.h0: 23.6-23.43: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A2 00 06 # if_icmpge +6       # if (_result >= x) goto <27:cond_true>
A7 00 17 # goto +23           # goto <28:cond_false>
# <27:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A2 00 06 # if_icmpge +6       # if (_result >= y) goto <30:cond_true>
A7 00 08 # goto +8            # goto <31:cond_false>
# <30:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <32:cond_end>
# <31:cond_false>
10 00    # bipush 0           # false
# <32:cond_end>
A7 00 05 # goto +5            # goto <29:cond_end>
# <28:cond_false>
10 00    # bipush 0           # false
# <29:cond_end>
14 03 A2 # aldc 930           # s[930] = "/afs/andrew/course/15/122/lib/util.h0: 24.6-24.43: @ensures annotation failed"
CF       # assert             # assert ((_result >= x) && (_result >= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<min>
03                # number of arguments = 3
04                # number of local variables = 4
00 5E             # code length = 94 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
A3 00 06 # if_icmpgt +6       # if (x > y) goto <118:cond_true>
A7 00 08 # goto +8            # goto <119:cond_false>
# <118:cond_true>
15 01    # vload 1            # y
A7 00 05 # goto +5            # goto <120:cond_end>
# <119:cond_false>
15 00    # vload 0            # x
# <120:cond_end>
36 03    # vstore 3           # _result = ((x > y) ? y : x);
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <121:cond_true>
A7 00 08 # goto +8            # goto <122:cond_false>
# <121:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <123:cond_end>
# <122:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <124:cond_true>
A7 00 08 # goto +8            # goto <125:cond_false>
# <124:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <126:cond_end>
# <125:cond_false>
10 00    # bipush 0           # false
# <126:cond_end>
# <123:cond_end>
14 0E 4D # aldc 3661          # s[3661] = "/afs/andrew/course/15/122/lib/util.c0: 21.4-21.41: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A4 00 06 # if_icmple +6       # if (_result <= x) goto <127:cond_true>
A7 00 17 # goto +23           # goto <128:cond_false>
# <127:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A4 00 06 # if_icmple +6       # if (_result <= y) goto <130:cond_true>
A7 00 08 # goto +8            # goto <131:cond_false>
# <130:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <132:cond_end>
# <131:cond_false>
10 00    # bipush 0           # false
# <132:cond_end>
A7 00 05 # goto +5            # goto <129:cond_end>
# <128:cond_false>
10 00    # bipush 0           # false
# <129:cond_end>
14 0E 9B # aldc 3739          # s[3739] = "/afs/andrew/course/15/122/lib/util.c0: 22.4-22.41: @ensures annotation failed"
CF       # assert             # assert ((_result <= x) && (_result <= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<min__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 57             # code length = 87 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
14 03 F0 # aldc 1008          # s[1008] = "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)"
B8 00 0B # invokestatic 11    # min(x, y, "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)")
36 03    # vstore 3           # _result = min(x, y, "min__1 (/afs/andrew/course/15/122/lib/util.h0: 27.1-29.49)");
15 03    # vload 3            # _result
15 00    # vload 0            # x
9F 00 06 # if_cmpeq +6        # if (_result == x) goto <33:cond_true>
A7 00 08 # goto +8            # goto <34:cond_false>
# <33:cond_true>
10 01    # bipush 1           # true
A7 00 14 # goto +20           # goto <35:cond_end>
# <34:cond_false>
15 03    # vload 3            # _result
15 01    # vload 1            # y
9F 00 06 # if_cmpeq +6        # if (_result == y) goto <36:cond_true>
A7 00 08 # goto +8            # goto <37:cond_false>
# <36:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <38:cond_end>
# <37:cond_false>
10 00    # bipush 0           # false
# <38:cond_end>
# <35:cond_end>
14 04 2B # aldc 1067          # s[1067] = "/afs/andrew/course/15/122/lib/util.h0: 28.6-28.43: @ensures annotation failed"
CF       # assert             # assert ((_result == x) || (_result == y)) [failure message on stack]
15 03    # vload 3            # _result
15 00    # vload 0            # x
A4 00 06 # if_icmple +6       # if (_result <= x) goto <39:cond_true>
A7 00 17 # goto +23           # goto <40:cond_false>
# <39:cond_true>
15 03    # vload 3            # _result
15 01    # vload 1            # y
A4 00 06 # if_icmple +6       # if (_result <= y) goto <42:cond_true>
A7 00 08 # goto +8            # goto <43:cond_false>
# <42:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <44:cond_end>
# <43:cond_false>
10 00    # bipush 0           # false
# <44:cond_end>
A7 00 05 # goto +5            # goto <41:cond_end>
# <40:cond_false>
10 00    # bipush 0           # false
# <41:cond_end>
14 04 79 # aldc 1145          # s[1145] = "/afs/andrew/course/15/122/lib/util.h0: 29.6-29.43: @ensures annotation failed"
CF       # assert             # assert ((_result <= x) && (_result <= y)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<int2hex>
02                # number of arguments = 2
06                # number of local variables = 6
00 AE             # code length = 174 bytes
10 02    # bipush 2           # 2
14 11 38 # aldc 4408          # s[4408] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"
B8 00 02 # invokestatic 2     # int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)")
68       # imul               # (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"))
36 03    # vstore 3           # digits = (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 51.18-51.28)"));
15 03    # vload 3            # digits
10 01    # bipush 1           # 1
60       # iadd               # (digits + 1)
BC 01    # newarray 1         # alloc_array(char, (digits + 1))
36 04    # vstore 4           # s = alloc_array(char, (digits + 1));
15 04    # vload 4            # s
15 03    # vload 3            # digits
63       # aadds              # &s[digits]
10 00    # bipush 0           # '\000'
55       # cmstore            # s[digits] = '\0';
10 00    # bipush 0           # 0
36 05    # vstore 5           # i = 0;
# <156:loop>
A7 00 03 # goto +3            # goto <157:body>
# <157:body>
10 00    # bipush 0           # 0
15 05    # vload 5            # i
A4 00 06 # if_icmple +6       # if (0 <= i) goto <159:cond_true>
A7 00 17 # goto +23           # goto <160:cond_false>
# <159:cond_true>
15 05    # vload 5            # i
15 03    # vload 3            # digits
A4 00 06 # if_icmple +6       # if (i <= digits) goto <162:cond_true>
A7 00 08 # goto +8            # goto <163:cond_false>
# <162:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <164:cond_end>
# <163:cond_false>
10 00    # bipush 0           # false
# <164:cond_end>
A7 00 05 # goto +5            # goto <161:cond_end>
# <160:cond_false>
10 00    # bipush 0           # false
# <161:cond_end>
14 11 75 # aldc 4469          # s[4469] = "/afs/andrew/course/15/122/lib/util.c0: 55.8-55.45: @loop_invariant annotation failed"
CF       # assert             # assert ((0 <= i) && (i <= digits)) [failure message on stack]
15 05    # vload 5            # i
15 03    # vload 3            # digits
A1 00 06 # if_icmplt +6       # if (i < digits) goto <165:then>
A7 00 2B # goto +43           # goto <166:else>
# <165:then>
15 04    # vload 4            # s
15 03    # vload 3            # digits
15 05    # vload 5            # i
64       # isub               # (digits - i)
10 01    # bipush 1           # 1
64       # isub               # ((digits - i) - 1)
63       # aadds              # &s[((digits - i) - 1)]
15 00    # vload 0            # x
10 0F    # bipush 15          # 15
7E       # iand               # (x & 15)
14 11 CA # aldc 4554          # s[4554] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)"
B8 00 1D # invokestatic 29    # hexdig2char((x & 15), "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)")
55       # cmstore            # s[((digits - i) - 1)] = hexdig2char((x & 15), "int2hex (/afs/andrew/course/15/122/lib/util.c0: 57.23-57.43)");
15 00    # vload 0            # x
10 04    # bipush 4           # 4
7A       # ishr               # (x >> 4)
36 00    # vstore 0           # x = (x >> 4);
15 05    # vload 5            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 05    # vstore 5           # i += 1;
A7 00 06 # goto +6            # goto <167:endif>
# <166:else>
A7 00 06 # goto +6            # break
# <167:endif>
A7 FF A4 # goto -92           # goto <156:loop>
# <158:exit>
15 04    # vload 4            # s
14 12 07 # aldc 4615          # s[4615] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)"
B8 00 1A # invokestatic 26    # string_from_chararray__1(s, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)")
36 02    # vstore 2           # _result = string_from_chararray__1(s, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 60.10-60.34)");
15 02    # vload 2            # _result
14 12 44 # aldc 4676          # s[4676] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)"
B8 00 0E # invokestatic 14    # string_length__1(_result, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)")
10 02    # bipush 2           # 2
14 12 81 # aldc 4737          # s[4737] = "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"
B8 00 02 # invokestatic 2     # int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)")
68       # imul               # (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"))
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)") == (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"))) goto <168:cond_true>
A7 00 08 # goto +8            # goto <169:cond_false>
# <168:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <170:cond_end>
# <169:cond_false>
10 00    # bipush 0           # false
# <170:cond_end>
14 12 BE # aldc 4798          # s[4798] = "/afs/andrew/course/15/122/lib/util.c0: 49.4-49.51: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.12-49.34)") == (2 * int_size__1("int2hex (/afs/andrew/course/15/122/lib/util.c0: 49.40-49.50)"))) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<string_length__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # s
B7 00 01 # invokenative 1     # string_length(s)
36 02    # vstore 2           # _result = string_length(s);
15 02    # vload 2            # _result
B0       # return             # 


#<string_charat__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 41             # code length = 65 bytes
10 00    # bipush 0           # 0
15 01    # vload 1            # idx
A4 00 06 # if_icmple +6       # if (0 <= idx) goto <45:cond_true>
A7 00 1D # goto +29           # goto <46:cond_false>
# <45:cond_true>
15 01    # vload 1            # idx
15 00    # vload 0            # s
14 04 C7 # aldc 1223          # s[1223] = "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)"
B8 00 0E # invokestatic 14    # string_length__1(s, "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)")
A1 00 06 # if_icmplt +6       # if (idx < string_length__1(s, "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)")) goto <48:cond_true>
A7 00 08 # goto +8            # goto <49:cond_false>
# <48:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <50:cond_end>
# <49:cond_false>
10 00    # bipush 0           # false
# <50:cond_end>
A7 00 05 # goto +5            # goto <47:cond_end>
# <46:cond_false>
10 00    # bipush 0           # false
# <47:cond_end>
14 05 0F # aldc 1295          # s[1295] = "/afs/andrew/course/15/122/lib/string.h0: 19.6-19.50: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 05 61 # aldc 1377          # s[1377] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/string.h0: 19.6-19.50: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= idx) && (idx < string_length__1(s, "string_charat__1 (/afs/andrew/course/15/122/lib/string.h0: 19.33-19.49)"))) [failure message on stack]
15 00    # vload 0            # s
15 01    # vload 1            # idx
B7 00 02 # invokenative 2     # string_charat(s, idx)
36 03    # vstore 3           # _result = string_charat(s, idx);
15 03    # vload 3            # _result
B0       # return             # 


#<string_join__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 36             # code length = 54 bytes
15 00    # vload 0            # a
15 01    # vload 1            # b
B7 00 00 # invokenative 0     # string_join(a, b)
36 03    # vstore 3           # _result = string_join(a, b);
15 03    # vload 3            # _result
14 05 73 # aldc 1395          # s[1395] = "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)"
B8 00 0E # invokestatic 14    # string_length__1(_result, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)")
15 00    # vload 0            # a
14 05 B9 # aldc 1465          # s[1465] = "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)"
B8 00 0E # invokestatic 14    # string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)")
15 01    # vload 1            # b
14 05 FF # aldc 1535          # s[1535] = "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"
B8 00 0E # invokestatic 14    # string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)")
60       # iadd               # (string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)") + string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"))
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)") == (string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)") + string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"))) goto <51:cond_true>
A7 00 08 # goto +8            # goto <52:cond_false>
# <51:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <53:cond_end>
# <52:cond_false>
10 00    # bipush 0           # false
# <53:cond_end>
14 06 45 # aldc 1605          # s[1605] = "/afs/andrew/course/15/122/lib/string.h0: 23.6-24.55: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 23.14-23.36)") == (string_length__1(a, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.19-24.35)") + string_length__1(b, "string_join__1 (/afs/andrew/course/15/122/lib/string.h0: 24.38-24.54)"))) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<string_sub__1>
04                # number of arguments = 4
05                # number of local variables = 5
00 6B             # code length = 107 bytes
10 00    # bipush 0           # 0
15 01    # vload 1            # start
A4 00 06 # if_icmple +6       # if (0 <= start) goto <57:and>
A7 00 27 # goto +39           # goto <55:cond_false>
# <57:and>
15 01    # vload 1            # start
15 02    # vload 2            # end
A4 00 06 # if_icmple +6       # if (start <= end) goto <54:cond_true>
A7 00 1D # goto +29           # goto <55:cond_false>
# <54:cond_true>
15 02    # vload 2            # end
15 00    # vload 0            # a
14 06 95 # aldc 1685          # s[1685] = "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)"
B8 00 0E # invokestatic 14    # string_length__1(a, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)")
A4 00 06 # if_icmple +6       # if (end <= string_length__1(a, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)")) goto <58:cond_true>
A7 00 08 # goto +8            # goto <59:cond_false>
# <58:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <60:cond_end>
# <59:cond_false>
10 00    # bipush 0           # false
# <60:cond_end>
A7 00 05 # goto +5            # goto <56:cond_end>
# <55:cond_false>
10 00    # bipush 0           # false
# <56:cond_end>
14 06 DA # aldc 1754          # s[1754] = "/afs/andrew/course/15/122/lib/string.h0: 31.6-31.69: @requires annotation failed\n"
15 03    # vload 3            # _caller
14 07 2C # aldc 1836          # s[1836] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/string.h0: 31.6-31.69: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (((0 <= start) && (start <= end)) && (end <= string_length__1(a, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 31.52-31.68)"))) [failure message on stack]
15 00    # vload 0            # a
15 01    # vload 1            # start
15 02    # vload 2            # end
B7 00 03 # invokenative 3     # string_sub(a, start, end)
36 04    # vstore 4           # _result = string_sub(a, start, end);
15 04    # vload 4            # _result
14 07 3E # aldc 1854          # s[1854] = "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)"
B8 00 0E # invokestatic 14    # string_length__1(_result, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)")
15 02    # vload 2            # end
15 01    # vload 1            # start
64       # isub               # (end - start)
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)") == (end - start)) goto <61:cond_true>
A7 00 08 # goto +8            # goto <62:cond_false>
# <61:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <63:cond_end>
# <62:cond_false>
10 00    # bipush 0           # false
# <63:cond_end>
14 07 83 # aldc 1923          # s[1923] = "/afs/andrew/course/15/122/lib/string.h0: 32.6-32.52: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "string_sub__1 (/afs/andrew/course/15/122/lib/string.h0: 32.14-32.36)") == (end - start)) [failure message on stack]
15 04    # vload 4            # _result
B0       # return             # 


#<string_equal__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 0C             # code length = 12 bytes
15 00    # vload 0            # a
15 01    # vload 1            # b
B7 00 04 # invokenative 4     # string_equal(a, b)
36 03    # vstore 3           # _result = string_equal(a, b);
15 03    # vload 3            # _result
B0       # return             # 


#<string_compare__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 30             # code length = 48 bytes
15 00    # vload 0            # a
15 01    # vload 1            # b
B7 00 05 # invokenative 5     # string_compare(a, b)
36 03    # vstore 3           # _result = string_compare(a, b);
10 FF    # bipush -1          # -1
15 03    # vload 3            # _result
A4 00 06 # if_icmple +6       # if (-(1) <= _result) goto <64:cond_true>
A7 00 17 # goto +23           # goto <65:cond_false>
# <64:cond_true>
15 03    # vload 3            # _result
10 01    # bipush 1           # 1
A4 00 06 # if_icmple +6       # if (_result <= 1) goto <67:cond_true>
A7 00 08 # goto +8            # goto <68:cond_false>
# <67:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <69:cond_end>
# <68:cond_false>
10 00    # bipush 0           # false
# <69:cond_end>
A7 00 05 # goto +5            # goto <66:cond_end>
# <65:cond_false>
10 00    # bipush 0           # false
# <66:cond_end>
14 07 D3 # aldc 2003          # s[2003] = "/afs/andrew/course/15/122/lib/string.h0: 37.6-37.44: @ensures annotation failed"
CF       # assert             # assert ((-(1) <= _result) && (_result <= 1)) [failure message on stack]
15 03    # vload 3            # _result
B0       # return             # 


#<string_fromint__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # i
B7 00 06 # invokenative 6     # string_fromint(i)
36 02    # vstore 2           # _result = string_fromint(i);
15 02    # vload 2            # _result
B0       # return             # 


#<string_frombool__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # b
B7 00 07 # invokenative 7     # string_frombool(b)
36 02    # vstore 2           # _result = string_frombool(b);
15 02    # vload 2            # _result
B0       # return             # 


#<string_fromchar__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 62             # code length = 98 bytes
15 00    # vload 0            # c
10 00    # bipush 0           # '\000'
A0 00 06 # if_cmpne +6        # if (c != '\0') goto <70:cond_true>
A7 00 08 # goto +8            # goto <71:cond_false>
# <70:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <72:cond_end>
# <71:cond_false>
10 00    # bipush 0           # false
# <72:cond_end>
14 08 23 # aldc 2083          # s[2083] = "/afs/andrew/course/15/122/lib/string.h0: 43.6-43.25: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 08 75 # aldc 2165          # s[2165] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/string.h0: 43.6-43.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (c != '\0') [failure message on stack]
15 00    # vload 0            # c
B7 00 08 # invokenative 8     # string_fromchar(c)
36 02    # vstore 2           # _result = string_fromchar(c);
15 02    # vload 2            # _result
14 08 87 # aldc 2183          # s[2183] = "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)"
B8 00 0E # invokestatic 14    # string_length__1(_result, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)")
10 01    # bipush 1           # 1
9F 00 06 # if_cmpeq +6        # if (string_length__1(_result, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)") == 1) goto <73:cond_true>
A7 00 08 # goto +8            # goto <74:cond_false>
# <73:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <75:cond_end>
# <74:cond_false>
10 00    # bipush 0           # false
# <75:cond_end>
14 08 D1 # aldc 2257          # s[2257] = "/afs/andrew/course/15/122/lib/string.h0: 44.6-44.42: @ensures annotation failed"
CF       # assert             # assert (string_length__1(_result, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 44.14-44.36)") == 1) [failure message on stack]
15 02    # vload 2            # _result
10 00    # bipush 0           # 0
14 09 21 # aldc 2337          # s[2337] = "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)"
B8 00 0F # invokestatic 15    # string_charat__1(_result, 0, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)")
15 00    # vload 0            # c
9F 00 06 # if_cmpeq +6        # if (string_charat__1(_result, 0, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)") == c) goto <76:cond_true>
A7 00 08 # goto +8            # goto <77:cond_false>
# <76:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <78:cond_end>
# <77:cond_false>
10 00    # bipush 0           # false
# <78:cond_end>
14 09 6B # aldc 2411          # s[2411] = "/afs/andrew/course/15/122/lib/string.h0: 45.6-45.45: @ensures annotation failed"
CF       # assert             # assert (string_charat__1(_result, 0, "string_fromchar__1 (/afs/andrew/course/15/122/lib/string.h0: 45.14-45.39)") == c) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<string_tolower__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 0A             # code length = 10 bytes
15 00    # vload 0            # s
B7 00 09 # invokenative 9     # string_tolower(s)
36 02    # vstore 2           # _result = string_tolower(s);
15 02    # vload 2            # _result
B0       # return             # 


#<string_terminated__1>
03                # number of arguments = 3
04                # number of local variables = 4
00 3C             # code length = 60 bytes
10 00    # bipush 0           # 0
15 01    # vload 1            # n
A4 00 06 # if_icmple +6       # if (0 <= n) goto <79:cond_true>
A7 00 18 # goto +24           # goto <80:cond_false>
# <79:cond_true>
15 01    # vload 1            # n
15 00    # vload 0            # A
BE       # arraylength        # \length(A)
A4 00 06 # if_icmple +6       # if (n <= \length(A)) goto <82:cond_true>
A7 00 08 # goto +8            # goto <83:cond_false>
# <82:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <84:cond_end>
# <83:cond_false>
10 00    # bipush 0           # false
# <84:cond_end>
A7 00 05 # goto +5            # goto <81:cond_end>
# <80:cond_false>
10 00    # bipush 0           # false
# <81:cond_end>
14 09 BB # aldc 2491          # s[2491] = "/afs/andrew/course/15/122/lib/string.h0: 52.6-52.41: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 0A 0D # aldc 2573          # s[2573] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/string.h0: 52.6-52.41: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= n) && (n <= \length(A))) [failure message on stack]
15 00    # vload 0            # A
15 01    # vload 1            # n
B7 00 0A # invokenative 10    # string_terminated(A, n)
36 03    # vstore 3           # _result = string_terminated(A, n);
15 03    # vload 3            # _result
B0       # return             # 


#<string_to_chararray__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 40             # code length = 64 bytes
15 00    # vload 0            # s
B7 00 0B # invokenative 11    # string_to_chararray(s)
36 02    # vstore 2           # _result = string_to_chararray(s);
15 02    # vload 2            # _result
BE       # arraylength        # \length(_result)
15 00    # vload 0            # s
14 0A 1F # aldc 2591          # s[2591] = "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)"
B8 00 0E # invokestatic 14    # string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)")
10 01    # bipush 1           # 1
60       # iadd               # (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)") + 1)
A2 00 06 # if_icmpge +6       # if (\length(_result) >= (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)") + 1)) goto <85:cond_true>
A7 00 08 # goto +8            # goto <86:cond_false>
# <85:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <87:cond_end>
# <86:cond_false>
10 00    # bipush 0           # false
# <87:cond_end>
14 0A 6D # aldc 2669          # s[2669] = "/afs/andrew/course/15/122/lib/string.h0: 56.6-56.55: @ensures annotation failed"
CF       # assert             # assert (\length(_result) >= (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 56.34-56.50)") + 1)) [failure message on stack]
15 02    # vload 2            # _result
15 00    # vload 0            # s
14 0A BD # aldc 2749          # s[2749] = "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)"
B8 00 0E # invokestatic 14    # string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)")
10 01    # bipush 1           # 1
60       # iadd               # (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)") + 1)
14 0B 0B # aldc 2827          # s[2827] = "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)"
B8 00 18 # invokestatic 24    # string_terminated__1(_result, (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)") + 1), "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)")
14 0B 59 # aldc 2905          # s[2905] = "/afs/andrew/course/15/122/lib/string.h0: 57.6-57.63: @ensures annotation failed"
CF       # assert             # assert string_terminated__1(_result, (string_length__1(s, "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.41-57.57)") + 1), "string_to_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 57.14-57.62)") [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<string_from_chararray__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 43             # code length = 67 bytes
15 00    # vload 0            # A
15 00    # vload 0            # A
BE       # arraylength        # \length(A)
14 0B A9 # aldc 2985          # s[2985] = "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)"
B8 00 18 # invokestatic 24    # string_terminated__1(A, \length(A), "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)")
14 0B F9 # aldc 3065          # s[3065] = "/afs/andrew/course/15/122/lib/string.h0: 62.6-62.48: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 0C 4B # aldc 3147          # s[3147] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/string.h0: 62.6-62.48: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert string_terminated__1(A, \length(A), "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 62.15-62.47)") [failure message on stack]
15 00    # vload 0            # A
B7 00 0C # invokenative 12    # string_from_chararray(A)
36 02    # vstore 2           # _result = string_from_chararray(A);
15 02    # vload 2            # _result
14 0C 5D # aldc 3165          # s[3165] = "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)"
B8 00 0E # invokestatic 14    # string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)")
10 01    # bipush 1           # 1
60       # iadd               # (string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)") + 1)
15 00    # vload 0            # A
BE       # arraylength        # \length(A)
A4 00 06 # if_icmple +6       # if ((string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)") + 1) <= \length(A)) goto <88:cond_true>
A7 00 08 # goto +8            # goto <89:cond_false>
# <88:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <90:cond_end>
# <89:cond_false>
10 00    # bipush 0           # false
# <90:cond_end>
14 0C AD # aldc 3245          # s[3245] = "/afs/andrew/course/15/122/lib/string.h0: 63.6-63.55: @ensures annotation failed"
CF       # assert             # assert ((string_length__1(_result, "string_from_chararray__1 (/afs/andrew/course/15/122/lib/string.h0: 63.14-63.36)") + 1) <= \length(A)) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<char_ord__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 2E             # code length = 46 bytes
15 00    # vload 0            # c
B7 00 0D # invokenative 13    # char_ord(c)
36 02    # vstore 2           # _result = char_ord(c);
10 00    # bipush 0           # 0
15 02    # vload 2            # _result
A4 00 06 # if_icmple +6       # if (0 <= _result) goto <91:cond_true>
A7 00 17 # goto +23           # goto <92:cond_false>
# <91:cond_true>
15 02    # vload 2            # _result
10 7F    # bipush 127         # 127
A4 00 06 # if_icmple +6       # if (_result <= 127) goto <94:cond_true>
A7 00 08 # goto +8            # goto <95:cond_false>
# <94:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <96:cond_end>
# <95:cond_false>
10 00    # bipush 0           # false
# <96:cond_end>
A7 00 05 # goto +5            # goto <93:cond_end>
# <92:cond_false>
10 00    # bipush 0           # false
# <93:cond_end>
14 0C FD # aldc 3325          # s[3325] = "/afs/andrew/course/15/122/lib/string.h0: 67.6-67.45: @ensures annotation failed"
CF       # assert             # assert ((0 <= _result) && (_result <= 127)) [failure message on stack]
15 02    # vload 2            # _result
B0       # return             # 


#<char_chr__1>
02                # number of arguments = 2
03                # number of local variables = 3
00 39             # code length = 57 bytes
10 00    # bipush 0           # 0
15 00    # vload 0            # n
A4 00 06 # if_icmple +6       # if (0 <= n) goto <97:cond_true>
A7 00 17 # goto +23           # goto <98:cond_false>
# <97:cond_true>
15 00    # vload 0            # n
10 7F    # bipush 127         # 127
A4 00 06 # if_icmple +6       # if (n <= 127) goto <100:cond_true>
A7 00 08 # goto +8            # goto <101:cond_false>
# <100:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <102:cond_end>
# <101:cond_false>
10 00    # bipush 0           # false
# <102:cond_end>
A7 00 05 # goto +5            # goto <99:cond_end>
# <98:cond_false>
10 00    # bipush 0           # false
# <99:cond_end>
14 0D 4D # aldc 3405          # s[3405] = "/afs/andrew/course/15/122/lib/string.h0: 69.6-69.34: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 0D 9F # aldc 3487          # s[3487] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/string.h0: 69.6-69.34: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= n) && (n <= 127)) [failure message on stack]
15 00    # vload 0            # n
B7 00 0E # invokenative 14    # char_chr(n)
36 02    # vstore 2           # _result = char_chr(n);
15 02    # vload 2            # _result
B0       # return             # 


#<hexdig2char>
02                # number of arguments = 2
03                # number of local variables = 3
00 93             # code length = 147 bytes
10 00    # bipush 0           # 0
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (0 <= d) goto <142:cond_true>
A7 00 17 # goto +23           # goto <143:cond_false>
# <142:cond_true>
15 00    # vload 0            # d
10 10    # bipush 16          # 16
A1 00 06 # if_icmplt +6       # if (d < 16) goto <145:cond_true>
A7 00 08 # goto +8            # goto <146:cond_false>
# <145:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <147:cond_end>
# <146:cond_false>
10 00    # bipush 0           # false
# <147:cond_end>
A7 00 05 # goto +5            # goto <144:cond_end>
# <143:cond_false>
10 00    # bipush 0           # false
# <144:cond_end>
14 0F D2 # aldc 4050          # s[4050] = "/afs/andrew/course/15/122/lib/util.c0: 37.4-37.30: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 10 22 # aldc 4130          # s[4130] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/util.c0: 37.4-37.30: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= d) && (d < 16)) [failure message on stack]
10 00    # bipush 0           # 0
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (0 <= d) goto <151:and>
A7 00 26 # goto +38           # goto <149:else>
# <151:and>
15 00    # vload 0            # d
10 0A    # bipush 10          # 10
A1 00 06 # if_icmplt +6       # if (d < 10) goto <148:then>
A7 00 1C # goto +28           # goto <149:else>
# <148:then>
10 30    # bipush 48          # '0'
14 10 34 # aldc 4148          # s[4148] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)"
B8 00 1B # invokestatic 27    # char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)")
15 00    # vload 0            # d
60       # iadd               # (char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)") + d)
14 10 75 # aldc 4213          # s[4213] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)"
B8 00 1C # invokestatic 28    # char_chr__1((char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)") + d), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)")
36 02    # vstore 2           # _result = char_chr__1((char_ord__1('0', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.21-40.34)") + d), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 40.12-40.39)");
15 02    # vload 2            # _result
B0       # return             # 
A7 00 3A # goto +58           # goto <150:endif>
# <149:else>
10 0A    # bipush 10          # 10
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (10 <= d) goto <155:and>
A7 00 29 # goto +41           # goto <153:else>
# <155:and>
15 00    # vload 0            # d
10 10    # bipush 16          # 16
A1 00 06 # if_icmplt +6       # if (d < 16) goto <152:then>
A7 00 1F # goto +31           # goto <153:else>
# <152:then>
10 41    # bipush 65          # 'A'
14 10 B6 # aldc 4278          # s[4278] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)"
B8 00 1B # invokestatic 27    # char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)")
15 00    # vload 0            # d
10 0A    # bipush 10          # 10
64       # isub               # (d - 10)
60       # iadd               # (char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)") + (d - 10))
14 10 F7 # aldc 4343          # s[4343] = "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)"
B8 00 1C # invokestatic 28    # char_chr__1((char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)") + (d - 10)), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)")
36 02    # vstore 2           # _result = char_chr__1((char_ord__1('A', "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.21-42.34)") + (d - 10)), "hexdig2char (/afs/andrew/course/15/122/lib/util.c0: 42.12-42.44)");
15 02    # vload 2            # _result
B0       # return             # 
A7 00 0A # goto +10           # goto <154:endif>
# <153:else>
10 3F    # bipush 63          # '\?'
36 02    # vstore 2           # _result = '?';
15 02    # vload 2            # _result
B0       # return             # 
# <154:endif>
# <150:endif>


#<print__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # s
B7 00 0F # invokenative 15    # print(s)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<println__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # s
B7 00 10 # invokenative 16    # println(s)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<printint__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # i
B7 00 11 # invokenative 17    # printint(i)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<printbool__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # b
B7 00 12 # invokenative 18    # printbool(b)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<printchar__1>
02                # number of arguments = 2
02                # number of local variables = 2
00 0C             # code length = 12 bytes
15 00    # vload 0            # c
B7 00 13 # invokenative 19    # printchar(c)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<flush__1>
01                # number of arguments = 1
01                # number of local variables = 1
00 0A             # code length = 10 bytes
B7 00 14 # invokenative 20    # flush()
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<eof__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 08             # code length = 8 bytes
B7 00 15 # invokenative 21    # eof()
36 01    # vstore 1           # _result = eof();
15 01    # vload 1            # _result
B0       # return             # 


#<readline__1>
01                # number of arguments = 1
02                # number of local variables = 2
00 20             # code length = 32 bytes
14 13 0C # aldc 4876          # s[4876] = "readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)"
B8 00 24 # invokestatic 36    # eof__1("readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)")
10 01    # bipush 1           # 
82       # ixor               # !(eof__1("readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)"))
14 13 4E # aldc 4942          # s[4942] = "/afs/andrew/course/15/122/lib/conio.h0: 14.6-14.22: @requires annotation failed\n"
15 00    # vload 0            # _caller
14 13 9F # aldc 5023          # s[5023] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("/afs/andrew/course/15/122/lib/conio.h0: 14.6-14.22: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert !(eof__1("readline__1 (/afs/andrew/course/15/122/lib/conio.h0: 14.16-14.21)")) [failure message on stack]
B7 00 16 # invokenative 22    # readline()
36 01    # vstore 1           # _result = readline();
15 01    # vload 1            # _result
B0       # return             # 


#<make_pixel>
05                # number of arguments = 5
07                # number of local variables = 7
00 43             # code length = 67 bytes
10 04    # bipush 4           # 4
BC 04    # newarray 4         # alloc_array(int, 4)
36 06    # vstore 6           # p = alloc_array(int, 4);
15 06    # vload 6            # p
10 00    # bipush 0           # 0
63       # aadds              # &p[0]
15 00    # vload 0            # alpha
4E       # imstore            # p[0] = alpha;
15 06    # vload 6            # p
10 01    # bipush 1           # 1
63       # aadds              # &p[1]
15 01    # vload 1            # red
4E       # imstore            # p[1] = red;
15 06    # vload 6            # p
10 02    # bipush 2           # 2
63       # aadds              # &p[2]
15 02    # vload 2            # green
4E       # imstore            # p[2] = green;
15 06    # vload 6            # p
10 03    # bipush 3           # 3
63       # aadds              # &p[3]
15 03    # vload 3            # blue
4E       # imstore            # p[3] = blue;
15 06    # vload 6            # p
36 05    # vstore 5           # _result = p;
15 05    # vload 5            # _result
BE       # arraylength        # \length(_result)
10 04    # bipush 4           # 4
9F 00 06 # if_cmpeq +6        # if (\length(_result) == 4) goto <171:cond_true>
A7 00 08 # goto +8            # goto <172:cond_false>
# <171:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <173:cond_end>
# <172:cond_false>
10 00    # bipush 0           # false
# <173:cond_end>
14 13 B1 # aldc 5041          # s[5041] = ".tmp0/pixel-array.c0: 10.4-10.34: @ensures annotation failed"
CF       # assert             # assert (\length(_result) == 4) [failure message on stack]
15 05    # vload 5            # _result
B0       # return             # 


#<get_alpha>
02                # number of arguments = 2
03                # number of local variables = 3
00 2C             # code length = 44 bytes
15 00    # vload 0            # p
BE       # arraylength        # \length(p)
10 04    # bipush 4           # 4
9F 00 06 # if_cmpeq +6        # if (\length(p) == 4) goto <174:cond_true>
A7 00 08 # goto +8            # goto <175:cond_false>
# <174:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <176:cond_end>
# <175:cond_false>
10 00    # bipush 0           # false
# <176:cond_end>
14 13 EE # aldc 5102          # s[5102] = ".tmp0/pixel-array.c0: 21.4-21.29: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 14 2D # aldc 5165          # s[5165] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join(".tmp0/pixel-array.c0: 21.4-21.29: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (\length(p) == 4) [failure message on stack]
15 00    # vload 0            # p
10 00    # bipush 0           # 0
63       # aadds              # &p[0]
2E       # imload             # p[0]
36 02    # vstore 2           # _result = p[0];
15 02    # vload 2            # _result
B0       # return             # 


#<get_red>
02                # number of arguments = 2
03                # number of local variables = 3
00 2C             # code length = 44 bytes
15 00    # vload 0            # p
BE       # arraylength        # \length(p)
10 04    # bipush 4           # 4
9F 00 06 # if_cmpeq +6        # if (\length(p) == 4) goto <177:cond_true>
A7 00 08 # goto +8            # goto <178:cond_false>
# <177:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <179:cond_end>
# <178:cond_false>
10 00    # bipush 0           # false
# <179:cond_end>
14 14 3F # aldc 5183          # s[5183] = ".tmp0/pixel-array.c0: 28.4-28.29: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 14 7E # aldc 5246          # s[5246] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join(".tmp0/pixel-array.c0: 28.4-28.29: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (\length(p) == 4) [failure message on stack]
15 00    # vload 0            # p
10 01    # bipush 1           # 1
63       # aadds              # &p[1]
2E       # imload             # p[1]
36 02    # vstore 2           # _result = p[1];
15 02    # vload 2            # _result
B0       # return             # 


#<get_green>
02                # number of arguments = 2
03                # number of local variables = 3
00 2C             # code length = 44 bytes
15 00    # vload 0            # p
BE       # arraylength        # \length(p)
10 04    # bipush 4           # 4
9F 00 06 # if_cmpeq +6        # if (\length(p) == 4) goto <180:cond_true>
A7 00 08 # goto +8            # goto <181:cond_false>
# <180:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <182:cond_end>
# <181:cond_false>
10 00    # bipush 0           # false
# <182:cond_end>
14 14 90 # aldc 5264          # s[5264] = ".tmp0/pixel-array.c0: 35.4-35.29: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 14 CF # aldc 5327          # s[5327] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join(".tmp0/pixel-array.c0: 35.4-35.29: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (\length(p) == 4) [failure message on stack]
15 00    # vload 0            # p
10 02    # bipush 2           # 2
63       # aadds              # &p[2]
2E       # imload             # p[2]
36 02    # vstore 2           # _result = p[2];
15 02    # vload 2            # _result
B0       # return             # 


#<get_blue>
02                # number of arguments = 2
03                # number of local variables = 3
00 2C             # code length = 44 bytes
15 00    # vload 0            # p
BE       # arraylength        # \length(p)
10 04    # bipush 4           # 4
9F 00 06 # if_cmpeq +6        # if (\length(p) == 4) goto <183:cond_true>
A7 00 08 # goto +8            # goto <184:cond_false>
# <183:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <185:cond_end>
# <184:cond_false>
10 00    # bipush 0           # false
# <185:cond_end>
14 14 E1 # aldc 5345          # s[5345] = ".tmp0/pixel-array.c0: 42.4-42.29: @requires annotation failed\n"
15 01    # vload 1            # _caller
14 15 20 # aldc 5408          # s[5408] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join(".tmp0/pixel-array.c0: 42.4-42.29: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert (\length(p) == 4) [failure message on stack]
15 00    # vload 0            # p
10 03    # bipush 3           # 3
63       # aadds              # &p[3]
2E       # imload             # p[3]
36 02    # vstore 2           # _result = p[3];
15 02    # vload 2            # _result
B0       # return             # 


#<pixel_print>
02                # number of arguments = 2
02                # number of local variables = 2
00 EB             # code length = 235 bytes
14 15 32 # aldc 5426          # s[5426] = ""
14 15 33 # aldc 5427          # s[5427] = "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)")
57       # pop                # (ignore result)
15 00    # vload 0            # p
14 15 62 # aldc 5474          # s[5474] = "pixel_print (.tmp0/pixel-array.c0: 54.35-54.47)"
B8 00 27 # invokestatic 39    # get_alpha(p, "pixel_print (.tmp0/pixel-array.c0: 54.35-54.47)")
14 15 92 # aldc 5522          # s[5522] = "pixel_print (.tmp0/pixel-array.c0: 54.27-54.48)"
B8 00 0D # invokestatic 13    # int2hex(get_alpha(p, "pixel_print (.tmp0/pixel-array.c0: 54.35-54.47)"), "pixel_print (.tmp0/pixel-array.c0: 54.27-54.48)")
10 06    # bipush 6           # 6
10 08    # bipush 8           # 8
14 15 C2 # aldc 5570          # s[5570] = "pixel_print (.tmp0/pixel-array.c0: 54.16-54.55)"
B8 00 11 # invokestatic 17    # string_sub__1(int2hex(get_alpha(p, "pixel_print (.tmp0/pixel-array.c0: 54.35-54.47)"), "pixel_print (.tmp0/pixel-array.c0: 54.27-54.48)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 54.16-54.55)")
14 15 F2 # aldc 5618          # s[5618] = "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)"
B8 00 1E # invokestatic 30    # print__1(string_sub__1(int2hex(get_alpha(p, "pixel_print (.tmp0/pixel-array.c0: 54.35-54.47)"), "pixel_print (.tmp0/pixel-array.c0: 54.27-54.48)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 54.16-54.55)"), "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)")
57       # pop                # (ignore result)
14 16 21 # aldc 5665          # s[5665] = ""
14 16 22 # aldc 5666          # s[5666] = "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 54.3-54.56)")
57       # pop                # (ignore result)
14 16 51 # aldc 5713          # s[5713] = "pixel_print (.tmp0/pixel-array.c0: 54.58-54.65)"
B8 00 23 # invokestatic 35    # flush__1("pixel_print (.tmp0/pixel-array.c0: 54.58-54.65)")
57       # pop                # (ignore result)
14 16 81 # aldc 5761          # s[5761] = ""
14 16 82 # aldc 5762          # s[5762] = "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)")
57       # pop                # (ignore result)
15 00    # vload 0            # p
14 16 B1 # aldc 5809          # s[5809] = "pixel_print (.tmp0/pixel-array.c0: 55.35-55.45)"
B8 00 28 # invokestatic 40    # get_red(p, "pixel_print (.tmp0/pixel-array.c0: 55.35-55.45)")
14 16 E1 # aldc 5857          # s[5857] = "pixel_print (.tmp0/pixel-array.c0: 55.27-55.46)"
B8 00 0D # invokestatic 13    # int2hex(get_red(p, "pixel_print (.tmp0/pixel-array.c0: 55.35-55.45)"), "pixel_print (.tmp0/pixel-array.c0: 55.27-55.46)")
10 06    # bipush 6           # 6
10 08    # bipush 8           # 8
14 17 11 # aldc 5905          # s[5905] = "pixel_print (.tmp0/pixel-array.c0: 55.16-55.55)"
B8 00 11 # invokestatic 17    # string_sub__1(int2hex(get_red(p, "pixel_print (.tmp0/pixel-array.c0: 55.35-55.45)"), "pixel_print (.tmp0/pixel-array.c0: 55.27-55.46)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 55.16-55.55)")
14 17 41 # aldc 5953          # s[5953] = "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)"
B8 00 1E # invokestatic 30    # print__1(string_sub__1(int2hex(get_red(p, "pixel_print (.tmp0/pixel-array.c0: 55.35-55.45)"), "pixel_print (.tmp0/pixel-array.c0: 55.27-55.46)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 55.16-55.55)"), "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)")
57       # pop                # (ignore result)
14 17 70 # aldc 6000          # s[6000] = ""
14 17 71 # aldc 6001          # s[6001] = "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 55.3-55.56)")
57       # pop                # (ignore result)
14 17 A0 # aldc 6048          # s[6048] = "pixel_print (.tmp0/pixel-array.c0: 55.58-55.65)"
B8 00 23 # invokestatic 35    # flush__1("pixel_print (.tmp0/pixel-array.c0: 55.58-55.65)")
57       # pop                # (ignore result)
14 17 D0 # aldc 6096          # s[6096] = ""
14 17 D1 # aldc 6097          # s[6097] = "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)")
57       # pop                # (ignore result)
15 00    # vload 0            # p
14 18 00 # aldc 6144          # s[6144] = "pixel_print (.tmp0/pixel-array.c0: 56.35-56.47)"
B8 00 29 # invokestatic 41    # get_green(p, "pixel_print (.tmp0/pixel-array.c0: 56.35-56.47)")
14 18 30 # aldc 6192          # s[6192] = "pixel_print (.tmp0/pixel-array.c0: 56.27-56.48)"
B8 00 0D # invokestatic 13    # int2hex(get_green(p, "pixel_print (.tmp0/pixel-array.c0: 56.35-56.47)"), "pixel_print (.tmp0/pixel-array.c0: 56.27-56.48)")
10 06    # bipush 6           # 6
10 08    # bipush 8           # 8
14 18 60 # aldc 6240          # s[6240] = "pixel_print (.tmp0/pixel-array.c0: 56.16-56.55)"
B8 00 11 # invokestatic 17    # string_sub__1(int2hex(get_green(p, "pixel_print (.tmp0/pixel-array.c0: 56.35-56.47)"), "pixel_print (.tmp0/pixel-array.c0: 56.27-56.48)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 56.16-56.55)")
14 18 90 # aldc 6288          # s[6288] = "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)"
B8 00 1E # invokestatic 30    # print__1(string_sub__1(int2hex(get_green(p, "pixel_print (.tmp0/pixel-array.c0: 56.35-56.47)"), "pixel_print (.tmp0/pixel-array.c0: 56.27-56.48)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 56.16-56.55)"), "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)")
57       # pop                # (ignore result)
14 18 BF # aldc 6335          # s[6335] = ""
14 18 C0 # aldc 6336          # s[6336] = "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 56.3-56.56)")
57       # pop                # (ignore result)
14 18 EF # aldc 6383          # s[6383] = "pixel_print (.tmp0/pixel-array.c0: 56.58-56.65)"
B8 00 23 # invokestatic 35    # flush__1("pixel_print (.tmp0/pixel-array.c0: 56.58-56.65)")
57       # pop                # (ignore result)
14 19 1F # aldc 6431          # s[6431] = ""
14 19 20 # aldc 6432          # s[6432] = "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)")
57       # pop                # (ignore result)
15 00    # vload 0            # p
14 19 4F # aldc 6479          # s[6479] = "pixel_print (.tmp0/pixel-array.c0: 57.35-57.46)"
B8 00 2A # invokestatic 42    # get_blue(p, "pixel_print (.tmp0/pixel-array.c0: 57.35-57.46)")
14 19 7F # aldc 6527          # s[6527] = "pixel_print (.tmp0/pixel-array.c0: 57.27-57.47)"
B8 00 0D # invokestatic 13    # int2hex(get_blue(p, "pixel_print (.tmp0/pixel-array.c0: 57.35-57.46)"), "pixel_print (.tmp0/pixel-array.c0: 57.27-57.47)")
10 06    # bipush 6           # 6
10 08    # bipush 8           # 8
14 19 AF # aldc 6575          # s[6575] = "pixel_print (.tmp0/pixel-array.c0: 57.16-57.55)"
B8 00 11 # invokestatic 17    # string_sub__1(int2hex(get_blue(p, "pixel_print (.tmp0/pixel-array.c0: 57.35-57.46)"), "pixel_print (.tmp0/pixel-array.c0: 57.27-57.47)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 57.16-57.55)")
14 19 DF # aldc 6623          # s[6623] = "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)"
B8 00 1E # invokestatic 30    # print__1(string_sub__1(int2hex(get_blue(p, "pixel_print (.tmp0/pixel-array.c0: 57.35-57.46)"), "pixel_print (.tmp0/pixel-array.c0: 57.27-57.47)"), 6, 8, "pixel_print (.tmp0/pixel-array.c0: 57.16-57.55)"), "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)")
57       # pop                # (ignore result)
14 1A 0E # aldc 6670          # s[6670] = ""
14 1A 0F # aldc 6671          # s[6671] = "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)"
B8 00 1E # invokestatic 30    # print__1("", "pixel_print (.tmp0/pixel-array.c0: 57.3-57.56)")
57       # pop                # (ignore result)
14 1A 3E # aldc 6718          # s[6718] = "pixel_print (.tmp0/pixel-array.c0: 57.58-57.65)"
B8 00 23 # invokestatic 35    # flush__1("pixel_print (.tmp0/pixel-array.c0: 57.58-57.65)")
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<quantize>
03                # number of arguments = 3
09                # number of local variables = 9
00 80             # code length = 128 bytes
10 00    # bipush 0           # 0
15 01    # vload 1            # q
A4 00 06 # if_icmple +6       # if (0 <= q) goto <186:cond_true>
A7 00 17 # goto +23           # goto <187:cond_false>
# <186:cond_true>
15 01    # vload 1            # q
10 08    # bipush 8           # 8
A4 00 06 # if_icmple +6       # if (q <= 8) goto <189:cond_true>
A7 00 08 # goto +8            # goto <190:cond_false>
# <189:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <191:cond_end>
# <190:cond_false>
10 00    # bipush 0           # false
# <191:cond_end>
A7 00 05 # goto +5            # goto <188:cond_end>
# <187:cond_false>
10 00    # bipush 0           # false
# <188:cond_end>
14 1A 6E # aldc 6766          # s[6766] = "quantize.c0: 23.4-23.30: @requires annotation failed\n"
15 02    # vload 2            # _caller
14 1A A4 # aldc 6820          # s[6820] = ": caller location"
B7 00 00 # invokenative 0     # string_join(_caller, ": caller location")
B7 00 00 # invokenative 0     # string_join("quantize.c0: 23.4-23.30: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert             # assert ((0 <= q) && (q <= 8)) [failure message on stack]
10 FF    # bipush -1          # -1
36 04    # vstore 4           # mask = -1;
15 00    # vload 0            # p
14 1A B6 # aldc 6838          # s[6838] = "quantize (quantize.c0: 27.14-27.26)"
B8 00 27 # invokestatic 39    # get_alpha(p, "quantize (quantize.c0: 27.14-27.26)")
36 05    # vstore 5           # alpha = get_alpha(p, "quantize (quantize.c0: 27.14-27.26)");
15 00    # vload 0            # p
14 1A DA # aldc 6874          # s[6874] = "quantize (quantize.c0: 28.14-28.24)"
B8 00 28 # invokestatic 40    # get_red(p, "quantize (quantize.c0: 28.14-28.24)")
15 04    # vload 4            # mask
15 01    # vload 1            # q
78       # ishl               # (mask << q)
7E       # iand               # (get_red(p, "quantize (quantize.c0: 28.14-28.24)") & (mask << q))
36 06    # vstore 6           # red = (get_red(p, "quantize (quantize.c0: 28.14-28.24)") & (mask << q));
15 00    # vload 0            # p
14 1A FE # aldc 6910          # s[6910] = "quantize (quantize.c0: 29.16-29.28)"
B8 00 29 # invokestatic 41    # get_green(p, "quantize (quantize.c0: 29.16-29.28)")
15 04    # vload 4            # mask
15 01    # vload 1            # q
78       # ishl               # (mask << q)
7E       # iand               # (get_green(p, "quantize (quantize.c0: 29.16-29.28)") & (mask << q))
36 07    # vstore 7           # green = (get_green(p, "quantize (quantize.c0: 29.16-29.28)") & (mask << q));
15 00    # vload 0            # p
14 1B 22 # aldc 6946          # s[6946] = "quantize (quantize.c0: 30.15-30.26)"
B8 00 2A # invokestatic 42    # get_blue(p, "quantize (quantize.c0: 30.15-30.26)")
15 04    # vload 4            # mask
15 01    # vload 1            # q
78       # ishl               # (mask << q)
7E       # iand               # (get_blue(p, "quantize (quantize.c0: 30.15-30.26)") & (mask << q))
36 08    # vstore 8           # blue = (get_blue(p, "quantize (quantize.c0: 30.15-30.26)") & (mask << q));
15 05    # vload 5            # alpha
15 06    # vload 6            # red
15 07    # vload 7            # green
15 08    # vload 8            # blue
14 1B 46 # aldc 6982          # s[6982] = "quantize (quantize.c0: 31.10-31.45)"
B8 00 26 # invokestatic 38    # make_pixel(alpha, red, green, blue, "quantize (quantize.c0: 31.10-31.45)")
36 03    # vstore 3           # _result = make_pixel(alpha, red, green, blue, "quantize (quantize.c0: 31.10-31.45)");
15 03    # vload 3            # _result
B0       # return             # 


#<test_quantize>
01                # number of arguments = 1
02                # number of local variables = 2
05 E1             # code length = 1505 bytes
13 00 04 # ildc 4             # c[4] = 255
13 00 05 # ildc 5             # c[5] = 255
13 00 06 # ildc 6             # c[6] = 255
13 00 07 # ildc 7             # c[7] = 255
14 1B 6A # aldc 7018          # s[7018] = "test_quantize (quantize.c0: 44.24-44.58)"
B8 00 26 # invokestatic 38    # make_pixel(255, 255, 255, 255, "test_quantize (quantize.c0: 44.24-44.58)")
10 04    # bipush 4           # 4
14 1B 93 # aldc 7059          # s[7059] = "test_quantize (quantize.c0: 44.15-44.62)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(255, 255, 255, 255, "test_quantize (quantize.c0: 44.24-44.58)"), 4, "test_quantize (quantize.c0: 44.15-44.62)")
36 01    # vstore 1           # p = quantize(make_pixel(255, 255, 255, 255, "test_quantize (quantize.c0: 44.24-44.58)"), 4, "test_quantize (quantize.c0: 44.15-44.62)");
15 01    # vload 1            # p
14 1B BC # aldc 7100          # s[7100] = "test_quantize (quantize.c0: 45.10-45.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 45.10-45.22)")
13 00 08 # ildc 8             # c[8] = 255
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 45.10-45.22)") == 255) goto <192:cond_true>
A7 00 08 # goto +8            # goto <193:cond_false>
# <192:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <194:cond_end>
# <193:cond_false>
10 00    # bipush 0           # false
# <194:cond_end>
14 1B E5 # aldc 7141          # s[7141] = "quantize.c0: 45.3-45.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 45.10-45.22)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 1C 0C # aldc 7180          # s[7180] = "test_quantize (quantize.c0: 46.10-46.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 46.10-46.20)")
13 00 09 # ildc 9             # c[9] = 240
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 46.10-46.20)") == 240) goto <195:cond_true>
A7 00 08 # goto +8            # goto <196:cond_false>
# <195:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <197:cond_end>
# <196:cond_false>
10 00    # bipush 0           # false
# <197:cond_end>
14 1C 35 # aldc 7221          # s[7221] = "quantize.c0: 46.3-46.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 46.10-46.20)") == 240) [failure message on stack]
15 01    # vload 1            # p
14 1C 5C # aldc 7260          # s[7260] = "test_quantize (quantize.c0: 47.10-47.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 47.10-47.22)")
13 00 0A # ildc 10            # c[10] = 240
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 47.10-47.22)") == 240) goto <198:cond_true>
A7 00 08 # goto +8            # goto <199:cond_false>
# <198:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <200:cond_end>
# <199:cond_false>
10 00    # bipush 0           # false
# <200:cond_end>
14 1C 85 # aldc 7301          # s[7301] = "quantize.c0: 47.3-47.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 47.10-47.22)") == 240) [failure message on stack]
15 01    # vload 1            # p
14 1C AC # aldc 7340          # s[7340] = "test_quantize (quantize.c0: 48.10-48.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 48.10-48.21)")
13 00 0B # ildc 11            # c[11] = 240
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 48.10-48.21)") == 240) goto <201:cond_true>
A7 00 08 # goto +8            # goto <202:cond_false>
# <201:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <203:cond_end>
# <202:cond_false>
10 00    # bipush 0           # false
# <203:cond_end>
14 1C D5 # aldc 7381          # s[7381] = "quantize.c0: 48.3-48.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 48.10-48.21)") == 240) [failure message on stack]
13 00 0C # ildc 12            # c[12] = 255
13 00 0D # ildc 13            # c[13] = 255
10 37    # bipush 55          # 55
10 00    # bipush 0           # 0
14 1C FC # aldc 7420          # s[7420] = "test_quantize (quantize.c0: 51.16-51.50)"
B8 00 26 # invokestatic 38    # make_pixel(255, 255, 55, 0, "test_quantize (quantize.c0: 51.16-51.50)")
10 00    # bipush 0           # 0
14 1D 25 # aldc 7461          # s[7461] = "test_quantize (quantize.c0: 51.7-51.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(255, 255, 55, 0, "test_quantize (quantize.c0: 51.16-51.50)"), 0, "test_quantize (quantize.c0: 51.7-51.54)")
36 01    # vstore 1           # p = quantize(make_pixel(255, 255, 55, 0, "test_quantize (quantize.c0: 51.16-51.50)"), 0, "test_quantize (quantize.c0: 51.7-51.54)");
15 01    # vload 1            # p
14 1D 4D # aldc 7501          # s[7501] = "test_quantize (quantize.c0: 52.10-52.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 52.10-52.22)")
13 00 0E # ildc 14            # c[14] = 255
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 52.10-52.22)") == 255) goto <204:cond_true>
A7 00 08 # goto +8            # goto <205:cond_false>
# <204:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <206:cond_end>
# <205:cond_false>
10 00    # bipush 0           # false
# <206:cond_end>
14 1D 76 # aldc 7542          # s[7542] = "quantize.c0: 52.3-52.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 52.10-52.22)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 1D 9D # aldc 7581          # s[7581] = "test_quantize (quantize.c0: 53.10-53.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 53.10-53.20)")
13 00 0F # ildc 15            # c[15] = 255
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 53.10-53.20)") == 255) goto <207:cond_true>
A7 00 08 # goto +8            # goto <208:cond_false>
# <207:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <209:cond_end>
# <208:cond_false>
10 00    # bipush 0           # false
# <209:cond_end>
14 1D C6 # aldc 7622          # s[7622] = "quantize.c0: 53.3-53.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 53.10-53.20)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 1D ED # aldc 7661          # s[7661] = "test_quantize (quantize.c0: 54.10-54.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 54.10-54.22)")
10 37    # bipush 55          # 55
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 54.10-54.22)") == 55) goto <210:cond_true>
A7 00 08 # goto +8            # goto <211:cond_false>
# <210:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <212:cond_end>
# <211:cond_false>
10 00    # bipush 0           # false
# <212:cond_end>
14 1E 16 # aldc 7702          # s[7702] = "quantize.c0: 54.3-54.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 54.10-54.22)") == 55) [failure message on stack]
15 01    # vload 1            # p
14 1E 3D # aldc 7741          # s[7741] = "test_quantize (quantize.c0: 55.10-55.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 55.10-55.21)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 55.10-55.21)") == 0) goto <213:cond_true>
A7 00 08 # goto +8            # goto <214:cond_false>
# <213:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <215:cond_end>
# <214:cond_false>
10 00    # bipush 0           # false
# <215:cond_end>
14 1E 66 # aldc 7782          # s[7782] = "quantize.c0: 55.3-55.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 55.10-55.21)") == 0) [failure message on stack]
13 00 10 # ildc 16            # c[16] = 166
13 00 11 # ildc 17            # c[17] = 181
13 00 12 # ildc 18            # c[18] = 196
13 00 13 # ildc 19            # c[19] = 208
14 1E 8D # aldc 7821          # s[7821] = "test_quantize (quantize.c0: 56.16-56.50)"
B8 00 26 # invokestatic 38    # make_pixel(166, 181, 196, 208, "test_quantize (quantize.c0: 56.16-56.50)")
10 00    # bipush 0           # 0
14 1E B6 # aldc 7862          # s[7862] = "test_quantize (quantize.c0: 56.7-56.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(166, 181, 196, 208, "test_quantize (quantize.c0: 56.16-56.50)"), 0, "test_quantize (quantize.c0: 56.7-56.54)")
36 01    # vstore 1           # p = quantize(make_pixel(166, 181, 196, 208, "test_quantize (quantize.c0: 56.16-56.50)"), 0, "test_quantize (quantize.c0: 56.7-56.54)");
15 01    # vload 1            # p
14 1E DE # aldc 7902          # s[7902] = "test_quantize (quantize.c0: 57.10-57.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 57.10-57.22)")
13 00 14 # ildc 20            # c[20] = 166
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 57.10-57.22)") == 166) goto <216:cond_true>
A7 00 08 # goto +8            # goto <217:cond_false>
# <216:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <218:cond_end>
# <217:cond_false>
10 00    # bipush 0           # false
# <218:cond_end>
14 1F 07 # aldc 7943          # s[7943] = "quantize.c0: 57.3-57.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 57.10-57.22)") == 166) [failure message on stack]
15 01    # vload 1            # p
14 1F 2E # aldc 7982          # s[7982] = "test_quantize (quantize.c0: 58.10-58.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 58.10-58.20)")
13 00 15 # ildc 21            # c[21] = 181
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 58.10-58.20)") == 181) goto <219:cond_true>
A7 00 08 # goto +8            # goto <220:cond_false>
# <219:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <221:cond_end>
# <220:cond_false>
10 00    # bipush 0           # false
# <221:cond_end>
14 1F 57 # aldc 8023          # s[8023] = "quantize.c0: 58.3-58.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 58.10-58.20)") == 181) [failure message on stack]
15 01    # vload 1            # p
14 1F 7E # aldc 8062          # s[8062] = "test_quantize (quantize.c0: 59.10-59.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 59.10-59.22)")
13 00 16 # ildc 22            # c[22] = 196
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 59.10-59.22)") == 196) goto <222:cond_true>
A7 00 08 # goto +8            # goto <223:cond_false>
# <222:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <224:cond_end>
# <223:cond_false>
10 00    # bipush 0           # false
# <224:cond_end>
14 1F A7 # aldc 8103          # s[8103] = "quantize.c0: 59.3-59.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 59.10-59.22)") == 196) [failure message on stack]
15 01    # vload 1            # p
14 1F CE # aldc 8142          # s[8142] = "test_quantize (quantize.c0: 60.10-60.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 60.10-60.21)")
13 00 17 # ildc 23            # c[23] = 208
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 60.10-60.21)") == 208) goto <225:cond_true>
A7 00 08 # goto +8            # goto <226:cond_false>
# <225:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <227:cond_end>
# <226:cond_false>
10 00    # bipush 0           # false
# <227:cond_end>
14 1F F7 # aldc 8183          # s[8183] = "quantize.c0: 60.3-60.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 60.10-60.21)") == 208) [failure message on stack]
13 00 18 # ildc 24            # c[24] = 255
10 1A    # bipush 26          # 26
10 35    # bipush 53          # 53
13 00 19 # ildc 25            # c[25] = 255
14 20 1E # aldc 8222          # s[8222] = "test_quantize (quantize.c0: 61.16-61.50)"
B8 00 26 # invokestatic 38    # make_pixel(255, 26, 53, 255, "test_quantize (quantize.c0: 61.16-61.50)")
10 01    # bipush 1           # 1
14 20 47 # aldc 8263          # s[8263] = "test_quantize (quantize.c0: 61.7-61.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(255, 26, 53, 255, "test_quantize (quantize.c0: 61.16-61.50)"), 1, "test_quantize (quantize.c0: 61.7-61.54)")
36 01    # vstore 1           # p = quantize(make_pixel(255, 26, 53, 255, "test_quantize (quantize.c0: 61.16-61.50)"), 1, "test_quantize (quantize.c0: 61.7-61.54)");
15 01    # vload 1            # p
14 20 6F # aldc 8303          # s[8303] = "test_quantize (quantize.c0: 62.10-62.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 62.10-62.22)")
13 00 1A # ildc 26            # c[26] = 255
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 62.10-62.22)") == 255) goto <228:cond_true>
A7 00 08 # goto +8            # goto <229:cond_false>
# <228:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <230:cond_end>
# <229:cond_false>
10 00    # bipush 0           # false
# <230:cond_end>
14 20 98 # aldc 8344          # s[8344] = "quantize.c0: 62.3-62.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 62.10-62.22)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 20 BF # aldc 8383          # s[8383] = "test_quantize (quantize.c0: 63.10-63.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 63.10-63.20)")
10 1A    # bipush 26          # 26
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 63.10-63.20)") == 26) goto <231:cond_true>
A7 00 08 # goto +8            # goto <232:cond_false>
# <231:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <233:cond_end>
# <232:cond_false>
10 00    # bipush 0           # false
# <233:cond_end>
14 20 E8 # aldc 8424          # s[8424] = "quantize.c0: 63.3-63.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 63.10-63.20)") == 26) [failure message on stack]
15 01    # vload 1            # p
14 21 0F # aldc 8463          # s[8463] = "test_quantize (quantize.c0: 64.10-64.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 64.10-64.22)")
10 34    # bipush 52          # 52
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 64.10-64.22)") == 52) goto <234:cond_true>
A7 00 08 # goto +8            # goto <235:cond_false>
# <234:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <236:cond_end>
# <235:cond_false>
10 00    # bipush 0           # false
# <236:cond_end>
14 21 38 # aldc 8504          # s[8504] = "quantize.c0: 64.3-64.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 64.10-64.22)") == 52) [failure message on stack]
15 01    # vload 1            # p
14 21 5F # aldc 8543          # s[8543] = "test_quantize (quantize.c0: 65.10-65.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 65.10-65.21)")
13 00 1B # ildc 27            # c[27] = 254
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 65.10-65.21)") == 254) goto <237:cond_true>
A7 00 08 # goto +8            # goto <238:cond_false>
# <237:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <239:cond_end>
# <238:cond_false>
10 00    # bipush 0           # false
# <239:cond_end>
14 21 88 # aldc 8584          # s[8584] = "quantize.c0: 65.3-65.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 65.10-65.21)") == 254) [failure message on stack]
10 43    # bipush 67          # 67
10 26    # bipush 38          # 38
13 00 1C # ildc 28            # c[28] = 205
13 00 1D # ildc 29            # c[29] = 239
14 21 AF # aldc 8623          # s[8623] = "test_quantize (quantize.c0: 66.16-66.50)"
B8 00 26 # invokestatic 38    # make_pixel(67, 38, 205, 239, "test_quantize (quantize.c0: 66.16-66.50)")
10 02    # bipush 2           # 2
14 21 D8 # aldc 8664          # s[8664] = "test_quantize (quantize.c0: 66.7-66.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(67, 38, 205, 239, "test_quantize (quantize.c0: 66.16-66.50)"), 2, "test_quantize (quantize.c0: 66.7-66.54)")
36 01    # vstore 1           # p = quantize(make_pixel(67, 38, 205, 239, "test_quantize (quantize.c0: 66.16-66.50)"), 2, "test_quantize (quantize.c0: 66.7-66.54)");
15 01    # vload 1            # p
14 22 00 # aldc 8704          # s[8704] = "test_quantize (quantize.c0: 67.10-67.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 67.10-67.22)")
10 43    # bipush 67          # 67
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 67.10-67.22)") == 67) goto <240:cond_true>
A7 00 08 # goto +8            # goto <241:cond_false>
# <240:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <242:cond_end>
# <241:cond_false>
10 00    # bipush 0           # false
# <242:cond_end>
14 22 29 # aldc 8745          # s[8745] = "quantize.c0: 67.3-67.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 67.10-67.22)") == 67) [failure message on stack]
15 01    # vload 1            # p
14 22 50 # aldc 8784          # s[8784] = "test_quantize (quantize.c0: 68.10-68.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 68.10-68.20)")
10 24    # bipush 36          # 36
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 68.10-68.20)") == 36) goto <243:cond_true>
A7 00 08 # goto +8            # goto <244:cond_false>
# <243:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <245:cond_end>
# <244:cond_false>
10 00    # bipush 0           # false
# <245:cond_end>
14 22 79 # aldc 8825          # s[8825] = "quantize.c0: 68.3-68.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 68.10-68.20)") == 36) [failure message on stack]
15 01    # vload 1            # p
14 22 A0 # aldc 8864          # s[8864] = "test_quantize (quantize.c0: 69.10-69.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 69.10-69.22)")
13 00 1E # ildc 30            # c[30] = 204
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 69.10-69.22)") == 204) goto <246:cond_true>
A7 00 08 # goto +8            # goto <247:cond_false>
# <246:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <248:cond_end>
# <247:cond_false>
10 00    # bipush 0           # false
# <248:cond_end>
14 22 C9 # aldc 8905          # s[8905] = "quantize.c0: 69.3-69.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 69.10-69.22)") == 204) [failure message on stack]
15 01    # vload 1            # p
14 22 F0 # aldc 8944          # s[8944] = "test_quantize (quantize.c0: 70.10-70.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 70.10-70.21)")
13 00 1F # ildc 31            # c[31] = 236
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 70.10-70.21)") == 236) goto <249:cond_true>
A7 00 08 # goto +8            # goto <250:cond_false>
# <249:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <251:cond_end>
# <250:cond_false>
10 00    # bipush 0           # false
# <251:cond_end>
14 23 19 # aldc 8985          # s[8985] = "quantize.c0: 70.3-70.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 70.10-70.21)") == 236) [failure message on stack]
10 43    # bipush 67          # 67
10 21    # bipush 33          # 33
13 00 20 # ildc 32            # c[32] = 205
13 00 21 # ildc 33            # c[33] = 239
14 23 40 # aldc 9024          # s[9024] = "test_quantize (quantize.c0: 71.16-71.50)"
B8 00 26 # invokestatic 38    # make_pixel(67, 33, 205, 239, "test_quantize (quantize.c0: 71.16-71.50)")
10 03    # bipush 3           # 3
14 23 69 # aldc 9065          # s[9065] = "test_quantize (quantize.c0: 71.7-71.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(67, 33, 205, 239, "test_quantize (quantize.c0: 71.16-71.50)"), 3, "test_quantize (quantize.c0: 71.7-71.54)")
36 01    # vstore 1           # p = quantize(make_pixel(67, 33, 205, 239, "test_quantize (quantize.c0: 71.16-71.50)"), 3, "test_quantize (quantize.c0: 71.7-71.54)");
15 01    # vload 1            # p
14 23 91 # aldc 9105          # s[9105] = "test_quantize (quantize.c0: 72.10-72.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 72.10-72.22)")
10 43    # bipush 67          # 67
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 72.10-72.22)") == 67) goto <252:cond_true>
A7 00 08 # goto +8            # goto <253:cond_false>
# <252:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <254:cond_end>
# <253:cond_false>
10 00    # bipush 0           # false
# <254:cond_end>
14 23 BA # aldc 9146          # s[9146] = "quantize.c0: 72.3-72.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 72.10-72.22)") == 67) [failure message on stack]
15 01    # vload 1            # p
14 23 E1 # aldc 9185          # s[9185] = "test_quantize (quantize.c0: 73.10-73.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 73.10-73.20)")
10 20    # bipush 32          # 32
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 73.10-73.20)") == 32) goto <255:cond_true>
A7 00 08 # goto +8            # goto <256:cond_false>
# <255:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <257:cond_end>
# <256:cond_false>
10 00    # bipush 0           # false
# <257:cond_end>
14 24 0A # aldc 9226          # s[9226] = "quantize.c0: 73.3-73.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 73.10-73.20)") == 32) [failure message on stack]
15 01    # vload 1            # p
14 24 31 # aldc 9265          # s[9265] = "test_quantize (quantize.c0: 74.10-74.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 74.10-74.22)")
13 00 22 # ildc 34            # c[34] = 200
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 74.10-74.22)") == 200) goto <258:cond_true>
A7 00 08 # goto +8            # goto <259:cond_false>
# <258:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <260:cond_end>
# <259:cond_false>
10 00    # bipush 0           # false
# <260:cond_end>
14 24 5A # aldc 9306          # s[9306] = "quantize.c0: 74.3-74.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 74.10-74.22)") == 200) [failure message on stack]
15 01    # vload 1            # p
14 24 81 # aldc 9345          # s[9345] = "test_quantize (quantize.c0: 75.10-75.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 75.10-75.21)")
13 00 23 # ildc 35            # c[35] = 232
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 75.10-75.21)") == 232) goto <261:cond_true>
A7 00 08 # goto +8            # goto <262:cond_false>
# <261:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <263:cond_end>
# <262:cond_false>
10 00    # bipush 0           # false
# <263:cond_end>
14 24 AA # aldc 9386          # s[9386] = "quantize.c0: 75.3-75.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 75.10-75.21)") == 232) [failure message on stack]
10 43    # bipush 67          # 67
10 01    # bipush 1           # 1
13 00 24 # ildc 36            # c[36] = 205
13 00 25 # ildc 37            # c[37] = 239
14 24 D1 # aldc 9425          # s[9425] = "test_quantize (quantize.c0: 76.16-76.50)"
B8 00 26 # invokestatic 38    # make_pixel(67, 1, 205, 239, "test_quantize (quantize.c0: 76.16-76.50)")
10 05    # bipush 5           # 5
14 24 FA # aldc 9466          # s[9466] = "test_quantize (quantize.c0: 76.7-76.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(67, 1, 205, 239, "test_quantize (quantize.c0: 76.16-76.50)"), 5, "test_quantize (quantize.c0: 76.7-76.54)")
36 01    # vstore 1           # p = quantize(make_pixel(67, 1, 205, 239, "test_quantize (quantize.c0: 76.16-76.50)"), 5, "test_quantize (quantize.c0: 76.7-76.54)");
15 01    # vload 1            # p
14 25 22 # aldc 9506          # s[9506] = "test_quantize (quantize.c0: 77.10-77.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 77.10-77.22)")
10 43    # bipush 67          # 67
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 77.10-77.22)") == 67) goto <264:cond_true>
A7 00 08 # goto +8            # goto <265:cond_false>
# <264:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <266:cond_end>
# <265:cond_false>
10 00    # bipush 0           # false
# <266:cond_end>
14 25 4B # aldc 9547          # s[9547] = "quantize.c0: 77.3-77.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 77.10-77.22)") == 67) [failure message on stack]
15 01    # vload 1            # p
14 25 72 # aldc 9586          # s[9586] = "test_quantize (quantize.c0: 78.10-78.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 78.10-78.20)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 78.10-78.20)") == 0) goto <267:cond_true>
A7 00 08 # goto +8            # goto <268:cond_false>
# <267:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <269:cond_end>
# <268:cond_false>
10 00    # bipush 0           # false
# <269:cond_end>
14 25 9B # aldc 9627          # s[9627] = "quantize.c0: 78.3-78.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 78.10-78.20)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 25 C2 # aldc 9666          # s[9666] = "test_quantize (quantize.c0: 79.10-79.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 79.10-79.22)")
13 00 26 # ildc 38            # c[38] = 192
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 79.10-79.22)") == 192) goto <270:cond_true>
A7 00 08 # goto +8            # goto <271:cond_false>
# <270:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <272:cond_end>
# <271:cond_false>
10 00    # bipush 0           # false
# <272:cond_end>
14 25 EB # aldc 9707          # s[9707] = "quantize.c0: 79.3-79.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 79.10-79.22)") == 192) [failure message on stack]
15 01    # vload 1            # p
14 26 12 # aldc 9746          # s[9746] = "test_quantize (quantize.c0: 80.10-80.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 80.10-80.21)")
13 00 27 # ildc 39            # c[39] = 224
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 80.10-80.21)") == 224) goto <273:cond_true>
A7 00 08 # goto +8            # goto <274:cond_false>
# <273:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <275:cond_end>
# <274:cond_false>
10 00    # bipush 0           # false
# <275:cond_end>
14 26 3B # aldc 9787          # s[9787] = "quantize.c0: 80.3-80.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 80.10-80.21)") == 224) [failure message on stack]
13 00 28 # ildc 40            # c[40] = 255
10 1A    # bipush 26          # 26
10 35    # bipush 53          # 53
13 00 29 # ildc 41            # c[41] = 255
14 26 62 # aldc 9826          # s[9826] = "test_quantize (quantize.c0: 81.16-81.50)"
B8 00 26 # invokestatic 38    # make_pixel(255, 26, 53, 255, "test_quantize (quantize.c0: 81.16-81.50)")
10 06    # bipush 6           # 6
14 26 8B # aldc 9867          # s[9867] = "test_quantize (quantize.c0: 81.7-81.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(255, 26, 53, 255, "test_quantize (quantize.c0: 81.16-81.50)"), 6, "test_quantize (quantize.c0: 81.7-81.54)")
36 01    # vstore 1           # p = quantize(make_pixel(255, 26, 53, 255, "test_quantize (quantize.c0: 81.16-81.50)"), 6, "test_quantize (quantize.c0: 81.7-81.54)");
15 01    # vload 1            # p
14 26 B3 # aldc 9907          # s[9907] = "test_quantize (quantize.c0: 82.10-82.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 82.10-82.22)")
13 00 2A # ildc 42            # c[42] = 255
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 82.10-82.22)") == 255) goto <276:cond_true>
A7 00 08 # goto +8            # goto <277:cond_false>
# <276:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <278:cond_end>
# <277:cond_false>
10 00    # bipush 0           # false
# <278:cond_end>
14 26 DC # aldc 9948          # s[9948] = "quantize.c0: 82.3-82.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 82.10-82.22)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 27 03 # aldc 9987          # s[9987] = "test_quantize (quantize.c0: 83.10-83.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 83.10-83.20)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 83.10-83.20)") == 0) goto <279:cond_true>
A7 00 08 # goto +8            # goto <280:cond_false>
# <279:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <281:cond_end>
# <280:cond_false>
10 00    # bipush 0           # false
# <281:cond_end>
14 27 2C # aldc 10028         # s[10028] = "quantize.c0: 83.3-83.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 83.10-83.20)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 27 53 # aldc 10067         # s[10067] = "test_quantize (quantize.c0: 84.10-84.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 84.10-84.22)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 84.10-84.22)") == 0) goto <282:cond_true>
A7 00 08 # goto +8            # goto <283:cond_false>
# <282:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <284:cond_end>
# <283:cond_false>
10 00    # bipush 0           # false
# <284:cond_end>
14 27 7C # aldc 10108         # s[10108] = "quantize.c0: 84.3-84.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 84.10-84.22)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 27 A3 # aldc 10147         # s[10147] = "test_quantize (quantize.c0: 85.10-85.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 85.10-85.21)")
13 00 2B # ildc 43            # c[43] = 192
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 85.10-85.21)") == 192) goto <285:cond_true>
A7 00 08 # goto +8            # goto <286:cond_false>
# <285:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <287:cond_end>
# <286:cond_false>
10 00    # bipush 0           # false
# <287:cond_end>
14 27 CC # aldc 10188         # s[10188] = "quantize.c0: 85.3-85.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 85.10-85.21)") == 192) [failure message on stack]
13 00 2C # ildc 44            # c[44] = 255
10 0A    # bipush 10          # 10
10 67    # bipush 103         # 103
13 00 2D # ildc 45            # c[45] = 255
14 27 F3 # aldc 10227         # s[10227] = "test_quantize (quantize.c0: 86.16-86.50)"
B8 00 26 # invokestatic 38    # make_pixel(255, 10, 103, 255, "test_quantize (quantize.c0: 86.16-86.50)")
10 07    # bipush 7           # 7
14 28 1C # aldc 10268         # s[10268] = "test_quantize (quantize.c0: 86.7-86.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(255, 10, 103, 255, "test_quantize (quantize.c0: 86.16-86.50)"), 7, "test_quantize (quantize.c0: 86.7-86.54)")
36 01    # vstore 1           # p = quantize(make_pixel(255, 10, 103, 255, "test_quantize (quantize.c0: 86.16-86.50)"), 7, "test_quantize (quantize.c0: 86.7-86.54)");
15 01    # vload 1            # p
14 28 44 # aldc 10308         # s[10308] = "test_quantize (quantize.c0: 87.10-87.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 87.10-87.22)")
13 00 2E # ildc 46            # c[46] = 255
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 87.10-87.22)") == 255) goto <288:cond_true>
A7 00 08 # goto +8            # goto <289:cond_false>
# <288:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <290:cond_end>
# <289:cond_false>
10 00    # bipush 0           # false
# <290:cond_end>
14 28 6D # aldc 10349         # s[10349] = "quantize.c0: 87.3-87.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 87.10-87.22)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 28 94 # aldc 10388         # s[10388] = "test_quantize (quantize.c0: 88.10-88.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 88.10-88.20)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 88.10-88.20)") == 0) goto <291:cond_true>
A7 00 08 # goto +8            # goto <292:cond_false>
# <291:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <293:cond_end>
# <292:cond_false>
10 00    # bipush 0           # false
# <293:cond_end>
14 28 BD # aldc 10429         # s[10429] = "quantize.c0: 88.3-88.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 88.10-88.20)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 28 E4 # aldc 10468         # s[10468] = "test_quantize (quantize.c0: 89.10-89.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 89.10-89.22)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 89.10-89.22)") == 0) goto <294:cond_true>
A7 00 08 # goto +8            # goto <295:cond_false>
# <294:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <296:cond_end>
# <295:cond_false>
10 00    # bipush 0           # false
# <296:cond_end>
14 29 0D # aldc 10509         # s[10509] = "quantize.c0: 89.3-89.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 89.10-89.22)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 29 34 # aldc 10548         # s[10548] = "test_quantize (quantize.c0: 90.10-90.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 90.10-90.21)")
13 00 2F # ildc 47            # c[47] = 128
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 90.10-90.21)") == 128) goto <297:cond_true>
A7 00 08 # goto +8            # goto <298:cond_false>
# <297:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <299:cond_end>
# <298:cond_false>
10 00    # bipush 0           # false
# <299:cond_end>
14 29 5D # aldc 10589         # s[10589] = "quantize.c0: 90.3-90.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 90.10-90.21)") == 128) [failure message on stack]
13 00 30 # ildc 48            # c[48] = 255
13 00 31 # ildc 49            # c[49] = 255
10 37    # bipush 55          # 55
10 00    # bipush 0           # 0
14 29 84 # aldc 10628         # s[10628] = "test_quantize (quantize.c0: 91.16-91.50)"
B8 00 26 # invokestatic 38    # make_pixel(255, 255, 55, 0, "test_quantize (quantize.c0: 91.16-91.50)")
10 08    # bipush 8           # 8
14 29 AD # aldc 10669         # s[10669] = "test_quantize (quantize.c0: 91.7-91.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(255, 255, 55, 0, "test_quantize (quantize.c0: 91.16-91.50)"), 8, "test_quantize (quantize.c0: 91.7-91.54)")
36 01    # vstore 1           # p = quantize(make_pixel(255, 255, 55, 0, "test_quantize (quantize.c0: 91.16-91.50)"), 8, "test_quantize (quantize.c0: 91.7-91.54)");
15 01    # vload 1            # p
14 29 D5 # aldc 10709         # s[10709] = "test_quantize (quantize.c0: 92.10-92.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 92.10-92.22)")
13 00 32 # ildc 50            # c[50] = 255
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 92.10-92.22)") == 255) goto <300:cond_true>
A7 00 08 # goto +8            # goto <301:cond_false>
# <300:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <302:cond_end>
# <301:cond_false>
10 00    # bipush 0           # false
# <302:cond_end>
14 29 FE # aldc 10750         # s[10750] = "quantize.c0: 92.3-92.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 92.10-92.22)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 2A 25 # aldc 10789         # s[10789] = "test_quantize (quantize.c0: 93.10-93.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 93.10-93.20)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 93.10-93.20)") == 0) goto <303:cond_true>
A7 00 08 # goto +8            # goto <304:cond_false>
# <303:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <305:cond_end>
# <304:cond_false>
10 00    # bipush 0           # false
# <305:cond_end>
14 2A 4E # aldc 10830         # s[10830] = "quantize.c0: 93.3-93.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 93.10-93.20)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 2A 75 # aldc 10869         # s[10869] = "test_quantize (quantize.c0: 94.10-94.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 94.10-94.22)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 94.10-94.22)") == 0) goto <306:cond_true>
A7 00 08 # goto +8            # goto <307:cond_false>
# <306:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <308:cond_end>
# <307:cond_false>
10 00    # bipush 0           # false
# <308:cond_end>
14 2A 9E # aldc 10910         # s[10910] = "quantize.c0: 94.3-94.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 94.10-94.22)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 2A C5 # aldc 10949         # s[10949] = "test_quantize (quantize.c0: 95.10-95.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 95.10-95.21)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 95.10-95.21)") == 0) goto <309:cond_true>
A7 00 08 # goto +8            # goto <310:cond_false>
# <309:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <311:cond_end>
# <310:cond_false>
10 00    # bipush 0           # false
# <311:cond_end>
14 2A EE # aldc 10990         # s[10990] = "quantize.c0: 95.3-95.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 95.10-95.21)") == 0) [failure message on stack]
13 00 33 # ildc 51            # c[51] = 255
10 00    # bipush 0           # 0
10 37    # bipush 55          # 55
13 00 34 # ildc 52            # c[52] = 255
14 2B 15 # aldc 11029         # s[11029] = "test_quantize (quantize.c0: 96.16-96.50)"
B8 00 26 # invokestatic 38    # make_pixel(255, 0, 55, 255, "test_quantize (quantize.c0: 96.16-96.50)")
10 08    # bipush 8           # 8
14 2B 3E # aldc 11070         # s[11070] = "test_quantize (quantize.c0: 96.7-96.54)"
B8 00 2C # invokestatic 44    # quantize(make_pixel(255, 0, 55, 255, "test_quantize (quantize.c0: 96.16-96.50)"), 8, "test_quantize (quantize.c0: 96.7-96.54)")
36 01    # vstore 1           # p = quantize(make_pixel(255, 0, 55, 255, "test_quantize (quantize.c0: 96.16-96.50)"), 8, "test_quantize (quantize.c0: 96.7-96.54)");
15 01    # vload 1            # p
14 2B 66 # aldc 11110         # s[11110] = "test_quantize (quantize.c0: 97.10-97.22)"
B8 00 27 # invokestatic 39    # get_alpha(p, "test_quantize (quantize.c0: 97.10-97.22)")
13 00 35 # ildc 53            # c[53] = 255
9F 00 06 # if_cmpeq +6        # if (get_alpha(p, "test_quantize (quantize.c0: 97.10-97.22)") == 255) goto <312:cond_true>
A7 00 08 # goto +8            # goto <313:cond_false>
# <312:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <314:cond_end>
# <313:cond_false>
10 00    # bipush 0           # false
# <314:cond_end>
14 2B 8F # aldc 11151         # s[11151] = "quantize.c0: 97.3-97.32: assert failed"
CF       # assert             # assert (get_alpha(p, "test_quantize (quantize.c0: 97.10-97.22)") == 255) [failure message on stack]
15 01    # vload 1            # p
14 2B B6 # aldc 11190         # s[11190] = "test_quantize (quantize.c0: 98.10-98.20)"
B8 00 28 # invokestatic 40    # get_red(p, "test_quantize (quantize.c0: 98.10-98.20)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_red(p, "test_quantize (quantize.c0: 98.10-98.20)") == 0) goto <315:cond_true>
A7 00 08 # goto +8            # goto <316:cond_false>
# <315:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <317:cond_end>
# <316:cond_false>
10 00    # bipush 0           # false
# <317:cond_end>
14 2B DF # aldc 11231         # s[11231] = "quantize.c0: 98.3-98.32: assert failed"
CF       # assert             # assert (get_red(p, "test_quantize (quantize.c0: 98.10-98.20)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 2C 06 # aldc 11270         # s[11270] = "test_quantize (quantize.c0: 99.10-99.22)"
B8 00 29 # invokestatic 41    # get_green(p, "test_quantize (quantize.c0: 99.10-99.22)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_green(p, "test_quantize (quantize.c0: 99.10-99.22)") == 0) goto <318:cond_true>
A7 00 08 # goto +8            # goto <319:cond_false>
# <318:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <320:cond_end>
# <319:cond_false>
10 00    # bipush 0           # false
# <320:cond_end>
14 2C 2F # aldc 11311         # s[11311] = "quantize.c0: 99.3-99.32: assert failed"
CF       # assert             # assert (get_green(p, "test_quantize (quantize.c0: 99.10-99.22)") == 0) [failure message on stack]
15 01    # vload 1            # p
14 2C 56 # aldc 11350         # s[11350] = "test_quantize (quantize.c0: 100.10-100.21)"
B8 00 2A # invokestatic 42    # get_blue(p, "test_quantize (quantize.c0: 100.10-100.21)")
10 00    # bipush 0           # 0
9F 00 06 # if_cmpeq +6        # if (get_blue(p, "test_quantize (quantize.c0: 100.10-100.21)") == 0) goto <321:cond_true>
A7 00 08 # goto +8            # goto <322:cond_false>
# <321:cond_true>
10 01    # bipush 1           # true
A7 00 05 # goto +5            # goto <323:cond_end>
# <322:cond_false>
10 00    # bipush 0           # false
# <323:cond_end>
14 2C 81 # aldc 11393         # s[11393] = "quantize.c0: 100.3-100.32: assert failed"
CF       # assert             # assert (get_blue(p, "test_quantize (quantize.c0: 100.10-100.21)") == 0) [failure message on stack]
10 00    # bipush 0           # dummy return value
B0       # return             # 

00 17             # native count
# native pool
00 02 00 64       # string_join
00 01 00 65       # string_length
00 02 00 5D       # string_charat
00 03 00 66       # string_sub
00 02 00 5F       # string_equal
00 02 00 5E       # string_compare
00 01 00 63       # string_fromint
00 01 00 61       # string_frombool
00 01 00 62       # string_fromchar
00 01 00 69       # string_tolower
00 02 00 67       # string_terminated
00 01 00 68       # string_to_chararray
00 01 00 60       # string_from_chararray
00 01 00 5C       # char_ord
00 01 00 5B       # char_chr
00 01 00 06       # print
00 01 00 0A       # println
00 01 00 09       # printint
00 01 00 07       # printbool
00 01 00 08       # printchar
00 00 00 05       # flush
00 00 00 04       # eof
00 00 00 0B       # readline

