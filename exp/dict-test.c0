/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/*
 * Basic test cases for the dictionary interface
 *
 * 15-122 Principles of Imperative Computation
 */

int main() {
  dict_t D;

  printf("Testing edge case, the empty dictionary\n");
  string[] A = alloc_array(string, 0);
  D = dict_new(A, 0);
  assert(D != NULL);
  assert(-1 == dict_lookup(D, "/"));
  assert(-1 == dict_lookup(D, "**"));
  assert(-1 == dict_lookup(D, "+"));
  assert(-1 == dict_lookup(D, "-"));
  assert(-1 == dict_lookup(D, "@"));
  assert(-1 == dict_lookup(D, "invalid operator"));

  printf("Testing C/C0 precedence\n");
  string[] B = alloc_array(string, 3);
  B[2] = "**";
  B[1] = "* /";
  B[0] = "+ -";
  D = dict_new(B, 3);
  assert(D != NULL);
  assert(1  == dict_lookup(D, "/"));
  assert(2  == dict_lookup(D, "**"));
  assert(0  == dict_lookup(D, "+"));
  assert(0  == dict_lookup(D, "-"));
  assert(-1 == dict_lookup(D, "@"));
  assert(-1 == dict_lookup(D, "invalid operator"));

  printf("Testing (a misunderstanding of) grade-school precedence\n");
  string[] C = alloc_array(string, 5);
  C[4] = "**";
  C[3] = "*";
  C[2] = "/";
  C[1] = "+";
  C[0] = "-";
  D = dict_new(C, 5);
  assert(D != NULL);
  assert(2  == dict_lookup(D, "/"));
  assert(4  == dict_lookup(D, "**"));
  assert(1  == dict_lookup(D, "+"));
  assert(0  == dict_lookup(D, "-"));
  assert(-1 == dict_lookup(D, "@"));
  assert(-1 == dict_lookup(D, "invalid operator"));

  printf("Testing case where some precedences have no tokens\n");
  string[] E = alloc_array(string, 30);
  E[25] = "**";
  E[15] = "* /";
  E[10] = "           \t     "; // Whitespace, no tokens
  E[5] = "+ -";
  D = dict_new(E, 30);
  assert(D != NULL);
  assert(15 == dict_lookup(D, "/"));
  assert(25 == dict_lookup(D, "**"));
  assert(5  == dict_lookup(D, "+"));
  assert(5  == dict_lookup(D, "-"));
  assert(-1 == dict_lookup(D, "@"));
  assert(-1 == dict_lookup(D, "invalid operator"));

  printf("Testing invalid dictonary: + ");
  printf("appears twice w/ different precedence\n");
  string[] F = alloc_array(string, 3);
  F[2] = "** +";
  F[1] = "* /";
  F[0] = "+ -";
  assert(NULL == dict_new(F, 3));

  printf("Testing invalid dictonary: + appears twice w/ same precedence\n");
  string[] G = alloc_array(string, 3);
  G[2] = "**";
  G[1] = "* /";
  G[0] = "+ - +";
  assert(NULL == dict_new(G, 3));

  printf("All tests passed!\n");
  return 0;
}
