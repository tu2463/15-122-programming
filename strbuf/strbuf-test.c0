/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <string>
#use <conio>

// You are welcome to define helper functions for your tests
void test_B_and_B2(strbuf* B)
{
  assert(B != NULL && is_strbuf(B));
  assert(B->buf[0] == 'a');
  assert(B->buf[1] == 'a');
  assert(B->buf[2] == 'b');
  assert(B->buf[3] == 'c');
  assert(B->buf[4] == 'b');
  assert(B->buf[5] == 'c');
  assert(B->buf[6] == ' ');
  assert(B->buf[7] == 'e');
  assert(B->buf[8] == 'f');
  assert(B->buf[9] == ' ');
  assert(B->buf[10] == 'e');
  assert(B->buf[11] == 'f');
  assert(B->buf[12] == 'g');
  assert(B->buf[13] == 'g');
  assert(B->buf[14] == '\0');
}

bool check_copy_str(char[] check, strbuf* sb)
//@ensures \length(check) == sb->len + 1;
// @ensures string_terminated(check, \length(check));
// @ensures is_cstring(check, 0, \length(check));
// @ensures check[strlen(check, 0)] == '\0'; 
{
  assert(sb != NULL && is_strbuf(sb));
  for (int i = 0; i < sb->len + 1; i++){
    if (check[i] != sb->buf[i]) return false;
  }
  assert(check[(sb->len)] == '\0');
  assert(strlen(check, 0) == sb->len);
  return true;
}

// bool check_valid_string(strbuf* sb){
//   assert(sb != NULL && is_strbuf(sb));
//   //@assert \length(sb->buf) == sb->limit;
//   for (int i = 0; i < (sb->len); i++){
//     if (sb->buf[i] == '\0') return false;
//   }
//   return true;
// }

bool check_add(strbuf* sb)
{
  return sb != NULL && is_strbuf(sb);
  // return is_strbuf(sb) && sb->len == strlen(sb->buf, 0);
}

bool check_new(strbuf* sb, int init_limit){
  // @assert(\length(sb->buf) > 0);
  if (sb == NULL || sb->limit != init_limit 
      || sb->len != 0 
      || sb->len >= sb->limit || !is_strbuf(sb)) return false;
  //@assert \length(sb->buf) == sb->limit;
  for (int i = 0; i < (sb->len); i++){
    if (sb->buf[i] == '\0') return false;
  }
  return sb->buf[sb->len] == '\0';
  // return is_strbuf(sb);
  // return sb->len == 0 && sb->buf[sb->len] == '\0' && is_strbuf(sb);
}

int main() {
  // strbuf* Error = strbuf_new(0); // this will cause error

  strbuf* B = strbuf_new(1);
  assert(check_new(B, 1));

  int limit = 2;
  // char[] C = alloc_array(char, limit);
  // C[0] = 'a';
  // C[1] = '\0';
  char[] C = string_to_chararray("a");
  printf("--main testing B\n");
  assert(check_copy_str(strbuf_str(B), B));
  strbuf_add(B, C, limit - 1);
  strbuf_addstr(B, C);
  assert(check_add(B));
  assert(B->buf[0] == 'a');
  // printf("%s%c\n","buf[1]>",B->buf[1]);
  assert(B->buf[1] == 'a');
  assert(B->buf[2] == '\0');
  assert(check_copy_str(strbuf_str(B), B));

  int limit2 = 3;
  // char[] C2 = alloc_array(char, limit2);
  // C2[0] = 'b';
  // C2[1] = 'c';
  // C2[2] = '\0';
  char[] C2 = string_to_chararray("bc");
  strbuf_add(B, C2, limit2 - 1);
  strbuf_addstr(B, C2);
  assert(check_add(B));
  assert(B->buf[2] == 'b');
  assert(B->buf[3] == 'c');
  assert(B->buf[4] == 'b');
  assert(B->buf[5] == 'c');
  assert(B->buf[6] == '\0');

  int limit3 = 1;
  char[] C3 = alloc_array(char, limit3);
  C3[0] = '\0';
  strbuf_add(B, C3, limit3 - 1);
  strbuf_addstr(B, C3);
  assert(check_add(B));
  assert(B->buf[6] == '\0');
  assert(check_copy_str(strbuf_str(B), B));

  // int limit4 = 6;
  // char[] C4 = alloc_array(char, limit4);
  // C4[0] = ' ';
  // C4[1] = 'e';
  // C4[2] = 'f';
  // C4[3] = '\0';
  char[] C4 = string_to_chararray(" ef");
  strbuf_add(B, C4, 3);
  strbuf_addstr(B, C4);
  assert(check_add(B));
  assert(B->buf[6] == ' ');
  assert(B->buf[7] == 'e');
  assert(B->buf[8] == 'f');
  assert(B->buf[9] == ' ');
  assert(B->buf[10] == 'e');
  assert(B->buf[11] == 'f');
  assert(B->buf[12] == '\0');
  
  int limit5 = 6;
  char[] C5 = alloc_array(char, limit5);
  C5[0] = 'g';
  C5[1] = '\0';
  // C5[2] = 'h';
  // C5[3] = '\0';
  strbuf_add(B, C5, 1);
  strbuf_addstr(B, C5);
  assert(check_add(B));
  test_B_and_B2(B);
  assert(check_copy_str(strbuf_str(B), B));

  strbuf* B2 = strbuf_new(3);
  assert(check_new(B2, 3));
  printf("--main testing B2\n");
  assert(check_copy_str(strbuf_str(B2), B2));
  int B2_limit_before = B2->limit;
  int B2_len_before = B2->len;
  strbuf_add(B2, C, limit - 1);
  assert(B2->limit == B2_limit_before 
         || B2_limit_before - B2_len_before <= limit - 1);
  strbuf_addstr(B2, C);
  assert(check_add(B2));
  assert(B2->buf[0] == 'a');
  assert(B2->buf[1] == 'a');
  assert(B2->buf[2] == '\0');
  strbuf_add(B2, C2, limit2 - 1);
  B2_limit_before = B2->limit;
  B2_len_before = B2->len;
  strbuf_addstr(B2, C2);
  assert(B2->limit == B2_limit_before 
         || B2_limit_before - B2_len_before <= limit2 - 1);
  assert(B2->buf[2] == 'b');
  assert(B2->buf[3] == 'c');
  assert(B2->buf[4] == 'b');
  assert(B2->buf[5] == 'c');
  assert(B2->buf[6] == '\0');
  B2_limit_before = B2->limit;
  B2_len_before = B2->len;
  strbuf_add(B2, C3, limit3 - 1);
  assert(B2->limit == B2_limit_before 
         || B2_limit_before - B2_len_before <= limit3 - 1);
  strbuf_addstr(B2, C3);
  assert(check_add(B2));
  assert(B2->buf[6] == '\0');
  strbuf_add(B2, C4, 3);
  assert(check_add(B2));
  B2_limit_before = B2->limit;
  B2_len_before = B2->len;
  strbuf_addstr(B2, C4);
  assert(check_add(B2));
  assert(B2->limit == B2_limit_before 
         || B2_limit_before - B2_len_before <= 3);
  assert(B2->buf[6] == ' ');
  assert(B2->buf[7] == 'e');
  assert(B2->buf[8] == 'f');
  assert(B2->buf[9] == ' ');
  assert(B2->buf[10] == 'e');
  assert(B2->buf[11] == 'f');
  assert(B2->buf[12] == '\0');
  B2_limit_before = B2->limit;
  B2_len_before = B2->len;
  strbuf_add(B2, C5, 1);
  assert(B2->limit == B2_limit_before 
         || B2_limit_before - B2_len_before <= 1);
  strbuf_addstr(B2, C5);
  assert(check_add(B2));
  test_B_and_B2(B2);
  assert(check_copy_str(strbuf_str(B2), B2));

  int B3_limit_original = 3;
  strbuf* B3 = strbuf_new(B3_limit_original);
  assert(check_new(B3, 3));
  printf("--main testing B3\n");
  int B3_limit_before = B3->limit;
  int B3_len_before = B3->len;
  for (int i = 0; i < 500; i ++){
    B3_limit_before = B3->limit;
    B3_len_before = B3->len;
    strbuf_add(B3, C2, limit2 - 1);
    assert(B3->limit == B3_limit_before 
           || B3_limit_before - B3_len_before <= (limit2 - 1));
  }
  printf("--main B3 pt 1 done\n");
  for (int i = 0; i < 100; i ++){
    strbuf_addstr(B3, C2);
  }
  assert(check_add(B3));
  printf("--main B3 pt 2 done\n");
  // print_strbuf(B3);
  for (int i = 0; i < 20; i ++){ 
    // only check the first part and last part to save time
    if (i % 2 == 0) assert(B3->buf[i] == 'b');
    else assert(B3->buf[i] == 'c');
  }
  for (int i = 980; i < 1000; i ++){
    if (i % 2 == 0) assert(B3->buf[i] == 'b');
    else assert(B3->buf[i] == 'c');
  }
  assert(check_copy_str(strbuf_str(B3), B3));

  char[] C6 = alloc_array(char, 1001);
  for (int i = 0; i < 1000; i ++){
    int num = i % 94 + 33;
    C6[i] = char_chr(num);
  }
  C6[1000] = '\0';
  // for (int i = 0; i < 1000; i ++){
  //   printf("C6[%d] = %c\n",i,C6[i]);
  // }
  // printf("strlen>%d\n",strlen(C6, 0));
  strbuf_add(B3, C6, 1000);
  strbuf_addstr(B3, C6);
  assert(check_add(B3));
  assert(check_copy_str(strbuf_str(B3), B3));

  printf("--main testing B4\n"); // test isbuf
  strbuf* B4 = NULL;
  assert(!is_strbuf(B4));
  B4 = strbuf_new(1);
  assert(check_new(B4, 1));
  B4->limit = 0;
  assert(!is_strbuf(B4)); //limit<1
  B4->limit = 1;
  B4->len = -1;
  assert(!is_strbuf(B4)); //len<0
  B4->len = 1;
  assert(!is_strbuf(B4)); // len=limit
  B4->len = 3;
  assert(!is_strbuf(B4)); // len>limit
  B4->len = 0;
  assert(is_strbuf(B4)); //correct
  B4 = strbuf_new(2); 
  assert(check_new(B4, 2));
  B4->len = 1;
  assert(!is_strbuf(B4)); //len(=1)!=strlen(=0)
  B4 = strbuf_new(1);
  strbuf_add(B4, C, 1);
  assert(is_strbuf(B4));

  strbuf_add(B4, C, 1);
  strbuf_addstr(B4, C);
  assert(check_add(B4));
  assert(B4->buf[0] == 'a');
  assert(B4->buf[1] == 'a');
  assert(B4->buf[2] == 'a');
  B4->buf[1] = '2';
  assert(B4->buf[0] == 'a');
  assert(B4->buf[1] == '2');
  assert(B4->buf[2] == 'a');
  strbuf_add(B4, C2, limit2 - 1);
  strbuf_addstr(B4, C2);
  assert(check_add(B4));
  assert(B4->buf[0] == 'a');
  assert(B4->buf[1] == '2');
  assert(B4->buf[2] == 'a');
  assert(B4->buf[3] == 'b');
  assert(B4->buf[4] == 'c');
  assert(B4->buf[5] == 'b');
  assert(B4->buf[6] == 'c');

  // B4->buf[0] = '\0';
  // assert(!is_strbuf(B4)); //len!=strlen
  // B4->buf[0] = 'a';
  // B4->buf[3] = '\0';
  // assert(!is_strbuf(B4)); //len!=strlen
  // B4->buf[3] = '2';
  // B4->buf[6] = '\0';
  // assert(!is_strbuf(B4)); //len!=strlen
  // B4->buf[6] = 'c';

  printf("--main testing B5\n"); // test strbuf_str
  strbuf* B5 = strbuf_new(1);
  assert(check_new(B5, 1));
  strbuf_add(B5, C3, 0);
  strbuf_addstr(B5, C3);
  assert(check_add(B5));
  assert(check_copy_str(strbuf_str(B5), B5));
  strbuf_add(B5, C4, 3);
  strbuf_addstr(B5, C4); //defdef0
  assert(check_add(B5));
  B5->buf[5] = '\0';
  B5->len --;
  assert(check_copy_str(strbuf_str(B5), B5));

  strbuf *B6 = strbuf_new(20);
  assert(check_new(B6, 20));
  assert(B6 != NULL && B6->limit == 20);
  //@assert(\length(B6->buf) == 20);

  strbuf_add(B6, C4, 3);
  assert(B6->buf[3] == '\0');
  B6->buf[4] = 'z';
  // B6->buf[8] = 'y';
  assert(is_strbuf(B6));
  strbuf_addstr(B6, C4);
  assert(B6->buf[4] == 'e');
  assert(B6->buf[6] == '\0');
  assert(is_strbuf(B6));
  assert(strlen(B6->buf, 0) == 6);
  // assert(check_valid_string(B6));
  // B6->buf[7] = 'x';
  // assert(is_strbuf(B6));
  // strbuf_add(B6, C4, 3);
  // assert(B6->buf[9] == '\0');
  // assert(is_strbuf(B6));
  // assert(check_valid_string(B6));


  printf("All tests passed!\n");
  
  return 0;
}
